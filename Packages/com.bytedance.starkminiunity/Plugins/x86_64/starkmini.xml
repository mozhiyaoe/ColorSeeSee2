<?xml version="1.0"?>
<doc>
    <assembly>
        <name>starkmini</name>
    </assembly>
    <members>
        <member name="T:StarkMini.AsyncInstanceObject">
            <summary>
            一个异步实例对象 MonoBehaviour 。  
            可以设置资源引用方式，调用异步加载，完成后替换对象或添加到指定位置。
            </summary>
        </member>
        <member name="T:StarkMini.AsyncInstanceVar">
            <summary>
            一个异步实例变量。  
            可以作为MonoBehaviour的一个属性，方便设置Addressable资源名，并调用异步实例化。
            </summary>
        </member>
        <member name="T:StarkMini.AsyncResVar">
            <summary>
            一个异步资源变量。  
            可以作为MonoBehaviour的一个属性，方便设置Addressable资源名，并调用异步加载资源。
            </summary>
        </member>
        <member name="P:StarkMini.BackgroundLoader.UpdateInterval">
            <summary>
            Update队列检查间隔，单位：ms 毫秒
            </summary>
        </member>
        <member name="M:StarkMini.BackgroundLoader.AddAsset``1(System.String,StarkMini.BackgroundLoadPriority)">
            <summary>
            添加单个Asset到后台加载队列中
            </summary>
            <param name="key"></param>
            <param name="priority"></param>
        </member>
        <member name="M:StarkMini.BackgroundLoader.AddAssets``1(System.String,StarkMini.BackgroundLoadPriority)">
            <summary>
            添加一组Assets到后台加载队列中，通常 key 为 label。
            </summary>
            <param name="key"></param>
            <param name="priority"></param>
        </member>
        <member name="M:StarkMini.BackgroundLoader.AddDownloadOnly(System.String,StarkMini.BackgroundLoadPriority)">
            <summary>
            添加仅下载的任务。 比如下载场景资源，但不要切换的时候。
            </summary>
            <param name="key"></param>
            <param name="priority"></param>
        </member>
        <member name="T:StarkMini.LoadTaskList">
            <summary>
            封装一组资源加载任务，以便于统一跟踪加载状态，检测、捕捉加载错误。
            </summary>
        </member>
        <member name="M:StarkMini.LoadTaskList.Create">
            <summary>
            创建一组加载任务。
            </summary>
            <returns>LoadTaskList</returns>
        </member>
        <member name="M:StarkMini.LoadTaskList.Create``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            创建一组加载任务。
            </summary>
            <returns>LoadTaskList</returns>
        </member>
        <member name="M:StarkMini.LoadTaskList.Create(System.Threading.Tasks.Task{System.Boolean})">
            <summary>
            创建一组加载任务。
            </summary>
        </member>
        <member name="M:StarkMini.LoadTaskList.LoadAll">
            <summary>
            等待所有加载任务，返回 isSuccess (bool) 的结果值
            </summary>
            <returns>是否全部成功</returns>
        </member>
        <member name="P:StarkMini.LoadTaskList.IsDone">
            <summary>
            是否所有加载任务已完成（包括成功或失败）
            </summary>
        </member>
        <member name="P:StarkMini.LoadTaskList.IsFaulted">
            <summary>
            是否有加载任务出错
            </summary>
        </member>
        <member name="P:StarkMini.LoadTaskList.IsSucceeded">
            <summary>
            是否所有加载任务成功
            </summary>
        </member>
        <member name="P:StarkMini.LoadTaskList.PercentComplete">
            <summary>
            加载任务进度, 仅按数量计算完成度，不精确计算每个bundle的大小。范围为 0 ~ 1 的 float.  <br/>
            举例：涉及 9 个文件每个 1 MB、1 个 10 MB 文件时，这个大文件计算 PercentComplete 时占 10%。 <br/>
            The progress of load tasks.
            </summary>
        </member>
        <member name="M:StarkMini.LoadTaskList.GetDownloadStatus">
            <summary>
            返回下载进度，会综合计算依赖的每个bundle、及其文件大小。<br/>
            返回`DownloadStatus`结构体，可以进一步取得 Percent 百分比、DownloadedBytes、TotalBytes 字节数。<br/>
            举例：涉及 9 个文件每个 1 MB、1 个 10 MB 文件时，这个大文件计算 Percent 时占 52.6%。<br/>
            Return the current download status for this operation and its dependencies.
            </summary>
            <returns></returns>
        </member>
        <member name="P:StarkMini.LoadTaskList.Count">
            <summary>
            包含的加载任务数量
            </summary>
        </member>
        <member name="P:StarkMini.LoadTaskList.DoneCount">
            <summary>
            完成的加载任务数量（可能是成功、也可能失败的）
            </summary>
        </member>
        <member name="P:StarkMini.LoadTaskList.HandlesCount">
            <summary>
            包含的`AsyncOperationHandle`数量
            </summary>
        </member>
        <member name="P:StarkMini.LoadTaskList.HandlesDoneCount">
            <summary>
            完成的`AsyncOperationHandle`的数量（可能是成功、也可能失败的）
            </summary>
        </member>
        <member name="M:StarkMini.LoadTaskList.Add``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            添加管理一个 asset 加载任务的 handle .
            Add a asset load handle into managed task list.
            </summary>
            <param name="handle"></param>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:StarkMini.LoadTaskList.Add(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            添加管理一个 asset 加载任务的 handle .
            Add a asset load handle into managed task list.
            </summary>
            <param name="handle"></param>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:StarkMini.LoadTaskList.Add(System.Threading.Tasks.Task)">
            <summary>
            Add a task object into managed task list.  <br/>
            </summary>
        </member>
        <member name="M:StarkMini.LoadTaskList.Add(System.Threading.Tasks.Task{System.Boolean})">
            <summary>
            添加管理一个 加载任务的 Task，必须是携带 Result 类型为 bool: 表示加载 isSuccess.  <br/>
            Add a load task object into managed task list.  
            </summary>
        </member>
        <member name="M:StarkMini.LoadTaskList.Clear(System.Boolean)">
            <summary>
            清理所有加载任务，可选择释放所有 AsyncOperationHandle
            </summary>
            <param name="releaseHandles"></param>
        </member>
        <member name="M:StarkMini.LoadTaskList.ReleaseHandles">
            <summary>
            释放所有 AsyncOperationHandle
            </summary>
        </member>
        <member name="T:StarkMini.LoadingManager">
            <summary>
            负责控制Loading状态，随加载过程调用Loading界面，检查和捕捉加载任务的错误。
            </summary>
        </member>
        <member name="T:StarkMini.LoadingManager.LoadOptions">
            <summary>
            extra load options
            </summary>
        </member>
        <member name="F:StarkMini.LoadingManager.LoadOptions.millisecondsTimeout">
            <summary>
            Load 超时时间，超过则视为失败。  <br/>
            若 大于 0 - 使用超时机制，单位毫秒。  <br/>
            若 小于等于 0 - 不使用超时机制。
            </summary>
        </member>
        <member name="T:StarkMini.LoadingManager.LoadCompleteHandler">
            <summary>
            <code>sample handler: `void onComplete(bool isSuccess, string key);`</code>
            </summary>
            <param name="isSuccess"></param>
            <param name="key"></param>
            <returns>true - handled. false - not handled, continue with default handler.</returns>
        </member>
        <member name="M:StarkMini.LoadingManager.ShowLoadingTaskAsync(System.String,StarkMini.LoadTaskList,StarkMini.LoadingManager.LoadCompleteHandler,StarkMini.LoadingManager.LoadOptions,System.Boolean)">
            <summary>
            async show loading, returns load `isSuccess`.
            </summary>
            <exception cref="T:System.Exception">Thrown when exception in await `task`, or timeout if given `options.millisecondsTimeout`</exception>
            <param name="key"></param>
            <param name="loadTask"></param>
            <param name="onComplete"></param>
            <param name="options"></param>
            <param name="throwsException"></param>
            <returns>isSuccess</returns>
        </member>
        <member name="T:StarkMini.ResCache">
            <summary>
            负责资源缓存，可以在内存中缓存已加载的资源，便于直接读取资源。  
            </summary>
        </member>
        <member name="F:StarkMini.ResCache.EKeyMode.Default">
            <summary>
            default, no modification to the asset key name input.<br/>
            默认，不对传入的资源名做修改。
            </summary>
        </member>
        <member name="F:StarkMini.ResCache.EKeyMode.ForceSimplify">
            <summary>
            simplify asset key name, to be: without directory, without ext.<br/>
            简化资源名，移除目录、移除类型后缀。
            </summary>
            example: <code>`dir1/dir2/name.ext`</code> => <code>`name`</code>
        </member>
        <member name="F:StarkMini.ResCache.EKeyMode.RemoveExt">
            <summary>
            remove ext for asset key name, to be: path without ext.<br/>
            资源名如果包含文件类型后缀，自动移除
            </summary>
            example: <code>`dir1/dir2/name.ext`</code> => <code>`dir1/dir2/name`</code>
        </member>
        <member name="P:StarkMini.ResCache.ReadResKeyMode">
            <summary>
            自定义资源读取时的 key 模式
            </summary>
        </member>
        <member name="P:StarkMini.ResCache.WriteResKeyMode">
            <summary>
            自定义资源保存时的 key 模式
            </summary>
        </member>
        <member name="T:StarkMini.ResCache.EKeyCaseMode">
            <summary>
            自定义 key 大小写忽略或敏感的模式，默认`IgnoreCase`，用于 `SetKeyCaseMode()`, `GetKeyCaseMode()`
            </summary>
        </member>
        <member name="F:StarkMini.ResCache.EKeyCaseMode.IgnoreCase">
            <summary>
            忽略大小写。默认。
            </summary>
        </member>
        <member name="F:StarkMini.ResCache.EKeyCaseMode.CaseSensitive">
            <summary>
            区分大小写。
            </summary>
        </member>
        <member name="M:StarkMini.ResCache.SetKeyCaseModeDefault">
            <summary>
            设置 key 大小写模式使用默认的`IgnoreCase`。<br/>
            警告：如果从 CaseSensitive 改为 IgnoreCase，可能会丢失数据！
            </summary>
        </member>
        <member name="M:StarkMini.ResCache.SetKeyCaseMode(StarkMini.ResCache.EKeyCaseMode)">
            <summary>
            自定义设置 key 大小写忽略或敏感的模式。默认使用`IgnoreCase`。<br/>
            警告：如果从 CaseSensitive 改为 IgnoreCase，可能会丢失数据！
            </summary>
            <param name="caseMode"></param>
        </member>
        <member name="P:StarkMini.ResCache.KeyCaseMode">
            <summary>
            获取 key 大小写忽略或敏感的模式。默认使用`IgnoreCase`。
            </summary>
        </member>
        <member name="P:StarkMini.ResCache.IsLogGetVerbose">
            <summary>
            设置缓存读取的 verbose log 开关。默认：关。
            </summary>
        </member>
        <member name="P:StarkMini.ResCache.IsLogSetVerbose">
            <summary>
            设置缓存保存的 verbose log 开关。默认：关。
            </summary>
        </member>
        <member name="M:StarkMini.ResCache.Get``1(System.String)">
            <summary>
            读取指定 key、指定Unity资源类型的资源。  <br/>
             - 注意：加载Sprite时，必须指定 Get&lt;Sprite&gt;(). <br/>
             - 说明：Editor工程的Sprite资源，在Player运行时、Bundle中加载得到的类型会默认是Texture2D，所以用 Get&lt;UnityEngine.Object&gt;() 得到的对象 as Sprite 会是 null.
            </summary>
            <param name="key"></param>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResCache.GetSystemObject(System.String)">
            <summary>
            读取指定 key 系统基本类型的 object。
            note: alpha use only, not verified, may change anytime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResCache.Has``1(System.String)">
            <summary>
            判断是否在Cache中。
            </summary>
            <param name="key"></param>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResCache.HasSystemObject(System.String)">
            <summary>
            note: alpha use only, not verified, may change anytime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResCache.Set``1(System.String,``0)">
            <summary>
            保存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResCache.SetSystemObject(System.String,System.Object)">
            <summary>
            note: alpha use only, not verified, may change anytime.
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResCache.ClearAll">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="P:StarkMini.ResCache.EntriesCount">
            <summary>
            缓存的资源条目的个数，注：相同key的不同类型的对象保存在同一个条目，视为1个，不累计多个。
            </summary>
        </member>
        <member name="P:StarkMini.ResCache.SystemObjectsCount">
            <summary>
            缓存的系统基本类型object的个数
            </summary>
        </member>
        <member name="T:StarkMini.ResLegacy">
            <summary>
            负责传统方式资源加载，使用Resources接口
            </summary>
        </member>
        <member name="M:StarkMini.ResLegacy.Load(System.String,System.String,System.String,System.Int32)">
            <summary>
              <para>Loads an asset stored at path in a folder called Resources.</para>
            </summary>
            <param name="path">Path to the target resource to load.</param>
            <returns>
              <para>The requested asset's Type.</para>
            </returns>
        </member>
        <member name="M:StarkMini.ResLegacy.Load(System.String,System.Type,System.String,System.String,System.Int32)">
            <summary>
              <para>Loads an asset stored at path in a Resources folder.</para>
            </summary>
            <param name="path">Path to the target resource to load. When using an empty string(i.e., ""), the function loads the entire contents of the Resources folder.</param>
            <param name="systemTypeInstance">Type filter for objects returned.</param>
            <returns>
              <para>The requested asset returned as an Object.</para>
            </returns>
        </member>
        <member name="M:StarkMini.ResLegacy.UnloadAsset(UnityEngine.Object,System.String,System.String,System.Int32)">
            <summary>
              <para>Unloads assetToUnload from memory.</para>
            </summary>
            <param name="assetToUnload"></param>
        </member>
        <member name="M:StarkMini.ResLegacy.UnloadUnusedAssets(System.String,System.String,System.Int32)">
            <summary>
              <para>Unloads assets that are not used.</para>
            </summary>
            <returns>
              <para>Object on which you can yield to wait until the operation completes.</para>
            </returns>
        </member>
        <member name="T:StarkMini.ResLoader">
            <summary>
            负责资源加载，并自动添加已加载的asset对象到缓存
            </summary>
        </member>
        <member name="P:StarkMini.ResLoader.IsLogVerbose">
            <summary>
            设置 verbose log 开关。默认：关。
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.AwaitHandleThen``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0},System.Action{``0},System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0}})">
            <summary>
            等待 handle ，然后用回调处理 成功、失败。
            </summary>
            <param name="handle"></param>
            <param name="onSuccess"></param>
            <param name="onFail"></param>
            <param name="onProgress"></param>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:StarkMini.ResLoader.LoadAssetAsync``1(System.Object,System.Action{``0},System.Boolean)">
            <summary>
            异步加载：单个 asset，必须指定资源类型. 加载成功时自动按 address 缓存到 ResCache。 <br/>
            注：加载场景应使用`LoadSceneAsync`
            </summary>
            <param name="key">资源 Address</param>
            <param name="onLoaded">callback when load success. 成功回调。</param>
            <param name="useResCache">自动使用ResCache资源缓存，默认 true</param>
            <typeparam name="TObject">加载目标资源类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadAssetAsync``1(UnityEngine.AddressableAssets.AssetReference,System.Action{``0})">
            <summary>
            异步加载：单个 AssetReference
            </summary>
            <param name="assetRef">AssetReference对象</param>
            <param name="onLoaded">callback when load success. 成功回调。</param>
            <typeparam name="TObject">加载目标资源类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadAssetsAsync``1(System.Object,System.Action{``0},System.Action,System.Boolean)">
            <summary>
            异步加载：一批 assets 列表，必须指定资源类型，通常使用 label 作为参数 `key`。 加载成功时自动解析每个 asset address, 缓存到 ResCache。
            </summary>
            <param name="key">一组资源的 label</param>
            <param name="singleLoaded">callback for each asset when it loaded. 单个资源的成功回调。</param>
            <param name="onLoaded">callback when all load success. 全部资源成功的回调。</param>
            <param name="useResCache">自动使用ResCache资源缓存，默认 true</param>
            <typeparam name="TObject">加载目标资源类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader._LoadAssetsAsyncNoCache``1(System.Object,System.Action{``0},System.Action)">
            internal, LoadAssetsAsync without using ResCache
        </member>
        <member name="M:StarkMini.ResLoader.LoadSceneAsync(System.Object,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Action{UnityEngine.ResourceManagement.ResourceProviders.SceneInstance})">
            <summary>
            异步加载Addressable的场景，加载完成时会根据参数LoadSceneMode替换当前显示场景、或添加到显示场景树。 <br/>
            注：如果要只提前下载场景bundle，而不要加载替换Scene，应使用 `activateOnLoad` 参数为 false； 或调用下载方法：`PreDownload`,`PreDownloadAsync`. <br/>
            注意：如果 `activateOnLoad` 参数设为 false，必须加载完成后相应地执行 `handle.Result.Activate()` 激活Scene，否则可能导致其他异步加载任务被阻塞。
            </summary>
            <param name="key">资源 Address</param>
            <param name="mode">场景加载模式，LoadSceneMode.Single 或 LoadSceneMode.Additive</param>
            <param name="activateOnLoad">If false, the scene will load but not activate (for background loading).  The SceneInstance returned has an Activate() method that can be called to do this</param>
            <param name="onLoaded">成功回调</param>
        </member>
        <member name="M:StarkMini.ResLoader.LoadSceneByCache(System.String,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
            使用缓存数据加载场景，同步方式执行。 <br/>
            使用条件：需要提前对场景资源完成一次 `PreDownload`、`PreDownloadAsync` 预下载、或 `DownloadAsync`下载时参数选择常驻保存，否则会失败返回false。<br/>
            参考：可以通过 `<see cref="M:StarkMini.ResLoader.IsSceneCached(System.String)"/>` 先判断。 
            </summary>
            <param name="key">资源 Address</param>
            <param name="mode">场景加载模式，LoadSceneMode.Single 或 LoadSceneMode.Additive</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:StarkMini.ResLoader.IsLoadSceneCacheEnabled">
            <summary>
            判断当前是否启用 LoadSceneByCache。通常在发布运行的版本中，都会返回`true`；<br/>
            而在Editor编辑器下、且非 AA UseExistingBuild 的话，会返回`false`。
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.IsSceneCached(System.String)">
            <summary>
            判断是否Scene已预下载 Cache。 <br/>
            返回 true 条件：需要提前对场景资源完成一次 `PreDownload`、`PreDownloadAsync` 预下载、或 `DownloadAsync`下载时参数选择常驻保存。 <br/>
            参考：如果返回 true，可以通过 `<see cref="M:StarkMini.ResLoader.LoadSceneByCache(System.String,UnityEngine.SceneManagement.LoadSceneMode)"/>` 加载。<br/>
            预下载参考：<br/>
            - <see cref="M:StarkMini.ResLoader.PreDownload(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/>,  <br/>
            - <see cref="M:StarkMini.ResLoader.PreDownloadAsync(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/>,  <br/>
            - <see cref="M:StarkMini.ResLoader.DownloadAsync(System.Object,System.Boolean,System.Action)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.PreLoadAssets``1(System.String,System.Boolean,System.Action)">
            <summary>
            预加载一批资源，对资源类型敏感，并自动解析每个 asset address, 缓存到 ResCache。  <br/>
            详细参考：<see cref="M:StarkMini.ResLoader.PreLoadAssetsAsync``1(System.String,System.Boolean,System.Action)"/> 功能相同接口、仅返回值不同  <br/>
            </summary>
            <param name="key">一批资源的 label</param>
            <param name="forceRepeat">强制允许重复预加载</param>
            <param name="onLoaded">callback when load success</param>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.PreLoadAssetsAsync``1(System.String,System.Boolean,System.Action)">
            <summary>
            预加载一批资源，对资源类型敏感，并自动解析每个 asset address, 缓存到 ResCache。  <br/>
            使用参数 `forceRepeat` 可以控制是否要强制重新加载。  <br/>
            默认`forceRepeat = false`时，多次调用不会重复加载，即：成功的预加载，会以:`"[T类型名]-[key]"`作为一个复合key被记录。  <br/>
            注：不会自动释放，handle会被常驻保存，统一释放方法：<see cref="M:StarkMini.ResLoader.ReleaseAllPreLoadDownloadHandles"/>  <br/>
            注：判断是否已经被预下载成功：<see cref="M:StarkMini.ResLoader.IsPreDownloaded(System.String)"/>  <br/>
            </summary>
            <param name="key">一批资源的 label</param>
            <param name="forceRepeat">强制允许重复预加载</param>
            <param name="onLoaded">callback when load success</param>
            <typeparam name="TObject"></typeparam>
            <returns>isSuccess</returns>
        </member>
        <member name="M:StarkMini.ResLoader.IsPreDownloaded(System.String)">
            <summary>
            判断是否已经被预下载成功。 参考对应相关接口：  <br/>
            - <see cref="M:StarkMini.ResLoader.PreDownload(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/>,  <br/>
            - <see cref="M:StarkMini.ResLoader.PreDownloadAsync(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/>,  <br/>
            - <see cref="M:StarkMini.ResLoader.PreLoadAssets``1(System.String,System.Boolean,System.Action)"/>,  <br/>
            - <see cref="M:StarkMini.ResLoader.PreLoadAssetsAsync``1(System.String,System.Boolean,System.Action)"/>  <br/>
            </summary>
            <param name="key">asset address 或 一批资源的 label</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.ClearPreDownloaded">
            <summary>
            清空是否已经被预下载成功的记录。 <br/>
            ! 注意：一般来说只用于写Tests测试时需要！
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.DownloadAsync(System.Object,System.Boolean,System.Action)">
            <summary>
            下载，触发下载 key 所在的、及其依赖的所有 bundle，不加载资源对象，也不关注资源类型。 默认 `autoReleaseHandle` = false 不自动释放、常驻保存。<br/>
            注：若参数 `autoReleaseHandle` = false，那么不自动释放，handle会被常驻保存。<br/>
            参考：若选择常驻保存，统一释放方法：<see cref="M:StarkMini.ResLoader.ReleaseAllSavedDownloadHandles"/><br/>
            参考：判断是否已经下载被保存：<see cref="M:StarkMini.ResLoader.IsDownloadHandleSaved(System.String)"/>
            </summary>
            <param name="key">asset address 或 一批资源的 label</param>
            <param name="autoReleaseHandle"></param>
            <param name="onLoaded"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.PreDownload(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})">
            <summary>
            预下载，仅触发相应bundle，不加载资源对象，也不关注资源类型。 <br/>
            详细参考：<see cref="M:StarkMini.ResLoader.PreDownloadAsync(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/> 功能相同接口、仅返回值不同  <br/>
            </summary>
            <param name="key">一批资源的 label</param>
            <param name="forceRepeat"></param>
            <param name="onLoaded">callback when load success</param>
            <param name="onProgress">callback when load progress update</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.PreDownloadAsync(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})">
            <summary>
            预下载，仅触发相应bundle，不加载资源对象，也不关注资源类型。  <br/>
            使用参数 `forceRepeat` 可以控制是否要强制重新加载。  <br/>
            默认`forceRepeat = false`时，多次调用不会重复加载，即：成功的预加载，会以:`"[Download]-[key]"`作为一个复合key被记录。  <br/>
            注：不会自动释放，handle会被常驻保存，统一释放方法：<see cref="M:StarkMini.ResLoader.ReleaseAllPreLoadDownloadHandles"/>  <br/>
            注：判断是否已经被预下载成功：<see cref="M:StarkMini.ResLoader.IsPreDownloaded(System.String)"/>  <br/>
            </summary>
            <param name="key"></param>
            <param name="forceRepeat"></param>
            <param name="onLoaded">callback when load success</param>
            <param name="onProgress">callback when load progress update</param>
            <returns>isSuccess</returns>
        </member>
        <member name="M:StarkMini.ResLoader.TryLoadAssets``1(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            加载 Assets 尝试自动重试一定次数.
            </summary>
            <param name="key">assets label (address)</param>
            <param name="retryMax">max retry count. -1: unlimited, infinity.</param>
            <param name="retryDelayMs">delay in millisecond between retries.</param>
            <param name="throwsException"></param>
            <returns>isSuccess</returns>
        </member>
        <member name="M:StarkMini.ResLoader.TryLoadScene(System.Object,UnityEngine.SceneManagement.LoadSceneMode,System.Int32,System.Int32,System.Boolean)">
            <summary>
            加载 Scene 尝试自动重试一定次数.
            </summary>
            <param name="key">assets label (address)</param>
            <param name="mode">LoadSceneMode</param>
            <param name="retryMax">max retry count. -1: unlimited, infinity.</param>
            <param name="retryDelayMs">delay in millisecond between retries.</param>
            <param name="throwsException"></param>
            <returns>isSuccess</returns>
        </member>
        <member name="M:StarkMini.ResLoader.TryLoadFuncAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Object,System.Int32,System.Int32,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            执行传入的自定义加载方法 `async Task&lt;bool&gt; LoadFunc()` ，等待其返回isSuccess，尝试自动重试一定次数.
            </summary>
            <param name="loadFunc">custom async load func, should return {bool} isSuccess</param>
            <param name="key">assets label (address)</param>
            <param name="retryMax">max retry count. -1: unlimited, infinity.</param>
            <param name="retryDelayMs">delay in millisecond between retries.</param>
            <param name="failureHandler">custom failure handler for each try load</param>
            <param name="throwsException">does throw exception if the loadFunc throwed exception</param>
            <returns>isSuccess</returns>
        </member>
        <member name="M:StarkMini.ResLoader.InstantiateAsync(System.Object,UnityEngine.Transform,System.Action{UnityEngine.GameObject})">
            <summary>
            异步加载并实例化单个 asset. 
            </summary>
            <param name="key">资源 Address</param>
            <param name="parent">Parent transform for instantiated object. 实例化到指定 parent Transform</param>
            <param name="onSuccess">callback when load success. 成功回调。</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.InstantiateAsync(UnityEngine.AddressableAssets.AssetReference,UnityEngine.Transform,System.Action{UnityEngine.GameObject})">
            <summary>
            异步加载并实例化单个 AssetReference. 
            </summary>
            <param name="assetRef">AssetReference对象</param>
            <param name="parent">Parent transform for instantiated object. 实例化到指定 parent Transform</param>
            <param name="onSuccess">callback when load success. 成功回调。</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadResource``1(System.Object)">
            <summary>
            同步读取asset
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="key">The key of the location of the asset.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadResources``1(System.Object)">
            <summary>
            同步读取复数个assets，通常使用 label 作为参数 `key`。
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="key">The key of the location of the asset.</param>
            <returns>Returns the list of objects .</returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadResources``1(System.Collections.Generic.IList{System.Object})">
            <summary>
            同步读取复数个assets
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="keys">List of keys for the locations.</param>
            <returns>Returns the list of objects .</returns>
        </member>
        <member name="M:StarkMini.ResLoader.GetDownloadSizeSync(System.Object)">
            <summary>
            同步接口：确认所需下载的大小，包括其依赖。 注：已全部下载有缓存文件时大小是 0.<br/>
            Determines the required download size, dependencies included, for the specified <paramref name="key"/>.
            Cached assets require no download and thus their download size will be 0.  The Result of the operation
            is the download size in bytes.
            </summary>
            <returns>download size.</returns>
            <param name="key">The key of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:StarkMini.ResLoader.CreateEditorResList">
            <summary>
            用于Editor编辑器环境的运行时：根据运行后所有已读取过的key，生成列表文件`ResList`。<br/>
            生成文件路径：`Assets/Res/ResList[Index].asset`, 其中 Index 从1开始<br/>
            可配合`PrepareResource`接口加载所有准备资源。
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.PrepareResListAsync(System.String)">
            <summary>
            准备好列表文件中reslist中的所有的key的内容，返回Handle结构体的List，可遍历这个List中每个Handle等待其完成。<br/>
            参数：reslistKey 应使用列表文件`ResList[Index].asset`设置为 AA 后的 address。
            </summary>
            <param name="resListKey">列表文件`ResList`的 AA address.</param>
        </member>
        <member name="M:StarkMini.ResLoader.PrepareResList(System.String)">
            <summary>
            准备好列表文件中reslist中的所有的key的内容，task版本。<br/>
            参数：reslistKey 应使用列表文件`ResList[Index].asset`设置为 AA 后的 address。
            </summary>
            <param name="resListKey">列表文件`ResList`的 AA address.</param>
        </member>
        <member name="M:StarkMini.ResLoader.SetSyncLoadErrorAction(System.Action)">
            <summary>
            注册同步加载功能读取 Error 时的 Action.
            </summary>
            <param name="action">读取失败时候调用的 Action</param>
        </member>
        <member name="M:StarkMini.ResLoader.LoadUISpriteAsync(UnityEngine.UI.Image,System.Object)">
            <summary>
            异步加载 UI Sprite，并设置到目标 UI Image
            </summary>
            <param name="image">目标 UI Image</param>
            <param name="key">资源的 Address</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadAudioClipAsync(UnityEngine.AudioSource,System.Object,System.Boolean,System.Boolean)">
            <summary>
            异步加载 AudioClip，并设置到目标 AudioSource
            </summary>
            <param name="audioSource">目标 AudioSource</param>
            <param name="key">资源的 Address</param>
            <param name="playOnLoaded">是否加载完成时Play()播放，默认false</param>
            <param name="autoReadResCache">是否自动尝试读取ResCache</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.ReleaseAsset``1(``0)">
            <summary>
            释放指定 asset (TObject)
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.ReleaseHandle(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            释放指定 handle (AsyncOperationHandle)
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.ReleaseHandle(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}})">
            <summary>
            释放指定 handle (AsyncOperationHandle&lt;T&gt;)
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.ReleaseHandle``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            释放指定 handle (AsyncOperationHandle&lt;T&gt;)
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.ReleaseAllPreLoadDownloadHandles">
            <summary>
            释放所有 PreLoad, PreDownload 的 handles. <br/>
            参考：相关接口包括： <br/>
            <see cref="M:StarkMini.ResLoader.PreLoadAssetsAsync``1(System.String,System.Boolean,System.Action)"/>, <br/>
            <see cref="M:StarkMini.ResLoader.PreDownload(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/>, <br/>
            <see cref="M:StarkMini.ResLoader.PreDownloadAsync(System.Object,System.Boolean,System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})"/>. <br/>
            注意：不涉及接口： <see cref="M:StarkMini.ResLoader.DownloadAsync(System.Object,System.Boolean,System.Action)"/>
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.IsDownloadHandleSaved(System.String)">
            <summary>
            判断是否已经下载被保存，即：`DownloadAsync`参数选择常驻保存、并下载成功。 参考对应相关接口：  <br/>
            - <see cref="M:StarkMini.ResLoader.DownloadAsync(System.Object,System.Boolean,System.Action)"/>,  <br/>
            - <see cref="M:StarkMini.ResLoader.ReleaseAllSavedDownloadHandles"/>,  <br/>
            </summary>
            <param name="key">asset address 或 一批资源的 label</param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.ReleaseAllSavedDownloadHandles">
            <summary>
            释放所有常驻保存的 DownloadAsync 的 handles.
            参考：相关接口： <see cref="M:StarkMini.ResLoader.DownloadAsync(System.Object,System.Boolean,System.Action)"/>
            </summary>
        </member>
        <member name="M:StarkMini.ResLoader.IsAssetExistAsync(System.Object,System.Type,System.Action{System.Boolean})">
            <summary>
            检查Asset是否存在，即Asset名称存在于Assets Group、Addressable Catalog中。
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="omComplete"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.LoadLocationsAsync(System.Object,System.Type,System.Action{System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}})">
            <summary>
            检查 Asset Locations
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="onComplete"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.GetRuntimeAAPlayMode">
            <summary>
            获取 AA PlayMode 类型。 注意：非Editor的Application运行时，总是会返回`UseExistingBuild`.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoader.GetEditorAAPlayMode">
            <summary>
            获取 Editor AA PlayMode 类型。 注意：仅限Editor调用.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysis.GetAliveResourcesCount">
            <summary>
            get Alive Resources Count (i.e., not released) from ResourceManagerDiagnostics
            </summary>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysis.DumpAliveResourcesInfo(System.Boolean)">
            <summary>
            dump Alive Resources info (i.e., not released) from ResourceManagerDiagnostics
            </summary>
        </member>
        <member name="F:StarkMini.ResLoaderAnalysisEntry.key">
            <summary>
            asset key. e.g., address, label
            </summary>
        </member>
        <member name="F:StarkMini.ResLoaderAnalysisEntry.type">
            <summary>
            asset type
            </summary>
        </member>
        <member name="F:StarkMini.ResLoaderAnalysisEntry.fulltype">
            <summary>
            asset type fullname
            </summary>
        </member>
        <member name="F:StarkMini.ResLoaderAnalysisEntry.depth">
            <summary>
            dependency depth
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntry.DisplayName">
            <summary>
            readable key name for display
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntry.LocationHash">
            <summary>
            location hash
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntry.Locations">
            <summary>
            asset resource locations
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntry.AssetPaths">
            <summary>
            asset paths
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntry.FullAssetPaths">
            <summary>
            asset paths
            </summary>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.GetAAGroups">
            <summary>
            AA Groups
            </summary>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.GetReadableAAGroups">
            <summary>
            readable string
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.GetResListInfos">
            <summary>
            ResListInfos (for ResList)
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.GetResListInfosForPath(System.String)">
            <summary>
            ResListInfos (for ResList)
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.GetResLists">
            <summary>
            ResLists (string) Paths
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.GetReadableResLists">
            <summary>
            readable string
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntry.ClearAssetsInfoCache">
            <summary>
            Clear assets info cache
            </summary>
        </member>
        <member name="T:StarkMini.ResLoaderAnalysisEntryLocation">
            <summary>
            Basic implementation of IResourceLocation
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.InternalId">
            <summary>
            Internal id.
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.ProviderId">
            <summary>
            Provider Id.  This is usually set to the FullName property of the type of the provider class.
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.Dependencies">
            <summary>
            List of dependencies that must be loaded before this location.  This value may be null.
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.HasDependencies">
            <summary>
            Convenience method to see if there are any dependencies.
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.Data">
            <summary>
            Data that is intended for the provider.  Objects can be serialized during the build process to be used by the provider.  An example of usage is cache usage data for AssetBundleProvider.
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.PrimaryKey">
            <inheritdoc/>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.DependencyHashCode">
            <summary>
            Precomputed hash code of dependencies.
            </summary>
        </member>
        <member name="P:StarkMini.ResLoaderAnalysisEntryLocation.ResourceType">
            <summary>
            The type of the resource for th location.
            </summary>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntryLocation.Hash(System.Type)">
            <summary>
            Compute the hash of this location for the specified type.
            </summary>
            <param name="t">The type to hash with.</param>
            <returns>The combined hash code of the location and type.</returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntryLocation.ToString">
            <summary>
            Returns the Internal name used by the provider to load this location
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntryLocation.#ctor(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Construct a new ResourceLocationBase.
            </summary>
        </member>
        <member name="M:StarkMini.ResLoaderAnalysisEntryLocation.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a new ResourceLocationBase.
            </summary>
        </member>
        <member name="T:StarkMini.StarkMiniGlobal">
            <summary>
            StarkMini 全局静态类，提供Version等基本信息
            </summary>
        </member>
        <member name="P:StarkMini.StarkMiniGlobal.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:StarkMini.DebugUtil.GetCallInfo(System.Exception)">
            <summary>
            get call info from exception, returns e.g.: "at Tests.Foo () [0x00123] in /Xxx/Scripts/Tests.cs:1234 "
            </summary>
        </member>
        <member name="M:StarkMini.DebugUtil.GetCallInfoFromTrace(System.String)">
            <summary>
            get call info from exception, returns e.g.: "at Tests.Foo () [0x00123] in /Xxx/Scripts/Tests.cs:1234 "
            </summary>
        </member>
        <member name="M:StarkMini.ResUtil.ToSimpleKey(System.String)">
            <summary>
            simplify the path string: remove any sub string before (and including) the last `/`,  
            remove any sub string after (and including) the last "."
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResUtil.ReplaceTransform(UnityEngine.Transform,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            将一个老的对象，替换成新的对象，并保持相对层级、位置、旋转属性。老对象会被Destory。  
            also @see: https://docs.unity3d.com/ScriptReference/Transform.SetParent.html
            </summary>
            <param name="oldTrans"></param>
            <param name="newTrans"></param>
            <param name="newWorldPosRotStays"></param>
            <param name="copyOldPosRot"></param>
        </member>
        <member name="M:StarkMini.ResUtil.ValidateCacheResVersion(System.String,System.Boolean,System.Boolean)">
            <summary>
            检查已记录的缓存资源版本号，不匹配时清理Cache，并保存记录当前新版本号。
            </summary>
            <param name="resVersion"></param>
            <param name="doClearCache"></param>
            <param name="saveVersionPrefNow"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResUtil.LogCacheInfo(System.String,System.Int64)">
            <summary>
            Log输出 cache 使用信息。 参数`ignoreThreshSizeMB` = 0 时，总是报告； > 0 时，只有使用情况累积变化量超过此MB数量，才输出。
            </summary>
            <param name="infoText"></param>
            <param name="ignoreThreshSizeMB"></param>
        </member>
        <member name="M:StarkMini.ResUtil.UnloadAllAssetBundles(System.Boolean)">
            <summary>
              <para>Unloads all currently loaded Asset Bundles.</para>
            </summary>
            <param name="unloadAllObjects">Determines whether the current instances of objects loaded from Asset Bundles will also be unloaded.</param>
        </member>
        <member name="M:StarkMini.ResUtil.ConvertToSprite(UnityEngine.Object)">
            <summary>
            转换到 Sprite，通常传入 Texture2D 的对象、或本来就是 Sprite 的对象，如果失败返回 null.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResUtil.ConvertToTexture2D(UnityEngine.Object)">
            <summary>
            转换到 Texture2D，通常传入 Sprite 的对象、或本来就是 Texture2D 的对象，如果失败返回 null.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.ResUtil.ConvertResType``1(UnityEngine.Object)">
            <summary>
            helper to convert
            </summary>
        </member>
        <member name="T:StarkMini.SimpleTimer">
            <summary>
            一个计时器，方便用于监测逻辑起止时间、间隔时间、帧数。
            目前只支持正向计时（从0开始增长）。 
            目前不支持：倒计时CountDown，定时间断触发Interval。
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.StartCheck(System.String,System.Boolean,System.Boolean)">
            <summary>
            检查计时开始，并设置一个name
            </summary>
            <param name="name"></param>
            <param name="logAtTime"></param>
            <param name="showLapNum"></param>
        </member>
        <member name="M:StarkMini.SimpleTimer.StartCheck(StarkMini.SimpleTimer,System.Boolean,System.Boolean)">
            <summary>
            检查计时开始
            </summary>
            <param name="timer"></param>
            <param name="logAtTime"></param>
            <param name="showLapNum"></param>
        </member>
        <member name="M:StarkMini.SimpleTimer.FinishCheck(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检查计时结束，如果指定name有在计时中，计算并log它的消耗时间、帧数。
            </summary>
            <param name="name"></param>
            <param name="logCost"></param>
            <param name="logAtTime"></param>
            <param name="showLapNum"></param>
        </member>
        <member name="M:StarkMini.SimpleTimer.FinishCheck(StarkMini.SimpleTimer,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            检查计时结束，如果指定timer有在计时中，计算并log它的消耗时间、帧数。
            </summary>
            <param name="timer"></param>
            <param name="logCost"></param>
            <param name="logAtTime"></param>
            <param name="showLapNum"></param>
        </member>
        <member name="P:StarkMini.SimpleTimer.IsEnabled">
            <summary>
            是否已启用。 如果已禁用，<see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.Finish"/> 等等各个相关操作无效。
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.SetEnable(System.Boolean)">
            <summary>
            启用或禁用。 如果禁用，<see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.Finish"/> 等等各个相关操作无效。<br/>
            如果运行中禁用，会使计时 Reset。
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.IsEnableLog">
            <summary>
            启用log。  开启为`true`后，在 <see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.Finish"/> 时，自动输出log。 <br/>
            参考：可以设置为：`Debug.isDebugBuild`使 Editor 和 Develop 版本有效。
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.Start">
            <summary>
            开始计时。 <br/>
            注：如果在已开始状态，没有效果。 即：只有在<see cref="P:StarkMini.SimpleTimer.IsStarted"/>状态为`false`时有效。<br/>
            状态判断参考: <see cref="P:StarkMini.SimpleTimer.IsStarted"/>
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.StartLap">
            <summary>
            开始新一圈Lap的计时。 <br/>
            注：如果不在已开始状态，开始计时，等同于: <see cref="M:StarkMini.SimpleTimer.Start"/>。 <br/>
            注：如果在已开始状态，视为开始新一圈Lap的计时、且完成前一圈Lap，
            区别于 <see cref="M:StarkMini.SimpleTimer.Start"/>, 会保持 <see cref="P:StarkMini.SimpleTimer.StartTime"/>, <see cref="P:StarkMini.SimpleTimer.StartFrame"/> 不变，
            同时递增 <see cref="P:StarkMini.SimpleTimer.LapNum"/>, <see cref="P:StarkMini.SimpleTimer.FinishLapNum"/>, 和更新 <see cref="P:StarkMini.SimpleTimer.CurrentLapStartTime"/>, <see cref="P:StarkMini.SimpleTimer.CurrentLapStartFrame"/> 等数值。
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.Finish">
            <summary>
            完成计时。 <br/>
            注：如果不在已开始状态，没有效果。 即：只有在<see cref="P:StarkMini.SimpleTimer.IsStarted"/>状态为`true`时有效。<br/>
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.UpdateElapsed">
            <summary>
            更新计时，返回已经过时长<br/>
            如果已禁用，返回`0f`
            </summary>
        </member>
        <member name="M:StarkMini.SimpleTimer.LogElapsed(System.String,System.Boolean,System.Boolean)">
            <summary>
            log输出当前计时。 如果计时器已禁用，则无效。
            </summary>
            <param name="msgText">设置log中填入的msg文本。 默认文本：`LogElapsed`</param>
            <param name="doUpdateElapsed">是否更新计时。 <br/>默认`false`: 不更新，保持最后一次更新的计时数值状态。 `true`: 更新计时，参考<see cref="M:StarkMini.SimpleTimer.UpdateElapsed"/>。</param>
            <param name="logDeltaTime">是否log输出与上一次更新计时相距的delta间隔时间</param>
        </member>
        <member name="M:StarkMini.SimpleTimer.Reset">
            <summary>
            重置状态，清零所有计时数值。
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.IsStarted">
            <summary>
            是否已开始状态。<br/>
            相关参考: <see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.StartLap"/>, <see cref="M:StarkMini.SimpleTimer.Finish"/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.StartTime">
            <summary>
            开始计时的时刻。<br/>
            注: 0s 时刻开始于 Runtime `AfterAssembliesLoaded`<br/>
            相关参考: <see cref="M:StarkMini.SimpleTimer.Start"/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.StartFrame">
            <summary>
            开始计时的帧。<br/>
            注: 帧值取自<see cref="P:UnityEngine.Time.frameCount"/><br/>
            相关参考: <see cref="M:StarkMini.SimpleTimer.Start"/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.UpdatedTime">
            <summary>
            更新的时刻，在每个计时操作的方法、更新计时的方法时更新数值。<br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.UpdatedFrame">
            <summary>
            更新的帧，在每个计时操作的方法、更新计时的方法时更新数值。<br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.EndTime">
            <summary>
            结束的时刻。<br/>
            相关参考: <see cref="M:StarkMini.SimpleTimer.Finish"/><br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.EndFrame">
            <summary>
            结束的帧。<br/>
            相关参考: <see cref="M:StarkMini.SimpleTimer.Finish"/><br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.ElapsedTime">
            <summary>
            已经过的时间（时长）。 即：从开始计时、到最后一次更新计时的时间间隔。<br/>
            等值于 <see cref="P:StarkMini.SimpleTimer.UpdatedTime"/> - <see cref="P:StarkMini.SimpleTimer.StartTime"/> <br/>
            注：数值在调用计时操作方法时更新：<br/>
            - 开始和结束计时: <see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.StartLap"/>, <see cref="M:StarkMini.SimpleTimer.Finish"/> <br/>
            - 更新计时: <see cref="M:StarkMini.SimpleTimer.UpdateElapsed"/><br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.ElapsedFrame">
            <summary>
            已经过的帧。 即：从开始计时、到最后一次更新计时的帧间隔。<br/>
            注：数值在调用计时操作方法时更新：<br/>
            - 开始和结束计时: <see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.StartLap"/>, <see cref="M:StarkMini.SimpleTimer.Finish"/> <br/>
            - 更新计时: <see cref="M:StarkMini.SimpleTimer.UpdateElapsed"/><br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.LapNum">
            <summary>
            当前圈数、Lap数 <br/>
            在相关方法中递增: <see cref="M:StarkMini.SimpleTimer.Start"/>, <see cref="M:StarkMini.SimpleTimer.StartLap"/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.FinishLapNum">
            <summary>
            已完成的圈数、Lap数<br/>
            在结束计时调用 <see cref="M:StarkMini.SimpleTimer.Finish"/> 时，变更为与<see cref="P:StarkMini.SimpleTimer.LapNum"/>相等；<br/>
            也会在每当开始新一圈Lap调用 <see cref="M:StarkMini.SimpleTimer.StartLap"/> 时递增:
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.CurrentLapStartTime">
            <summary>
            当前最新一圈Lap开始时的时刻。<br/>
            相关参考:  <see cref="M:StarkMini.SimpleTimer.StartLap"/>
            如果只用了 <see cref="M:StarkMini.SimpleTimer.Start"/> 来开始计时，那么与 <see cref="P:StarkMini.SimpleTimer.StartTime"/> 相等 <br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.CurrentLapStartFrame">
            <summary>
            当前最新一圈Lap开始时的帧。<br/>
            相关参考:  <see cref="M:StarkMini.SimpleTimer.StartLap"/>
            如果只用了 <see cref="M:StarkMini.SimpleTimer.Start"/> 来开始计时，那么与 <see cref="P:StarkMini.SimpleTimer.StartFrame"/> 相等 <br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.CurrentLapElapsedTime">
            <summary>
            当前最新一圈Lap已经过的时间（时长）。<br/>
            等值于 <see cref="P:StarkMini.SimpleTimer.UpdatedTime"/> - <see cref="P:StarkMini.SimpleTimer.CurrentLapStartTime"/> <br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.CurrentLapElapsedFrame">
            <summary>
            当前最新一圈Lap已经过的帧。 <br/>
            等值于 <see cref="P:StarkMini.SimpleTimer.UpdatedFrame"/> - <see cref="P:StarkMini.SimpleTimer.CurrentLapStartFrame"/> <br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.NowTime">
            <summary>
            现在时刻<br/>
            注: 0s 时刻开始于 Runtime `AfterAssembliesLoaded`<br/>
            </summary>
        </member>
        <member name="P:StarkMini.SimpleTimer.NowFrame">
            <summary>
            现在帧<br/>
            注: 帧值取自<see cref="P:UnityEngine.Time.frameCount"/><br/>
            </summary>
        </member>
        <member name="P:StarkMini.SingletonMonoBehaviour`1.Instance">
            <summary>
            访问 Instance 单例。 如果没有该 Instance 或者已经被释放，返回null。
            </summary>
        </member>
        <member name="M:StarkMini.SingletonMonoBehaviour`1.GetOrCreateInstance(System.String)">
            <summary>
            实例化单例对象，如果没有 Instance 的 GameObject，那么自动创建GameObject，并设置name。 如果已经有 Instance，那么直接返回。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.SingletonMonoBehaviour`1.CheckDuplicated">
            <summary>
            检查是否已重复存在，如果是，那么 Destroy 自身。
            </summary>
            <returns></returns>
        </member>
        <member name="M:StarkMini.TaskUtil.TaskThen``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            等待 `task` and 然后调用 `onFinish`.
            </summary>
            <param name="task"></param>
            <param name="onFinish"></param>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:StarkMini.TaskUtil.AwaitHandleThen``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0},System.Action{``0},System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0}})">
            <summary>
            等待 handle ，然后用回调处理 成功、失败。
            </summary>
            <param name="handle"></param>
            <param name="onSuccess"></param>
            <param name="onFail"></param>
            <param name="onProgress"></param>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:StarkMini.TaskUtil.HandleThen``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0},System.Action{``0},System.Action,System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0}})">
            <summary>
            等待 handle ，然后用回调处理 成功、失败。
            </summary>
            <param name="handle"></param>
            <param name="onSuccess"></param>
            <param name="onFail"></param>
            <param name="onProgress"></param>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:StarkMini.TaskUtil.AsyncOperationThen(UnityEngine.AsyncOperation,System.Action,System.Action{UnityEngine.AsyncOperation})">
            <summary>
            等待 AsyncOperation ，然后用回调处理。
            </summary>
            <param name="asyncOp"></param>
            <param name="onComplete"></param>
            <param name="onProgress"></param>
        </member>
        <member name="M:StarkMini.TaskUtil.TaskFromHandle``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            Wrap a `AsyncOperationHandle` into async `Task` , and return (bool) isSuccess. <br/>
              
            将 `AsyncOperationHandle` 封装成 async `Task` 对象，并返回 (bool) isSuccess 是否加载成功。  
            </summary>
            <param name="handle"></param>
            <typeparam name="TObject"></typeparam>
            <returns>(bool) isSuccess 是否加载成功</returns>
        </member>
        <member name="M:StarkMini.TaskUtil.CoroutineFromHandle(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Wrap a `AsyncOperationHandle` into coroutine, and finally return (bool) isSuccess. <br/>
              
            将 AsyncOperationHandle coroutine，最后返回值 (boo) isSuccess 是否加载成功。
            </summary>
        </member>
        <member name="M:StarkMini.TaskUtil.TaskFromCoroutine(System.Func{System.Collections.IEnumerator})">
            <summary>
            将 coroutine 转为 Task，并将 coroutine 的最后返回值 作为 task 的 Result 返回值。
            </summary>
            <param name="routineFunc"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.TaskUtil.CoroutineFromTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Task 转为 coroutine，并将 task 的 Result 返回值，作为 coroutine 的最后返回值
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.TaskUtil.TaskFromOp(UnityEngine.AsyncOperation)">
            <summary>
            将 AsyncOperation 转为 Task
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:StarkMini.TaskUtil.Delay(System.Int32)">
            <summary>
            兼容WebGL的Task.Delay
            </summary>
            <param name="millisecondsDelay">延迟时间，单位为ms</param>
        </member>
        <member name="P:StarkMini.TaskUtilMonoBehaviour.CoroutineTask.IsDone">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:StarkMini.TaskUtilMonoBehaviour.CoroutineTask.Current">
            <summary><para>enumerator.Current 当前结果</para></summary>
        </member>
        <member name="M:StarkMini.TaskUtilMonoBehaviour.CoroutineTask.StartCoroutine">
            <summary>
            开始 Coroutine
            </summary>
        </member>
        <member name="T:DownloadCountData">
            <summary>
            存放下载与miss相关信息
            </summary>
        </member>
        <member name="T:CustomErrorData">
            starkVersion添加至custom_Header中/8.25
            <summary>
            存放自定义错误Tag信息
            </summary>
        </member>
        <member name="T:DownloadAllCompleteData">
            <summary>
            存放下载完成时的相关信息
            </summary>
        </member>
        <member name="T:ActiveData">
            <summary>
            存放用户打开应用时的基本信息
            </summary>
        </member>
        <member name="T:MissData">
            <summary>
            存放用户miss相关的汇总信息
            </summary>
        </member>
        <member name="T:DownloadCountManager.Download_Form">
            <summary>
            下载类型（前后台）
            </summary>
        </member>
        <member name="T:DownloadCountManager.Network_state">
            <summary>
            网络类型
            </summary>
        </member>
        <member name="T:DownloadCountManager.ErrorType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="T:DownloadCountManager.ResultType">
            <summary>
            下载结果
            </summary>
        </member>
        <member name="T:DownloadCountManager.Download_Network_Type">
            <summary>
            网络类型
            </summary>
        </member>
        <member name="T:DownloadCountManager.DownloadAllStatus">
            <summary>
            下载状态
            </summary>
        </member>
        <member name="T:DownloadCountManager.SendFailedData">
            <summary>
            发送失败入栈后重新发送的信息
            </summary>
        </member>
        <member name="P:DownloadCountManager.PrefsDownloadTime">
            <summary>
            下载时间（秒）
            </summary>
        </member>
        <member name="P:DownloadCountManager.PrefsPlayTime">
            <summary>
            进入游戏起的游玩时间
            </summary>
        </member>
        <member name="P:DownloadCountManager.PrefsMissCount">
            <summary>
            总missCount
            </summary>
        </member>
        <member name="P:DownloadCountManager.PrefsUsedTotalCount">
            <summary>
            总使用资源数
            </summary>
        </member>
        <member name="P:DownloadCountManager.PrefsIsNewPlayer">
            <summary>
            是否为新玩家
            </summary>
        </member>
        <member name="M:DownloadCountManager.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="M:DownloadCountManager.Initialize(System.String,System.String,System.String,System.Single,DownloadCountManager.Network_state)">
            <summary>
            设定一些初始的参数
            </summary>
        </member>
        <member name="M:DownloadCountManager.IncDownloadData(DownloadCountManager.Download_Form,DownloadCountManager.ResultType,DownloadCountManager.ErrorType,System.UInt64,System.Single)">
            <summary>
            录入一条具体的下载信息
            </summary>
        </member>
        <member name="M:DownloadCountManager.IncNewUseData(System.Boolean,System.String)">
            <summary>
            录入新使用到的数据，上报资源miss情况。<br/>
            note: 应当只在前台请求、且是新使用到的资源时上报。<br/>
            note: 前台下载请求，且是新使用到的资源，但本地未缓存好，即Miss.<br/>
            </summary>
        </member>
        <member name="M:DownloadCountManager.IncAssetKeyAndErrorString(System.String,System.String)">
            <summary>
            录入自定义错误Tag
            </summary>
        </member>
        <member name="M:DownloadCountManager.ChangeNetType(DownloadCountManager.Network_state)">
            <summary>
            更改网络类型
            </summary>
        </member>
        <member name="M:DownloadCountManager.DownloadAllStart">
            <summary>
            下载开始
            </summary>
        </member>
        <member name="M:DownloadCountManager.DownloadAllComplete(System.Int32,System.Int32,System.Int32)">
            <summary>
            下载结束，停止上传
            </summary>
        </member>
        <member name="M:DownloadCountManager.ResetDownloadAllTime">
            <summary>
            重置下载时间
            </summary>
        </member>
        <member name="M:DownloadCountManager.SetIsOldPlayer">
            <summary>
            设置玩家状态为老玩家
            </summary>
        </member>
        <member name="T:StarkSdkInfo.StarkSDKBaseInfo">
            <summary>
            提供抖音头条SC环境、摸摸鱼环境的基础信息，包括判断是否在SC环境、获取游戏的AppId, Version 版本号等等.
            </summary>
        </member>
        <member name="P:StarkSdkInfo.StarkSDKBaseInfo.IsInStarkContainer">
            <summary>
            是否在SC环境 (StarkContainer环境，抖音头条、摸摸鱼等宿主环境中运行)
            </summary>
        </member>
        <member name="P:StarkSdkInfo.StarkSDKBaseInfo.AppId">
            <summary>
            游戏的AppId，对应SC平台游戏Id
            </summary>
        </member>
        <member name="P:StarkSdkInfo.StarkSDKBaseInfo.PackageName">
            <summary>
            游戏包名，即被拉起的游戏Apk的包名，对应其manifest中的信息
            </summary>
        </member>
        <member name="P:StarkSdkInfo.StarkSDKBaseInfo.GamePackageVersion">
            <summary>
            游戏包的版本号，即被拉起的游戏Apk的版本号，对应其manifest中的信息
            </summary>
        </member>
        <member name="P:StarkSdkInfo.StarkSDKBaseInfo.GamePublishVersion">
            <summary>
            游戏的发布版本号，对应发布在SC平台的游戏版本号
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject">
            <summary>
            Class used to get and set the default Addressable Asset settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.kDefaultConfigAssetName">
            <summary>
            Default name for the addressable assets settings
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.kDefaultConfigFolder">
            <summary>
            The default folder for the serialized version of this class.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.kDefaultConfigObjectName">
            <summary>
            The name of the default config object
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.DefaultAssetPath">
            <summary>
            Default path for addressable asset settings assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.SettingsExists">
            <summary>
            Used to determine if a default settings asset exists.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.Settings">
            <summary>
            Gets the default addressable asset settings object.  This will return null during editor startup if EditorApplication.isUpdating or EditorApplication.isCompiling are true.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.AddressableAssetSettingsDefaultObject.GetSettings(System.Boolean)">
            <summary>
            Gets the settings object with the option to create a new one if it does not exist.
            </summary>
            <param name="create">If true and no settings object exists, a new one will be created using the default config folder and asset name.</param>
            <returns>The default settings object.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetBuildSettings">
            <summary>
            Build settings for addressables.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetBuildSettings.compileScriptsInVirtualMode">
            <summary>
            Controls whether to compile scripts when running in virtual mode.  When disabled, build times are faster but the simulated bundle contents may not be accurate due to including editor code.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetBuildSettings.cleanupStreamingAssetsAfterBuilds">
            <summary>
            Controls whether to remove temporary files after each build.  When disabled, build times in packed mode are faster, but may not reflect all changes in assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetBuildSettings.LogResourceManagerExceptions">
            <summary>
            When enabled, the Addressables.ResourceManager.ExceptionHandler is set to (op, ex) => Debug.LogException(ex);
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetBuildSettings.bundleBuildPath">
            <summary>
            //Specifies where to build asset bundles, this is usually a temporary folder (or a folder in the project).  Bundles are copied out of this location to their final destination.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry">
            <summary>
            Contains data for an addressable asset entry.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.parentGroup">
            <summary>
            The asset group that this entry belongs to.  An entry can only belong to a single group at a time.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.BundleFileId">
            <summary>
            The id for the bundle file.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.guid">
            <summary>
            The asset guid.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.address">
            <summary>
            The address of the entry.  This is treated as the primary key in the ResourceManager system.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.SetAddress(System.String,System.Boolean)">
            <summary>
            Set the address of the entry.
            </summary>
            <param name="addr">The address.</param>
            <param name="postEvent">Post modification event.</param>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.ReadOnly">
            <summary>
            Read only state of the entry.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.IsInResources">
            <summary>
            Is the asset in a resource folder.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.IsInSceneList">
            <summary>
            Is scene in scene list.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.IsSubAsset">
            <summary>
            Is a sub asset.  For example an asset in an addressable folder.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.ParentEntry">
            <summary>
            Stores a reference to the parent entry. Only used if the asset is a sub asset.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.IsScene">
            <summary>
            Is this entry for a scene.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.labels">
            <summary>
            The set of labels for this entry.  There is no inherent limit to the number of labels.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.SetLabel(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set or unset a label on this entry.
            </summary>
            <param name="label">The label name.</param>
            <param name="enable">Setting to true will add the label, false will remove it.</param>
            <param name="force">When enable is true, setting force to true will force the label to exist on the parent AddressableAssetSettings object if it does not already.</param>
            <param name="postEvent">Post modification event.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.CreateKeyList">
            <summary>
            Creates a list of keys that can be used to load this entry.
            </summary>
            <returns>The list of keys.  This will contain the address, the guid as a Hash128 if valid, all assigned labels, and the scene index if applicable.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.AssetPath">
            <summary>
            The path of the asset.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.MainAsset">
            <summary>
            The main asset object for this entry.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.TargetAsset">
            <summary>
            The asset object for this entry.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.GetAssetLoadPath(System.Boolean)">
            <summary>
            The asset load path.  This is used to determine the internal id of resource locations.
            </summary>
            <param name="isBundled">True if the asset will be contained in an asset bundle.</param>
            <returns>Return the runtime path that should be used to load this entry.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.GatherAllAssets(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},System.Boolean,System.Boolean,System.Boolean,System.Func{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry,System.Boolean})">
            <summary>
            Gathers all asset entries.  Each explicit entry may contain multiple sub entries. For example, addressable folders create entries for each asset contained within.
            </summary>
            <param name="assets">The generated list of entries.  For simple entries, this will contain just the entry itself if specified.</param>
            <param name="includeSelf">Determines if the entry should be contained in the result list or just sub entries.</param>
            <param name="recurseAll">Determines if full recursion should be done when gathering entries.</param>
            <param name="includeSubObjects">Determines if sub objects such as sprites should be included.</param>
            <param name="entryFilter">Optional predicate to run against each entry, only returning those that pass.  A null filter will return all entries</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.OnBeforeSerialize">
            <summary>
            Implementation of ISerializationCallbackReceiver.  Converts data to serializable form before serialization.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.OnAfterDeserialize">
            <summary>
            Implementation of ISerializationCallbackReceiver.  Converts data from serializable form after deserialization.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.ToString">
            <summary>
            Returns the address of the AddressableAssetEntry.
            </summary>
            <returns>The address of the AddressableAssetEntry</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetEntry.CreateCatalogEntries(System.Collections.Generic.List{UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry},System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Create all entries for this addressable asset.  This will expand subassets (Sprites, Meshes, etc) and also different representations.
            </summary>
            <param name="entries">The list of entries to fill in.</param>
            <param name="isBundled">Whether the entry is bundles or not.  This will affect the load path.</param>
            <param name="providerType">The provider type for the main entry.</param>
            <param name="dependencies">Keys of dependencies</param>
            <param name="extraData">Extra data to append to catalog entries.</param>
            <param name="providerTypes">Any unknown provider types are added to this set in order to ensure they are not stripped.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetEntryCollection">
            <summary>
            Contains a list of AddressableAssetEntries that can be included in the settings.  The purpose of this class is to provide a way of combining entries from external sources such as packages into your project settings.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetEntryCollection.Entries">
            <summary>
            The collection of entries.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup">
            <summary>
            Contains the collection of asset entries associated with this group.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.Name">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.Guid">
            <summary>
            The group GUID.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.Schemas">
            <summary>
            List of schemas for this group.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.SchemaTypes">
            <summary>
            Get the types of added schema for this group.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.AddSchema(UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema,System.Boolean)">
            <summary>
            Adds a copy of the provided schema object.
            </summary>
            <param name="schema">The schema to add. A copy will be made and saved in a folder relative to the main Addressables settings asset. </param>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
            <returns>The created schema object.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.AddSchema(System.Type,System.Boolean)">
            <summary>
            Creates and adds a schema of a given type to this group.  The schema asset will be created in the GroupSchemas directory relative to the settings asset.
            </summary>
            <param name="type">The schema type. This type must not already be added.</param>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
            <returns>The created schema object.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.AddSchema``1(System.Boolean)">
            <summary>
            Creates and adds a schema of a given type to this group.
            </summary>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
            <typeparam name="TSchema">The schema type. This type must not already be added.</typeparam>
            <returns>The created schema object.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.RemoveSchema(System.Type,System.Boolean)">
            <summary>
             Remove a given schema from this group.
            </summary>
            <param name="type">The schema type.</param>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
            <returns>True if the schema was found and removed, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.RemoveSchema``1(System.Boolean)">
            <summary>
             Remove a given schema from this group.
            </summary>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
            <typeparam name="TSchema">The schema type.</typeparam>
            <returns>True if the schema was found and removed, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.GetSchema``1">
            <summary>
            Gets an added schema of the specified type.
            </summary>
            <typeparam name="TSchema">The schema type.</typeparam>
            <returns>The schema if found, otherwise null.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.GetSchema(System.Type)">
            <summary>
            Gets an added schema of the specified type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>The schema if found, otherwise null.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.HasSchema``1">
            <summary>
            Checks if the group contains a schema of a given type.
            </summary>
            <typeparam name="TSchema">The schema type.</typeparam>
            <returns>True if the schema type or subclass has been added to this group.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.ClearSchemas(System.Boolean,System.Boolean)">
            <summary>
            Removes all schemas and optionally deletes the assets associated with them.
            </summary>
            <param name="deleteAssets">If true, the schema assets will also be deleted.</param>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.HasSchema(System.Type)">
            <summary>
            Checks if the group contains a schema of a given type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>True if the schema type or subclass has been added to this group.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.ReadOnly">
            <summary>
            Is this group read only.  This is normally false.  Built in resources (resource folders and the scene list) are put into a special read only group.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.Settings">
            <summary>
            The AddressableAssetSettings that this group belongs to.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.entries">
            <summary>
            The collection of asset entries.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.Default">
            <summary>
            Is the default group.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.Compare(UnityEditor.AddressableAssets.Settings.AddressableAssetEntry,UnityEditor.AddressableAssets.Settings.AddressableAssetEntry)">
            <summary>
            Compares two asset entries based on their guids.
            </summary>
            <param name="x">The first entry to compare.</param>
            <param name="y">The second entry to compare.</param>
            <returns>Returns 0 if both entries are null or equivalent.
            Returns -1 if the first entry is null or the first entry precedes the second entry in the sort order.
            Returns 1 if the second entry is null or the first entry follows the second entry in the sort order.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.OnBeforeSerialize">
            <summary>
            Converts data to serializable format.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.OnAfterDeserialize">
            <summary>
            Converts data from serializable format.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.GatherAllAssets(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},System.Boolean,System.Boolean,System.Boolean,System.Func{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry,System.Boolean})">
            <summary>
            Gathers all asset entries.  Each explicit entry may contain multiple sub entries. For example, addressable folders create entries for each asset contained within.
            </summary>
            <param name="results">The generated list of entries.  For simple entries, this will contain just the entry itself if specified.</param>
            <param name="includeSelf">Determines if the entry should be contained in the result list or just sub entries.</param>
            <param name="recurseAll">Determines if full recursion should be done when gathering entries.</param>
            <param name="includeSubObjects">Determines if sub objects such as sprites should be included.</param>
            <param name="entryFilter">Optional predicate to run against each entry, only returning those that pass.  A null filter will return all entries</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.GetAssetEntry(System.String)">
            <summary>
            Get an entry via the asset guid.
            </summary>
            <param name="guid">The asset guid.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.SetDirty(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Marks the object as modified.
            </summary>
            <param name="modificationEvent">The event type that is changed.</param>
            <param name="eventData">The object data that corresponds to the event.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
            <param name="groupModified">If true, the group asset will be marked as dirty.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.RemoveAssetEntry(UnityEditor.AddressableAssets.Settings.AddressableAssetEntry,System.Boolean)">
            <summary>
            Remove an entry.
            </summary>
            <param name="entry">The entry to remove.</param>
            <param name="postEvent">If true, post the event to callbacks.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.IsDefaultGroup">
            <summary>
            Check to see if a group is the Default Group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.CanBeSetAsDefault">
            <summary>
            Check if a group has the appropriate schemas and attributes that the Default Group requires.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup.FindSchema(System.Type)">
            <summary>
            Gets the index of a schema based on its specified type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>Valid index if found, otherwise returns -1.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema">
            <summary>
            Contains data for AddressableAssetGroups.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.Group">
            <summary>
            Get the group that the schema belongs to.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.OnSetGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup)">
            <summary>
            Override this method to perform post creation initialization.
            </summary>
            <param name="group">The group that the schema is added to.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.OnGUI">
            <summary>
            Used to display the GUI of the schema.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.OnGUIMultiple(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema})">
            <summary>
            Used to display the GUI of multiple selected groups.
            </summary>
            <param name="otherSchemas">Schema instances in the other selected groups</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.SetDirty(System.Boolean)">
            <summary>
            Used to notify the addressables settings that data has been modified.  This must be called by subclasses to ensure proper cache invalidation.
            </summary>
            <param name="postEvent">Determines if this method call will post an event to the internal addressables event system</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.ShowAllProperties">
            <summary>
            Used for drawing properties in the inspector.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema.ShowMixedValue(UnityEditor.SerializedProperty,System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema},System.Type,System.String)">
            <summary>
            Display mixed values for the specified property found in a list of schemas.
            </summary>
            <param name="property">The property.</param>
            <param name="otherSchemas">The list of schemas that may contain the property.</param>
            <param name="type">The property type.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet">
            <summary>
            Collection of AddressableAssetGroupSchema objects
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.Schemas">
            <summary>
            List of schemas for this group.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.Types">
            <summary>
            Get the list of schema types.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.AddSchema(UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema,System.Func{System.Type,System.String})">
            <summary>
            Adds a copy of the provided schema object.
            </summary>
            <param name="schema">The schema to copy.</param>
            <param name="pathFunc">A function that returns the path where this method can save the schema asset.  Set to null to not create an in-project asset.</param>
            <returns>The created schema object.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.AddSchema(System.Type,System.Func{System.Type,System.String})">
            <summary>
            Creates and adds a schema of a given type to this group.  The schema asset will be created in the GroupSchemas directory relative to the settings asset.
            </summary>
            <param name="type">The schema type. This type must not already be added.</param>
            <param name="pathFunc">A function that returns the path where this method can save the schema asset.  Set to null to not create an in-project asset.</param>
            <returns>The created schema object.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.RemoveSchema(System.Type)">
            <summary>
             Remove a given schema from this group.
            </summary>
            <param name="type">The schema type.</param>
            <returns>True if the schema was found and removed, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.GetSchema(System.Type)">
            <summary>
            Gets an added schema of the specified type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>The schema if found, otherwise null.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaSet.ClearSchemas(System.Boolean)">
            <summary>
            Removes all schemas and optionally deletes the assets associated with them.
            </summary>
            <param name="deleteAssets">If true, the schema assets will also be deleted.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaTemplate">
            <summary>
            Contains a set of schemas used by the GUI to create predefined asset groups.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaTemplate.DisplayName">
            <summary>
            The display name of the template.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaTemplate.Description">
            <summary>
            the description of the template.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaTemplate.GetTypes">
            <summary>
            The types of schemas in this template.
            </summary>
            <returns>The array of schema types.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchemaTemplate.Create(System.String,System.String,System.Type[])">
            <summary>
            Creates a template with the specified name, descriptionm and schema types.
            </summary>
            <param name="name">The name of the template.</param>
            <param name="descr">The template description.</param>
            <param name="types">The schema types for the template.</param>
            <returns>The newly created schema template.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate">
            <summary>
            Used to create template groups to make it easier for the user to create new groups.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.SchemaPresetObjects">
            <summary>
            Returns a list of Preset objects for AddressableAssetGroupSchema associated with this template
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.SchemaObjects">
            <summary>
            Returns the list of Preset objects of AddressableAssetGroupSchema associated with this template
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.Name">
            <summary>
            The name of the AddressableAssetGroupTemplate
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.Description">
            <summary>
            The description of the AddressableAssetGroupTemplate
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.GetTypes">
            <summary>
            Gets the types of the AddressableAssetGroupSchema associated with this template
            </summary>
            <returns>AddressableAssetGroupSchema types for schema on this template</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.ApplyToAddressableAssetGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup)">
            <summary>
            Applies schema values for the group to the schema values found in the template
            </summary>
            <param name="group">The AddressableAssetGroup to apply the schema settings to</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.AddSchema(System.Type,System.Boolean)">
            <summary>
            Adds the AddressableAssetGroupSchema of type to the template.
            </summary>
            <param name="type">The Type for the AddressableAssetGroupSchema to add to this template.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
            <returns>If true, the type was added successfully.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.RemoveSchema(System.Type,System.Boolean)">
            <summary>
            Removes the AddressableAssetGroupSchema of the type from the template.
            </summary>
            <param name="type">The type of AddressableAssetGroupSchema to be removed.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
            <returns>If true, the type was removed successfully.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.RemoveSchema(System.Int32,System.Boolean)">
            <summary>
            Removes the Schema at the given index.
            </summary>
            <param name="index">The index of the object to be removed.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
            <returns>If true, the type was removed successfully.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.SetDirty(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent,System.Object,System.Boolean)">
            <summary>
            Marks the object as modified.
            </summary>
            <param name="modificationEvent">The event type that is changed.</param>
            <param name="eventData">The object data that corresponds to the event.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.HasSchema(System.Type)">
            <summary>
            Checks if the group contains a schema of a given type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>True if the schema type or subclass has been added to this group.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.GetSchemaByType(System.Type)">
            <summary>
            Gets an added schema of the specified type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>The schema if found, otherwise null.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetGroupTemplate.FindSchema(System.Type)">
            <summary>
            Gets the index of a schema based on its specified type.
            </summary>
            <param name="type">The schema type.</param>
            <returns>Valid index if found, otherwise returns -1.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.IGroupTemplate">
            <summary>
            Stores information about a group template.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.IGroupTemplate.Name">
            <summary>
            The name of the group, used for the menu and newly created group name.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.IGroupTemplate.Description">
            <summary>
            Description of the Template, to be used as a tooltip
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings">
            <summary>
            Contains user defined variables to control build parameters.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.customEntryString">
            <summary>
            Text that represents a custom profile entry.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.undefinedEntryValue">
            <summary>
            Text that represents an undefined profile entry.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.Reset">
            <summary>
            Clears out the list of profiles, then creates a new default one.
            </summary>
            <returns>Returns the ID of the newly created default profile.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.EvaluateString(System.String,System.String)">
            <summary>
            Evaluate a string given a profile id.
            </summary>
            <param name="profileId">The profile id to use for evaluation.</param>
            <param name="varString">The string to evaluate.  Any tokens surrounded by '[' and ']' will be replaced with matching variables.</param>
            <returns>The evaluated string.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetVariableNames">
            <summary>
            Get all available variable names
            </summary>
            <returns>The variable names, sorted alphabetically.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetAllProfileNames">
            <summary>
            Get all profile names.
            </summary>
            <returns>The list of profile names.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetProfileName(System.String)">
            <summary>
            Get a profile's display name.
            </summary>
            <param name="profileId">The profile id.</param>
            <returns>The display name of the profile.  Returns empty string if not found.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetProfileId(System.String)">
            <summary>
            Get the id of a given display name.
            </summary>
            <param name="profileName">The profile name.</param>
            <returns>The id of the profile.  Returns empty string if not found.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetAllVariableIds">
            <summary>
            Gets the set of all profile ids.
            </summary>
            <returns>The set of profile ids.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.SetDirty(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent,System.Object,System.Boolean)">
            <summary>
            Marks the object as modified.
            </summary>
            <param name="modificationEvent">The event type that is changed.</param>
            <param name="eventData">The object data that corresponds to the event.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.AddProfile(System.String,System.String)">
            <summary>
            Adds a new profile.
            </summary>
            <param name="name">The name of the new profile.</param>
            <param name="copyFromId">The id of the profile to copy values from.</param>
            <returns>The id of the created profile.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.RenameProfile(System.String,System.String)">
            <summary>
            Renames a profile. profileId must refer to an existing profile. Profile names must be unique and must not be comprised of only whitespace.
            Returns false if profileId or newName is invalid.
            </summary>
            <param name="profileId"> The id of the profile to be renamed. </param>
            <param name="newName"> The new name to be given to the profile. </param>
            <returns> True if the rename is successful, false otherwise. </returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.RemoveProfile(System.String)">
            <summary>
            Removes a profile.
            </summary>
            <param name="profileId">The id of the profile to remove.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.SetValue(System.String,System.String,System.String)">
            <summary>
            Set the value of a variable for a specified profile.
            </summary>
            <param name="profileId">The profile id.</param>
            <param name="variableName">The property name.</param>
            <param name="val">The value to set the property.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.CreateValue(System.String,System.String)">
            <summary>
            Create a new profile property.
            </summary>
            <param name="variableName">The name of the property.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The id of the created variable.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.RemoveValue(System.String)">
            <summary>
            Remove a profile property.
            </summary>
            <param name="variableId">The id of the property.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetValueById(System.String,System.String)">
            <summary>
            Get the value of a property.
            </summary>
            <param name="profileId">The profile id.</param>
            <param name="varId">The property id.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings.GetValueByName(System.String,System.String)">
            <summary>
            Get the value of a property by name.
            </summary>
            <param name="profileId">The profile id.</param>
            <param name="varName">The variable name.</param>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings">
            <summary>
            Contains editor data for the addressables system.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.kNewGroupName">
            <summary>
            Default name of a newly created group.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.kLocalBuildPath">
            <summary>
            Default name of local build path.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.kLocalLoadPath">
            <summary>
            Default name of local load path.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.kRemoteBuildPath">
            <summary>
            Default name of remote build path.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.kRemoteLoadPath">
            <summary>
            Default name of remote load path.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent">
            <summary>
            Options for labelling all the different generated events.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupAdded">
            <summary>
            Use to indicate that a group was added to the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupRemoved">
            <summary>
            Use to indicate that a group was removed from the the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupRenamed">
            <summary>
            Use to indicate that a group in the settings object was renamed.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupSchemaAdded">
            <summary>
            Use to indicate that a schema was added to a group.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupSchemaRemoved">
            <summary>
            Use to indicate that a schema was removed from a group.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupSchemaModified">
            <summary>
            Use to indicate that a schema was modified.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupTemplateAdded">
            <summary>
            Use to indicate that a group template was added to the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupTemplateRemoved">
            <summary>
            Use to indicate that a group template was removed from the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupTemplateSchemaAdded">
            <summary>
            Use to indicate that a schema was added to a group template.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupTemplateSchemaRemoved">
            <summary>
            Use to indicate that a schema was removed from a group template.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.EntryCreated">
            <summary>
            Use to indicate that an asset entry was created.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.EntryAdded">
            <summary>
            Use to indicate that an asset entry was added to a group.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.EntryMoved">
            <summary>
            Use to indicate that an asset entry moved from one group to another.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.EntryRemoved">
            <summary>
            Use to indicate that an asset entry was removed from a group.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.LabelAdded">
            <summary>
            Use to indicate that an asset label was added to the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.LabelRemoved">
            <summary>
            Use to indicate that an asset label was removed from the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.ProfileAdded">
            <summary>
            Use to indicate that a profile was added to the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.ProfileRemoved">
            <summary>
            Use to indicate that a profile was removed from the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.ProfileModified">
            <summary>
            Use to indicate that a profile was modified.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.ActiveProfileSet">
            <summary>
            Use to indicate that a profile has been set as the active profile.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.EntryModified">
            <summary>
            Use to indicate that an asset entry was modified.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.BuildSettingsChanged">
            <summary>
            Use to indicate that the build settings object was modified.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.ActiveBuildScriptChanged">
            <summary>
            Use to indicate that a new build script is being used as the active build script.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.DataBuilderAdded">
            <summary>
            Use to indicate that a new data builder script was added to the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.DataBuilderRemoved">
            <summary>
            Use to indicate that a data builder script was removed from the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.InitializationObjectAdded">
            <summary>
            Use to indicate a new initialization object was added to the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.InitializationObjectRemoved">
            <summary>
            Use to indicate a initialization object was removed from the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.ActivePlayModeScriptChanged">
            <summary>
            Use to indicate that a new script is being used as the active playmode data builder.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.BatchModification">
            <summary>
            Use to indicate that a batch of asset entries was modified. Note that the posted object will be null.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.HostingServicesManagerModified">
            <summary>
            Use to indicate that the hosting services manager was modified.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.GroupMoved">
            <summary>
            Use to indicate that a group changed its order placement within the list of groups in the settings object.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent.CertificateHandlerChanged">
            <summary>
            Use to indicate that a new certificate handler is being used for the initialization object provider.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.AssetPath">
            <summary>
            The path of the settings asset.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ConfigFolder">
            <summary>
            The folder of the settings asset.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GroupFolder">
            <summary>
            The folder for the group assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.DataBuilderFolder">
            <summary>
            The folder for the script assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GroupSchemaFolder">
            <summary>
            The folder for the asset group schema assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GroupTemplateFolder">
            <summary>
            The default folder for the group template assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.OnModification">
            <summary>
            Event for handling settings changes.  The object passed depends on the event type.
            </summary>
        </member>
        <member name="E:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.OnModificationGlobal">
            <summary>
            Event for handling settings changes on all instances of AddressableAssetSettings.  The object passed depends on the event type.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.OnDataBuilderComplete">
            <summary>
            Event for handling the result of a DataBuilder.Build call.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.IsPersisted">
            <summary>
            Returns whether this settings object is persisted to an asset.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.MaxConcurrentWebRequests">
            <summary>
            The maximum number of concurrent web requests.  This value will be clamped from 1 to 1024.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.UniqueBundleIds">
            <summary>
            Set this to true to ensure unique bundle ids. Set to false to allow duplicate bundle ids.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.FolderSubAssetsRemovesExt">
            <summary>
            是否去除 Sub Asset address 的文件名后缀（括展名）  <br/>
            Is remove ext (file extention) for addresses of AA Folder Sub Assets 
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.AllowAAInResourcesFolder">
            <summary>
            实验功能：是否允许 AA asset 放在 Resources 目录下  <br/>
            Experimental: Is allow Addressable asset in Resources folder
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ContiguousBundles">
            <summary>
            If set, packs assets in bundles contiguously based on the ordering of the source asset which results in improved asset loading times. Disable this if you've built bundles with a version of Addressables older than 1.12.1 and you want to minimize bundle changes.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.BuildRemoteCatalog">
            <summary>
            Determine if a remote catalog should be built-for and loaded-by the app.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.BundleLocalCatalog">
            <summary>
            Whether the local catalog should be serialized in an asset bundle or as json.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.DisableCatalogUpdateOnStartup">
            <summary>
            Tells Addressables if it should check for a Content Catalog Update during the initialization step.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoteCatalogBuildPath">
            <summary>
            The path to place a copy of the content catalog for online retrieval.  To do any content updates
            to an existing built app, there must be a remote catalog. Overwriting the catalog is how the app
            gets informed of the updated content.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoteCatalogLoadPath">
            <summary>
            The path to load the remote content catalog from.  This is the location the app will check to
            look for updated catalogs, which is the only indication the app has for updated content.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.currentHash">
            <summary>
            Hash of the current settings.  This value is recomputed if anything changes.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.CreateAssetReference(System.String)">
            <summary>
            Create an AssetReference object.  If the asset is not already addressable, it will be added.
            </summary>
            <param name="guid">The guid of the asset reference.</param>
            <returns>Returns the newly created AssetReference.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.OverridePlayerVersion">
            <summary>
            Allows for overriding the player version used to generated catalog names.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.PlayerBuildVersion">
            <summary>
            The version of the player build.  This is implemented as a timestamp int UTC of the form  string.Format("{0:D4}.{1:D2}.{2:D2}.{3:D2}.{4:D2}.{5:D2}", now.Year, now.Month, now.Day, now.Hour, now.Minute, now.Second).
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.groups">
            <summary>
            List of asset groups.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.buildSettings">
            <summary>
            Build settings object.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.profileSettings">
            <summary>
            Profile settings object.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.labelTable">
            <summary>
            LabelTable object.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveSchemaTemplate(System.Int32,System.Boolean)">
            <summary>
            Remove  the schema at the specified index.
            </summary>
            <param name="index">The index to remove at.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the schema was removed.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GroupTemplateObjects">
            <summary>
            List of ScriptableObjects that implement the IGroupTemplate interface for providing new templates.
            For use in the AddressableAssetsWindow to display new groups to create
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GetGroupTemplateObject(System.Int32)">
            <summary>
            Get the IGroupTemplate at the specified index.
            </summary>
            <param name="index">The index of the template object.</param>
            <returns>The AddressableAssetGroupTemplate object at the specified index.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.AddGroupTemplateObject(UnityEditor.AddressableAssets.Settings.IGroupTemplate,System.Boolean)">
            <summary>
            Adds a AddressableAssetsGroupTemplate object.
            </summary>
            <param name="templateObject">The AddressableAssetGroupTemplate object to add.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the initialization object was added.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveGroupTemplateObject(System.Int32,System.Boolean)">
            <summary>
            Remove the AddressableAssetGroupTemplate object at the specified index.
            </summary>
            <param name="index">The index to remove.</param>
            <param name="postEvent">Indicates if an event should be posted to the Addressables event system for this change.</param>
            <returns>True if the initialization object was removed.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.SetGroupTemplateObjectAtIndex(System.Int32,UnityEditor.AddressableAssets.Settings.IGroupTemplate,System.Boolean)">
            <summary>
            Sets the initialization object at the specified index.
            </summary>
            <param name="index">The index to set the initialization object.</param>
            <param name="templateObject">The rroup template object to set.  This must be a valid scriptable object that implements the IGroupTemplate interface.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the initialization object was set, false otherwise.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.InitializationObjects">
            <summary>
            List of ScriptableObjects that implement the IObjectInitializationDataProvider interface for providing runtime initialization.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GetInitializationObject(System.Int32)">
            <summary>
            Get the IObjectInitializationDataProvider at a specifc index.
            </summary>
            <param name="index">The index of the initialization object.</param>
            <returns>The initialization object at the specified index.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.AddInitializationObject(UnityEngine.ResourceManagement.Util.IObjectInitializationDataProvider,System.Boolean)">
            <summary>
            Adds an initialization object.
            </summary>
            <param name="initObject">The initialization object to add.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the initialization object was added.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveInitializationObject(System.Int32,System.Boolean)">
            <summary>
            Remove the initialization object at the specified index.
            </summary>
            <param name="index">The index to remove.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the initialization object was removed.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.SetInitializationObjectAtIndex(System.Int32,UnityEngine.ResourceManagement.Util.IObjectInitializationDataProvider,System.Boolean)">
            <summary>
            Sets the initialization object at the specified index.
            </summary>
            <param name="index">The index to set the initialization object.</param>
            <param name="initObject">The initialization object to set.  This must be a valid scriptable object that implements the IInitializationObject interface.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the initialization object was set, false otherwise.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.CertificateHandlerType">
            <summary>
            The type of CertificateHandler to use for this provider.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.DataBuilders">
            <summary>
            List of ScriptableObjects that implement the IDataBuilder interface.  These are used to create data for editor play mode and for player builds.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GetDataBuilder(System.Int32)">
            <summary>
            Get The data builder at a specifc index.
            </summary>
            <param name="index">The index of the builder.</param>
            <returns>The data builder at the specified index.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.AddDataBuilder(UnityEditor.AddressableAssets.Build.IDataBuilder,System.Boolean)">
            <summary>
            Adds a data builder.
            </summary>
            <param name="builder">The data builder to add.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the data builder was added.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveDataBuilder(System.Int32,System.Boolean)">
            <summary>
            Remove the data builder at the sprcified index.
            </summary>
            <param name="index">The index to remove.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the builder was removed.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.SetDataBuilderAtIndex(System.Int32,UnityEditor.AddressableAssets.Build.IDataBuilder,System.Boolean)">
            <summary>
            Sets the data builder at the specified index.
            </summary>
            <param name="index">The index to set the builder.</param>
            <param name="builder">The builder to set.  This must be a valid scriptable object that implements the IDataBuilder interface.</param>
            <param name="postEvent">Indicates if an even should be posted to the Addressables event system for this change.</param>
            <returns>True if the builder was set, false otherwise.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ActivePlayerDataBuilder">
            <summary>
            Get the active data builder for player data.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ActivePlayModeDataBuilder">
            <summary>
            Get the active data builder for editor play mode data.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ActivePlayerDataBuilderIndex">
            <summary>
            Get the index of the active player data builder.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ActivePlayModeDataBuilderIndex">
            <summary>
            Get the index of the active play mode data builder.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GetLabels">
            <summary>
            Gets the list of all defined labels.
            </summary>
            <returns>Returns a list of all defined labels.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.AddLabel(System.String,System.Boolean)">
            <summary>
            Add a new label.
            </summary>
            <param name="label">The label name.</param>
            <param name="postEvent">Send modification event.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveLabel(System.String,System.Boolean)">
            <summary>
            Remove a label by name.
            </summary>
            <param name="label">The label name.</param>
            <param name="postEvent">Send modification event.</param>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.activeProfileId">
            <summary>
            The active profile id.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.HostingServicesManager">
            <summary>
            Get the HostingServicesManager object.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.GetAllAssets(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},System.Boolean,System.Func{UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,System.Boolean},System.Func{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry,System.Boolean})">
            <summary>
            Gets all asset entries from all groups.
            </summary>
            <param name="assets">The list of asset entries.</param>
            <param name="includeSubObjects">Determines if sub objects such as sprites should be included.</param>
            <param name="groupFilter">A method to filter groups.  Groups will be processed if filter is null, or it returns TRUE</param>
            <param name="entryFilter">A method to filter entries.  Entries will be processed if filter is null, or it returns TRUE</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveAssetEntry(System.String,System.Boolean)">
            <summary>
            Remove an asset entry.
            </summary>
            <param name="guid">The  guid of the asset.</param>
            <param name="postEvent">Send modifcation event.</param>
            <returns>True if the entry was found and removed.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.Create(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a new AddressableAssetSettings object.
            </summary>
            <param name="configFolder">The folder to store the settings object.</param>
            <param name="configName">The name of the settings object.</param>
            <param name="createDefaultGroups">If true, create groups for player data and local packed content.</param>
            <param name="isPersisted">If true, assets are created.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.CreateAndAddGroupTemplate(System.String,System.String,System.Type[])">
            <summary>
            Creates a new AddressableAssetGroupTemplate Object with the set of schema types with default settings for use in the editor GUI.
            </summary>
            <param name="displayName">The display name of the template.</param>
            <param name="description">Description text use with the template.</param>
            <param name="types">The schema types for the template.</param>
            <returns>True if the template was added, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.FindGroup(System.Func{UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,System.Boolean})">
            <summary>
            Find asset group by functor.
            </summary>
            <param name="func">The functor to call on each group.  The first group that evaluates to true is returned.</param>
            <returns>The group found or null.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.FindGroup(System.String)">
            <summary>
            Find asset group by name.
            </summary>
            <param name="groupName">The name of the group.</param>
            <returns>The group found or null.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.DefaultGroup">
            <summary>
            The default group.  This group is used when marking assets as addressable via the inspector.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.SetDirty(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.ModificationEvent,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Marks the object as modified.
            </summary>
            <param name="modificationEvent">The event type that is changed.</param>
            <param name="eventData">The object data that corresponds to the event.</param>
            <param name="postEvent">If true, the event is propagated to callbacks.</param>
            <param name="settingsModified">If true, the settings asset will be marked as dirty.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.FindAssetEntry(System.String)">
            <summary>
            Find and asset entry by guid.
            </summary>
            <param name="guid">The asset guid.</param>
            <returns>The found entry or null.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.MoveEntries(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,System.Boolean,System.Boolean)">
            <summary>
            Move an existing entry to a group.
            </summary>
            <param name="entries">The entries to move.</param>
            <param name="targetParent">The group to add the entries to.</param>
            <param name="readOnly">Should the entries be read only.</param>
            <param name="postEvent">Send modification event.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.MoveEntry(UnityEditor.AddressableAssets.Settings.AddressableAssetEntry,UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,System.Boolean,System.Boolean)">
            <summary>
            Move an existing entry to a group.
            </summary>
            <param name="entry">The entry to move.</param>
            <param name="targetParent">The group to add the entry to.</param>
            <param name="readOnly">Should the entry be read only.</param>
            <param name="postEvent">Send modification event.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.CreateOrMoveEntry(System.String,UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,System.Boolean,System.Boolean)">
            <summary>
            Create a new entry, or if one exists in a different group, move it into the new group.
            </summary>
            <param name="guid">The asset guid.</param>
            <param name="targetParent">The group to add the entry to.</param>
            <param name="readOnly">Is the new entry read only.</param>
            <param name="postEvent">Send modification event.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.CreateGroup(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema},System.Type[])">
            <summary>
            Create a new asset group.
            </summary>
            <param name="groupName">The group name.</param>
            <param name="setAsDefaultGroup">Set the new group as the default group.</param>
            <param name="readOnly">Is the new group read only.</param>
            <param name="postEvent">Post modification event.</param>
            <param name="schemasToCopy">Schema set to copy from.</param>
            <param name="types">Types of schemas to add.</param>
            <returns>The newly created group.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.RemoveGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup)">
            <summary>
            Remove an asset group.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.BuildPlayerContent">
            <summary>
            Runs the active player data build script to create runtime data.
            See the [BuildPlayerContent](../manual/BuildPlayerContent.html) documentation for more details.
            <returns>(bool) isSucceeded</returns>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.BuildPlayerContent(UnityEditor.AddressableAssets.Build.AddressablesPlayerBuildResult@)">
            <summary>
            Runs the active player data build script to create runtime data.
            See the [BuildPlayerContent](../manual/BuildPlayerContent.html) documentation for more details.
            <returns>(bool) isSucceeded</returns>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings.CleanPlayerContent(UnityEditor.AddressableAssets.Build.IDataBuilder)">
            <summary>
            Deletes all created runtime data for the active player data builder.
            </summary>
            <param name="builder">The builder to call ClearCachedData on.  If null, all builders will be cleaned</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetUtility.GetTypes``1">
            <summary>
            Get all types that can be assigned to type T
            </summary>
            <typeparam name="T">The class type to use as the base class or interface for all found types.</typeparam>
            <returns>A list of types that are assignable to type T.  The results are cached.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.AddressableAssetUtility.GetTypes(System.Type)">
            <summary>
            Get all types that can be assigned to type rootType.
            </summary>
            <param name="rootType">The class type to use as the base class or interface for all found types.</param>
            <returns>A list of types that are assignable to type T.  The results are not cached.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.CacheInitializationSettings">
            <summary>
            Asset container for CacheInitializationData.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.CacheInitializationSettings.Name">
            <summary>
            Display name used in GUI for this object.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.CacheInitializationSettings.Data">
            <summary>
            The cache initialization data that will be serialized and applied during Addressables initialization.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.CacheInitializationSettings.CreateObjectInitializationData">
            <summary>
            Create initialization data to be serialized into the Addressables runtime data.
            </summary>
            <returns>The serialized data for the initialization class and the data.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema">
            <summary>
            Schema used for bundled asset groups.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundlePackingMode">
            <summary>
            Defines how bundles are created.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundlePackingMode.PackTogether">
            <summary>
            Creates a bundle for all non-scene entries and another for all scenes entries.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundlePackingMode.PackSeparately">
            <summary>
            Creates a bundle per entry.  This is useful if each entry is a folder as all sub entries will go to the same bundle.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundlePackingMode.PackTogetherByLabel">
            <summary>
            Creates a bundle per unique set of labels
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleCompressionMode">
            <summary>
            Options for compressing bundles in this group.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleCompressionMode.Uncompressed">
            <summary>
            Use to indicate that bundles will not be compressed.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleCompressionMode.LZ4">
            <summary>
            Use to indicate that bundles will be compressed using the LZ4 compression algorithm.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleCompressionMode.LZMA">
            <summary>
            Use to indicate that bundles will be compressed using the LZMA compression algorithm.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.Compression">
            <summary>
            Build compression.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.GetBuildCompressionForBundle(System.String)">
            <summary>
            Gets the build compression settings for bundles in this group.
            </summary>
            <param name="bundleId">The bundle id.</param>
            <returns>The build compression.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.IncludeInBuild">
            <summary>
            If true, the assets in this group will be included in the build of bundles.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundledAssetProviderType">
            <summary>
            The provider type to use for loading assets from bundles.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.ForceUniqueProvider">
            <summary>
            If true, the bundle and asset provider for assets in this group will get unique provider ids and will only provide for assets in this group.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.UseAssetBundleCache">
            <summary>
            If true, the CRC and Hash values of the asset bundle are used to determine if a bundle can be loaded from the local cache instead of downloaded.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.UseAssetBundleCrc">
            <summary>
            If true, the CRC and Hash values of the asset bundle are used to determine if a bundle can be loaded from the local cache instead of downloaded.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.UseAssetBundleCrcForCachedBundles">
            <summary>
            If true, the CRC and Hash values of the asset bundle are used to determine if a bundle can be loaded from the local cache instead of downloaded.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.Timeout">
            <summary>
            Sets UnityWebRequest to attempt to abort after the number of seconds in timeout have passed.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.ChunkedTransfer">
            <summary>
            Indicates whether the UnityWebRequest system should employ the HTTP/1.1 chunked-transfer encoding method.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.RedirectLimit">
            <summary>
            Indicates the number of redirects which this UnityWebRequest will follow before halting with a “Redirect Limit Exceeded” system error.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.RetryCount">
            <summary>
            Indicates the number of times the request will be retried.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BuildPath">
            <summary>
            The path to copy asset bundles to.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.LoadPath">
            <summary>
            The path to load bundles from.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleMode">
            <summary>
            Controls how bundles are packed.  If set to PackTogether, a single asset bundle will be created for the entire group, with the exception of scenes, which are packed in a second bundle.  If set to PackSeparately, an asset bundle will be created for each entry in the group; in the case that an entry is a folder, one bundle is created for the folder and all of its sub entries.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.HostingServicesContentRoot">
            <inheritdoc/>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.AssetBundleProviderType">
            <summary>
            The provider type to use for loading asset bundles.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.OnSetGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup)">
            <summary>
            Set default values taken from the assigned group.
            </summary>
            <param name="group">The group this schema has been added to.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.OnBeforeSerialize">
            <summary>
            Impementation of ISerializationCallbackReceiver, does nothing.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.OnAfterDeserialize">
            <summary>
            Impementation of ISerializationCallbackReceiver, used to set callbacks for ProfileValueReference changes.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.GetAssetCachedProviderId">
            <summary>
            Returns the id of the asset provider needed to load from this group.
            </summary>
            <returns>The id of the cached provider needed for this group.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.GetBundleCachedProviderId">
            <summary>
            Returns the id of the bundle provider needed to load from this group.
            </summary>
            <returns>The id of the cached provider needed for this group.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStyle">
            <summary>
            Used to determine how the final bundle name should look.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStyle.AppendHash">
            <summary>
            Use to indicate that the hash should be appended to the bundle name.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStyle.NoHash">
            <summary>
            Use to indicate that the bundle name should not contain the hash.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStyle.OnlyHash">
            <summary>
            Use to indicate that the bundle name should only contain the given hash.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStyle.FileNameHash">
            <summary>
            Use to indicate that the bundle name should only contain the hash of the file name.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStylePropertyDrawer">
            <summary>
            Used to draw the Bundle Naming popup
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStylePropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Custom Drawer for the BundleNamingStyle in order to display easier to understand display names.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNaming">
            <summary>
            Naming style to use for generated AssetBundle(s).
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.ShowAllProperties">
            <summary>
            Used for drawing properties in the inspector.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.OnGUI">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.OnGUIMultiple(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema})">
            <inheritdoc/>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.ContentUpdateGroupSchema">
            <summary>
            Schema for content updates.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.ContentUpdateGroupSchema.StaticContent">
            <summary>
            Is the group static.  This property is used in determining which assets need to be moved to a new remote group during the content update process.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.ContentUpdateGroupSchema.OnGUI">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.ContentUpdateGroupSchema.OnGUIMultiple(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema})">
            <inheritdoc/>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.GroupSchemas.PlayerDataGroupSchema">
            <summary>
            Schema for the player data asset group
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.PlayerDataGroupSchema.IncludeResourcesFolders">
            <summary>
            If enabled, all assets in resources folders will have addresses generated during the build.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.GroupSchemas.PlayerDataGroupSchema.IncludeBuildSettingsScenes">
            <summary>
            If enabled, all scenes in the editor build settings will have addresses generated during the build.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.GroupSchemas.PlayerDataGroupSchema.OnGUIMultiple(System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema})">
            <inheritdoc/>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.KeyDataStore">
            <summary>
            Contains serialized data in a generic serializable container.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.KeyDataStore.Entry.ToString">
            <inheritdoc/>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.KeyDataStore.OnSetData">
            <summary>
            Delegate that is invoked when data is modified.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.KeyDataStore.OnBeforeSerialize">
            <summary>
            Implementation of ISerializationCallbackReceiver interface, used to convert data to a serializable form.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.KeyDataStore.OnAfterDeserialize">
            <summary>
            Implementation of ISerializationCallbackReceiver interface, used to convert data from its serializable form.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.KeyDataStore.Keys">
            <summary>
            The collection of keys stored.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.KeyDataStore.SetData(System.String,System.Object)">
            <summary>
            Set the value of a specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data to store.  Supported types are strings, POD types, objects that have a static method named 'Parse' that convert a string to an object, and object that are serializable via JSONUtilty.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.KeyDataStore.SetDataFromString(System.String,System.String)">
            <summary>
            Set data for a specified key from a string.
            </summary>
            <param name="key">The data key.</param>
            <param name="data">The data string value.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.KeyDataStore.GetData``1(System.String,``0,System.Boolean)">
            <summary>
            Get data via a specified key.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value to return if the data is not found.</param>
            <param name="addDefault">Optional parameter to control whether to add the default value if the data is not found.</param>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.ProfileValueReference">
            <summary>
            Used to store references to profile variables.  This class is intended to be used for fields in user scripts, specifically ones that subclass AddressableAssetGroupSchema.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Settings.ProfileValueReference.OnValueChanged">
            <summary>
            This delegate will be invoked when the reference profile id changes.  This will NOT be invoked when the actual profile value itself changes.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Settings.ProfileValueReference.Id">
            <summary>
            Get the profile variable id.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ProfileValueReference.GetValue(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Evaluate the profile value using the provided settings object.
            </summary>
            <param name="settings">The settings object to evaluate with.  The activeProfileId will be used.</param>
            <returns>The evaluated string stored in the referenced profile variable.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ProfileValueReference.GetValue(UnityEditor.AddressableAssets.Settings.AddressableAssetProfileSettings,System.String)">
            <summary>
            Evaluate the profile value using the provided profile settings object and a profile id.
            </summary>
            <param name="profileSettings">The profile settings object.</param>
            <param name="profileId">The profile id.</param>
            <returns>The evaluated string stored in the referenced profile variable.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ProfileValueReference.GetName(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Get the profile variable name that is referenced.
            </summary>
            <param name="settings">The settings object.</param>
            <returns>The name of the profile variable name.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ProfileValueReference.SetVariableById(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.String)">
            <summary>
            Set the profile variable id using the id of the variable.
            </summary>
            <param name="settings">The settings object.</param>
            <param name="id">The id of the profile variable to set.</param>
            <returns>True if the profile data is found and set, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ProfileValueReference.SetVariableByName(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.String)">
            <summary>
            Set the profile variable id using the name of the variable.
            </summary>
            <param name="settings">The settings object.</param>
            <param name="name">The name of the profile variable to set.</param>
            <returns>True if the profile data is found and set, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorSettings.GetResGUIDs(System.String)">
            <summary>
            获取指定列表文件`ResList`中的资源GUID集合。 返回 HashSet 不会有重复项。
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorSettings.FindResListByAssetGuid(System.String)">
            <summary>
            查找指定资源所在的列表文件`ResList`。
            </summary>
            <param name="assetGuid"></param>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Settings.ResListEditorUtil">
            <summary>
            列表文件`ResList` 的编辑器工具类
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetListPath(System.Int32)">
            <summary>
            获取列表文件`ResList` Path
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetListName(System.String)">
            <summary>
            获取列表文件`ResList` Name
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.IsListExist(System.Int32)">
            <summary>
            判断指定列表文件`ResList`是否存在
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.IsListExist(System.String)">
            <summary>
            判断指定列表文件`ResList`是否存在
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetListIndex(System.String,System.Boolean)">
            <summary>
            查找指定列表文件`ResList`的 Index。 返回 (int) `resListIndex`，如果没有找到所指定的列表，返回 -1。
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetNextUnusedListIndex">
            <summary>
            获取下一个未使用的列表文件`ResList`的 Index
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetAllListIndexes">
            <summary>
            遍历获取所有列表文件`ResList`的 Index
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetAllListPaths">
            <summary>
            遍历获取所有列表文件`ResList`的 Paths 列表
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetResCount(System.String)">
            <summary>
            获取指定列表文件`ResList`中的资源数
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetResInfos(System.String)">
            <summary>
            获取指定列表文件`ResList`中的资源信息列表。<br/>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetResInfoAssetPaths(System.String)">
            <summary>
            获取指定列表文件`ResList`中的资源信息的路径列表。<br/>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.RefreshSettingsData">
            <summary>
            刷新`ResListSettings`数据
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetResListsByAssetPath(UnityEditor.AddressableAssets.Settings.ResListEditorSettings,System.String)">
            <summary>
            通过资源，找到所有对应的ResList。 返回 HashSet，每个元素为(string)列表文件path，不会有重复项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.GetResListsByAssets(UnityEditor.AddressableAssets.Settings.ResListEditorSettings,System.Collections.Generic.IList{System.String})">
            <summary>
            通过资源列表，找到所有对应的ResList。 返回 HashSet，每个元素为(string)列表文件path，不会有重复项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.CreateResListAsset(System.String)">
            <summary>
            创建空的列表文件`ResList`
            </summary>
            <param name="resListPath"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.CreateResListAsset(System.String,System.Collections.Generic.IList{UnityEngine.AddressableAssets.ResListInfo})">
            <summary>
            创建指定参数的列表文件`ResList`
            </summary>
            <param name="resListPath"></param>
            <param name="resInfos"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.AddResInfos(UnityEngine.AddressableAssets.ResList,System.Collections.Generic.IList{UnityEngine.AddressableAssets.ResListInfo},System.Boolean)">
            <summary>
            为指定列表文件`ResList`增加资源信息。 返回 (bool) 是否成功。
            </summary>
            <param name="listAsset"></param>
            <param name="resInfos"></param>
            <param name="saveNow"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.RemoveResInfos(UnityEngine.AddressableAssets.ResList,System.Collections.Generic.IList{UnityEngine.AddressableAssets.ResListInfo},System.Boolean)">
            <summary>
            为指定列表文件`ResList`删去资源信息。 返回 (bool) 是否成功。
            </summary>
            <param name="listAsset"></param>
            <param name="resInfos"></param>
            <param name="saveNow"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.RemoveDuplicateResInfos(UnityEngine.AddressableAssets.ResList,System.Boolean)">
            <summary>
            为指定列表文件`ResList`删去重复项的资源信息。 返回 (bool) 是否成功。
            </summary>
            <param name="listAsset"></param>
            <param name="saveNow"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Settings.ResListEditorUtil.DeleteResListAsset(System.Int32)">
            <summary>
            删除指定列表文件`ResList`，返回 (bool) isSuccess
            </summary>
            <param name="resListIndex"></param>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.BuildScript">
            <summary>
            Entry point to set callbacks for builds.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.BuildScript.buildCompleted">
            <summary>
            Global delegate for handling the result of AddressableAssets builds.  This will get called for player builds and when entering play mode.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput">
            <summary>
            Data builder context object for Addressables.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.AddressableSettings">
            <summary>
            The main addressables settings object.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.TargetGroup">
            <summary>
            Build target group.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.Target">
            <summary>
            Build target.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.PlayerVersion">
            <summary>
            Player build version.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.ProfilerEventsEnabled">
            <summary>
            Bool to signify if profiler events should be broadcast.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.Registry">
            <summary>
            Registry of files created during the build
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.RuntimeSettingsFilename">
            <summary>
            The name of the default Runtime Settings file.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.RuntimeCatalogFilename">
            <summary>
            The name of the default Runtime Catalog file.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.PreviousContentState">
            <summary>
            The asset content state of a previous build.  This allows detection of deltas with the current build content state.  This will be
            null in standard builds.  This is only set during content update builds.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.#ctor(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Creates a default context object with values taken from the AddressableAssetSettings parameter.
            </summary>
            <param name="settings">The settings object to pull values from.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput.#ctor(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.String)">
            <summary>
            Creates a default context object with values taken from the AddressableAssetSettings parameter.
            </summary>
            <param name="settings">The settings object to pull values from.</param>
            <param name="playerBuildVersion">The player build version.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult">
            <summary>
            Contains information about the status of the build.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult.Duration">
            <summary>
            Duration of build, in seconds.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult.LocationCount">
            <summary>
            The number of addressable assets contained in the build.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult.Error">
            <summary>
            Error that caused the build to fail.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult.OutputPath">
            <summary>
            Path of runtime settings file
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult.FileRegistry">
            <summary>
            Registry of files created during the build
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AddressableAssetBuildResult.CreateResult``1(System.String,System.Int32,System.String)">
            <summary>
            Helper method to create the desired result of a data builder.  This should always be used to create the build result
             with additional details added as needed.  The Result.Duration should always be set at the end of the build
             script in the non-error scenario.
            </summary>
            <param name="settingsPath">Path to the settings.json file (name may not always match that exactly) generated by this build</param>
            <param name="locCount">Number of locations created by this build</param>
            <param name="err">Error string if there were problems with the build.  Defaults to empty</param>
            <typeparam name="TResult">The actual build result created</typeparam>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AddressablesPlayModeBuildResult">
            <summary>
            Build result for entering play mode in the editor.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AddressablesPlayerBuildResult">
            <summary>
            Build result for building the player.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeResultData">
            <summary>
            Represents the data acquired after analyzing Addressable assets.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeResultData.OnAfterDeserialize">
            <summary>
            Retrieves serialized data after a domain reload.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeResultData.OnBeforeSerialize">
            <summary>
            Converts our data to a serialized structure before a domain reload.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule">
            <summary>
            Base class for creating rules to analyze Addressables data.  Use AnalyzeWindow.RegisterNewRule&lt;T&gt;() to register.
             a rule with the GUI window.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.CanFix">
            <summary>
            True if this rule can fix itself.  If child class sets this to true, class must override FixIssues
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.noErrors">
            <summary>
            Represents a state where no errors were found after analyzing Addressables data.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.kDelimiter">
            <summary>
            Delimiter character used in analyze rule string names.  This is used when a rule result needs to display
            as a tree view hierarchy.  A rule result of A:B:C will end up in the tree view with:
             - A
             --- B
             ----- C
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.AnalyzeResult">
            <summary>
            Result data returned by rules.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.AnalyzeResult.resultName">
            <summary>
            Name of result data.  This name uses AnalyzeRule.kDelimiter to signify breaks in the tree display.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.AnalyzeResult.severity">
            <summary>
            Severity of rule result
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.ruleName">
            <summary>
            Display name for rule
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.RefreshAnalysis(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            This method runs the actual analysis for the rule.
            </summary>
            <param name="settings">The settings object to analyze</param>
            <returns>A list of resulting information (warnings, errors, or info)</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.FixIssues(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Fixing method to be run on results of the RefreshAnalysis.  If CanFix returns true, this method must be
            overriden.  It is recommended that RefreshAnalysis caches any data that will be needed to fix.  Fix should
            not rerun RefreshAnalysis before fixing.
            </summary>
            <param name="settings">The settings object to analyze</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AnalyzeRules.AnalyzeRule.ClearAnalysis">
            <summary>
            Clears out the analysis results. When overriding, use to clear rule-specific data as well.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AnalyzeSystem">
            <summary>
            Static system to manage Analyze functionality.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AnalyzeSystem.RegisterNewRule``1">
            <summary>
            Method used to register any custom AnalyzeRules with the AnalyzeSystem.  This replaces calling into the AnalyzeWindow
             directly to remove logic from the GUI.  The recommended pattern is to create
            your rules like so:
            <code>
              class MyRule : AnalyzeRule {}
              [InitializeOnLoad]
              class RegisterMyRule
              {
                  static RegisterMyRule()
                  {
                      AnalyzeSystem.RegisterNewRule&lt;MyRule&gt;();
                  }
              }
            </code>
            </summary>
            <typeparam name="TRule">The rule type.</typeparam>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.AddHashToBundleNameTask">
            <summary>
            The BuildTask used to append the asset hash to the internal bundle name.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.AddHashToBundleNameTask.Version">
            <summary>
            The task version.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.AddHashToBundleNameTask.Run">
            <summary>
            Runs the AddHashToBundleNameTask.
            </summary>
            <returns>Success.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.ExtractDataTask">
            <summary>
            The BuildTask used to extract write data from the build.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.ExtractDataTask.Version">
            <summary>
            The ExtractDataTask version.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.ExtractDataTask.DependencyData">
            <summary>
            Get the injected dependency data of the task.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.ExtractDataTask.WriteData">
            <summary>
            Get the injected write data of the task.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.ExtractDataTask.BuildCache">
            <summary>
            Get the injected build cache of the task.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.ExtractDataTask.Run">
            <summary>
            Runs the ExtractDataTask.  The data for this task is all injected context so no operations are performed in the Run step.
            </summary>
            <returns>Success.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.GenerateLocationListsTask">
            <summary>
            The BuildTask used to create location lists for Addressable assets.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.GenerateLocationListsTask.Version">
            <summary>
            The GenerateLocationListsTask version.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.GenerateLocationListsTask.Run">
            <summary>
            Runs the build task with the injected context.
            </summary>
            <returns>The success or failure ReturnCode</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildPipelineTasks.GenerateLocationListsTask.Run(UnityEditor.AddressableAssets.Build.DataBuilders.IAddressableAssetsBuildContext,UnityEditor.Build.Pipeline.Interfaces.IBundleWriteData)">
            <summary>
            Runs the build task with a give context and write data.
            </summary>
            <param name="aaBuildContext">The addressables build context.</param>
            <param name="writeData">The write data used to generate the location lists.</param>
            <returns>The success or failure ReturnCode</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.BuildUtility">
            <summary>
            Utility class for the Addressables Build Content process.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildUtility.IsEditorAssembly(System.Reflection.Assembly)">
            <summary>
            Determines if the given assembly is an editor assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>Returns true if the assembly is an editor assembly. Returns false otherwise.</returns>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.BuildUtility.EnableCrcCompositeHash">
            <summary>
            Enable to force different hashed file name, when bundles crc are different or built by different PC, Mac, Unity version. <br/>
            Solves issue of AB hash file same but CRC Mismatch. <br/>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildUtility.GetCrcCompositeHash(System.String,System.UInt32,System.Boolean)">
            <summary>
            Get compisite hash, which includes crc and unity version platform
            </summary>
            <param name="hash">The bundle hash.</param>
            <param name="crc">The bundle archive crc.</param>
            <param name="includeUnityVersionPlatform">Whether to include unity version, platform into hash.</param>
            <returns>Calculated hash</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildUtility.GetNameWithHashNaming(UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema.BundleNamingStyle,System.String,System.String,System.String)">
            <summary>
            Creates a new bundle name using its hash and a given naming style.
            </summary>
            <param name="schemaBundleNaming">The bundle naming style.</param>
            <param name="hash">The bundle hash.</param>
            <param name="sourceBundleName">The original bundle name.</param>
            <param name="crc">The bundle archive crc.</param>
            <returns>Returns the new bundle name.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.BuildUtility.CheckModifiedScenesAndAskToSave">
            <summary>
            Used during the build to check for unsaved scenes and provide a user popup if there are any.
            </summary>
            <returns>True if there were no unsaved scenes, or if user hits "Save and Continue" on popup.
            False if any scenes were unsaved, and user hits "Cancel" on popup.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AssetState">
            <summary>
            The given state of an Asset.  Represented by its guid and hash.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AssetState.guid">
            <summary>
            Asset states GUID.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AssetState.hash">
            <summary>
            Asset State hash.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.AssetState.Equals(UnityEditor.AddressableAssets.Build.AssetState)">
            <summary>
            Check if one asset state is equal to another.
            </summary>
            <param name="other">Right hand side of comparision.</param>
            <returns>Returns true if the Asset States are equal to one another.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.CachedAssetState">
            <summary>
            The Cached Asset State of an Addressable Asset.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedAssetState.asset">
            <summary>
            The Asset State.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedAssetState.dependencies">
            <summary>
            The Asset State of all dependencies.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedAssetState.groupGuid">
            <summary>
            The guid for the group the cached asset state belongs to.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedAssetState.bundleFileId">
            <summary>
            The name of the cached asset states bundle file.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedAssetState.data">
            <summary>
            The cached asset state data.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.CachedAssetState.Equals(UnityEditor.AddressableAssets.Build.CachedAssetState)">
            <summary>
            Checks if one cached asset state is equal to another given the asset state and dependency state.
            </summary>
            <param name="other">Right hand side of comparision.</param>
            <returns>Returns true if the cached asset states are equal to one another.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.CachedBundleState">
            <summary>
            Cached state of asset bundles.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedBundleState.bundleFileId">
            <summary>
            The name of the cached asset states bundle file.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.CachedBundleState.data">
            <summary>
            The cached bundle state data.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.AddressablesContentState">
            <summary>
            Data stored with each build that is used to generated content updates.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesContentState.playerVersion">
            <summary>
            The version that the player was built with.  This is usually set to AddressableAssetSettings.PlayerBuildVersion.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesContentState.editorVersion">
            <summary>
            The version of the unity editor used to build the player.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesContentState.cachedInfos">
            <summary>
            Dependency information for all assets in the build that have been marked StaticContent.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesContentState.remoteCatalogLoadPath">
            <summary>
            The path of a remote catalog.  This is the only place the player knows to look for an updated catalog.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.AddressablesContentState.cachedBundles">
            <summary>
            Information about asset bundles created for the build.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.ContentUpdateScript">
            <summary>
            Contains methods used for the content update workflow.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.SaveContentState(System.String,System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},UnityEditor.Build.Pipeline.Interfaces.IDependencyData,System.String,System.String)">
            <summary>
            Save the content update information for a set of AddressableAssetEntry objects.
            </summary>
            <param name="path">File to write content stat info to.  If file already exists, it will be deleted before the new file is created.</param>
            <param name="entries">The entries to save.</param>
            <param name="dependencyData">The raw dependency information generated from the build.</param>
            <param name="playerVersion">The player version to save. This is usually set to AddressableAssetSettings.PlayerBuildVersion.</param>
            <param name="remoteCatalogPath">The server path (if any) that contains an updateable content catalog.  If this is empty, updates cannot occur.</param>
            <returns>True if the file is saved, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.SaveContentState(System.Collections.Generic.List{UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry},System.String,System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},UnityEditor.Build.Pipeline.Interfaces.IDependencyData,System.String,System.String)">
            <summary>
            Save the content update information for a set of AddressableAssetEntry objects.
            </summary>
            <param name="locations">The ContentCatalogDataEntry locations that were built into the Content Catalog.</param>
            <param name="path">File to write content stat info to.  If file already exists, it will be deleted before the new file is created.</param>
            <param name="entries">The entries to save.</param>
            <param name="dependencyData">The raw dependency information generated from the build.</param>
            <param name="playerVersion">The player version to save. This is usually set to AddressableAssetSettings.PlayerBuildVersion.</param>
            <param name="remoteCatalogPath">The server path (if any) that contains an updateable content catalog.  If this is empty, updates cannot occur.</param>
            <returns>True if the file is saved, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.SaveContentState(System.Collections.Generic.List{UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry},System.String,System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},UnityEditor.Build.Pipeline.Interfaces.IDependencyData,System.String,System.String,System.Collections.Generic.List{UnityEditor.AddressableAssets.Build.CachedAssetState})">
            <summary>
            Save the content update information for a set of AddressableAssetEntry objects.
            </summary>
            <param name="locations">The ContentCatalogDataEntry locations that were built into the Content Catalog.</param>
            <param name="path">File to write content stat info to.  If file already exists, it will be deleted before the new file is created.</param>
            <param name="entries">The entries to save.</param>
            <param name="dependencyData">The raw dependency information generated from the build.</param>
            <param name="playerVersion">The player version to save. This is usually set to AddressableAssetSettings.PlayerBuildVersion.</param>
            <param name="remoteCatalogPath">The server path (if any) that contains an updateable content catalog.  If this is empty, updates cannot occur.</param>
            <param name="carryOverCacheState">Cached state that needs to carry over from the previous build.  This mainly affects Content Update.</param>
            <returns>True if the file is saved, false otherwise.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.GetContentStateDataPath(System.Boolean)">
            <summary>
            Gets the path of the cache data from a selected build.
            </summary>
            <param name="browse">If true, the user is allowed to browse for a specific file.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.LoadContentState(System.String)">
            <summary>
            Loads cache data from a specific location
            </summary>
            <param name="contentStateDataPath"></param>
            <returns>The ContentState object.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.BuildContentUpdate(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.String)">
            <summary>
            Builds player content using the player content version from a specified cache file.
            </summary>
            <param name="settings">The settings object to use for the build.</param>
            <param name="contentStateDataPath">The path of the cache data to use.</param>
            <returns>The build operation.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.GatherModifiedEntries(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.String)">
            <summary>
            Get all modified addressable asset entries in groups that have BundledAssetGroupSchema and ContentUpdateGroupSchema with static content enabled.
            This includes any Addressable dependencies that are affected by the modified entries.
            </summary>
            <param name="settings">Addressable asset settings.</param>
            <param name="cacheDataPath">The cache data path.</param>
            <returns>A list of all modified entries and dependencies (list is empty if there are none); null if failed to load cache data.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.GatherModifiedEntriesWithDependencies(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.String)">
            <summary>
            Get a Dictionary of all modified values and their dependencies.  Dependencies will be Addressable and part of a group
            with static content enabled.
            </summary>
            <param name="settings">Addressable asset settings.</param>
            <param name="cachePath">The cache data path.</param>
            <returns>A dictionary mapping explicit changed entries to their dependencies.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.ContentUpdateScript.CreateContentUpdateGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.Collections.Generic.List{UnityEditor.AddressableAssets.Settings.AddressableAssetEntry},System.String)">
            <summary>
            Create a new AddressableAssetGroup with the items and mark it as remote.
            </summary>
            <param name="settings">The settings object.</param>
            <param name="items">The items to move.</param>
            <param name="groupName">The name of the new group.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.IDataBuilderResult">
            <summary>
            The result of IDataBuilder.Build.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.IDataBuilderResult.Duration">
            <summary>
            Duration of the build in seconds.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.IDataBuilderResult.LocationCount">
            <summary>
            The number of addressable assets contained in the build.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.IDataBuilderResult.Error">
            <summary>
            Error string, if any.  If Succeeded is true, this may be null.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.IDataBuilderResult.OutputPath">
            <summary>
            Path of runtime settings file
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.IDataBuilderResult.FileRegistry">
            <summary>
            Registry of files created during the build
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.IDataBuilder">
            <summary>
            Builds objects of type IDataBuilderResult.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.IDataBuilder.Name">
            <summary>
            The name of the builder, used for GUI.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.IDataBuilder.CanBuildData``1">
            <summary>
            Can this builder build the type of data requested.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <returns>True if the build can build it.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.IDataBuilder.BuildData``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <summary>
            Build the data of a specific type.
            </summary>
            <typeparam name="TResult">The data type.</typeparam>
            <param name="builderInput">The builderInput used to build the data.</param>
            <returns>The built data.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.IDataBuilder.ClearCachedData">
            <summary>
            Clears all cached data.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.IAddressableAssetsBuildContext">
            <summary>
            Interface for any Addressables specific context objects to be used in the Scriptable Build Pipeline context store
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext">
            <summary>
            Simple context object for passing data through SBP, between different sections of Addressables code.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.settings">
            <summary>
            The settings object to use.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.Settings">
            <summary>
            The settings object to use.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.runtimeData">
            <summary>
            The current runtime data being built.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.locations">
            <summary>
            The list of catalog locations.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.bundleToAssetGroup">
            <summary>
            Mapping of bundles to asset groups.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.assetGroupToBundles">
            <summary>
            Mapping of asset group to bundles.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.providerTypes">
            <summary>
            Set of provider types needed in this build.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext.assetEntries">
            <summary>
            The list of all AddressableAssetEntry objects.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBundleBuildParameters">
            <summary>
            Custom bundle parameter container that provides custom compression settings per bundle.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBundleBuildParameters.#ctor(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings,System.Collections.Generic.Dictionary{System.String,System.String},UnityEditor.BuildTarget,UnityEditor.BuildTargetGroup,System.String)">
            <summary>
            Create a AddressableAssetsBundleBuildParameters with data needed to determine the correct compression per bundle.
            </summary>
            <param name="aaSettings">The AddressableAssetSettings object to use for retrieving groups.</param>
            <param name="bundleToAssetGroup">Mapping of bundle identifier to guid of asset groups.</param>
            <param name="target">The build target.  This is used by the BundleBuildParameters base class.</param>
            <param name="group">The build target group. This is used by the BundleBuildParameters base class.</param>
            <param name="outputFolder">The path for the output folder. This is used by the BundleBuildParameters base class.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBundleBuildParameters.GetCompressionForIdentifier(System.String)">
            <summary>
            Get the compressions settings for the specified asset bundle.
            </summary>
            <param name="identifier">The identifier of the asset bundle.</param>
            <returns>The compression setting for the asset group.  If the group is not found, the default compression is used.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase">
            <summary>
            Base class for build script assets
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.instanceProviderType">
            <summary>
            The type of instance provider to create for the Addressables system.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.sceneProviderType">
            <summary>
            The type of scene provider to create for the addressables system.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.Name">
            <summary>
            The descriptive name used in the UI.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.BuildData``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <summary>
            Build the specified data with the provided builderInput.  This is the public entry point.
             Child class overrides should use <see cref="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.BuildDataImplementation``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)"/>
            </summary>
            <typeparam name="TResult">The type of data to build.</typeparam>
            <param name="builderInput">The builderInput object used in the build.</param>
            <returns>The build data result.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.BuildDataImplementation``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <summary>
            The implementation of <see cref="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.BuildData``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)"/>.  That is the public entry point,
             this is the home for child class overrides.
            </summary>
            <param name="builderInput">The builderInput object used in the build</param>
            <typeparam name="TResult">The type of data to build</typeparam>
            <returns>The build data result</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.ProcessAllGroups(UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <summary>
            Loops over each group, after doing some data checking.
            </summary>
            <param name="aaContext">The Addressables builderInput object to base the group processing on</param>
            <returns>An error string if there were any problems processing the groups</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.ProcessGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <summary>
            Build processing of an individual group.
            </summary>
            <param name="assetGroup">The group to process</param>
            <param name="aaContext">The Addressables builderInput object to base the group processing on</param>
            <returns>An error string if there were any problems processing the groups</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.CanBuildData``1">
            <summary>
            Used to determine if this builder is capable of building a specific type of data.
            </summary>
            <typeparam name="T">The type of data needed to be built.</typeparam>
            <returns>True if this builder can build this data.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.CreateLocationsForPlayerData(UnityEditor.AddressableAssets.Settings.GroupSchemas.PlayerDataGroupSchema,UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,System.Collections.Generic.List{UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Utility method for creating locations from player data.
            </summary>
            <param name="playerDataSchema">The schema for the group.</param>
            <param name="assetGroup">The group to extract the locations from.</param>
            <param name="locations">The list of created locations to fill in.</param>
            <param name="providerTypes">Any unknown provider types are added to this set in order to ensure they are not stripped.</param>
            <returns>True if any legacy locations were created.  This is used by the build scripts to determine if a legacy provider is needed.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.DeleteFile(System.String)">
            <summary>
            Utility method for deleting files.
            </summary>
            <param name="path">The file path to delete.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.WriteFile(System.String,System.String,UnityEditor.AddressableAssets.Build.FileRegistry)">
            <summary>
            Utility method to write a file.  The directory will be created if it does not exist.
            </summary>
            <param name="path">The path of the file to write.</param>
            <param name="content">The content of the file.</param>
            <param name="registry">The file registry used to track all produced artifacts.</param>
            <returns>True if the file was written.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.ClearCachedData">
            <summary>
            Used to clean up any cached data created by this builder.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptBase.IsDataBuilt">
            <summary>
            Checks to see if the data is built for the given builder.
            </summary>
            <returns>Returns true if the data is built. Returns false otherwise.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode">
            <summary>
            Only saves the guid of the settings asset to PlayerPrefs.  All catalog data is generated directly from the settings as needed.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode.Name">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode.ClearCachedData">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode.IsDataBuilt">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode.ProcessGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode.CanBuildData``1">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptFastMode.BuildDataImplementation``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <inheritdoc />
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode">
            <summary>
            Build scripts used for player builds and running with bundles in the editor.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.Name">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.CanBuildData``1">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.BuildDataImplementation``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.DoBuild``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <summary>
            The method that does the actual building after all the groups have been processed.
            </summary>
            <param name="builderInput">The generic builderInput of the</param>
            <param name="aaContext"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.ProcessGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.ProcessGroupSchema(UnityEditor.AddressableAssets.Settings.AddressableAssetGroupSchema,UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <summary>
            Called per group per schema to evaluate that schema.  This can be an easy entry point for implementing the
             build aspects surrounding a custom schema.  Note, you should not rely on schemas getting called in a specific
             order.
            </summary>
            <param name="schema">The schema to process</param>
            <param name="assetGroup">The group this schema was pulled from</param>
            <param name="aaContext">The general Addressables build builderInput</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.ProcessBundledAssetSchema(UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema,UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <summary>
            The processing of the bundled asset schema.  This is where the bundle(s) for a given group are actually setup.
            </summary>
            <param name="schema">The BundledAssetGroupSchema to process</param>
            <param name="assetGroup">The group this schema was pulled from</param>
            <param name="aaContext">The general Addressables build builderInput</param>
            <returns>The error string, if any.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.ConstructAssetBundleName(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Settings.GroupSchemas.BundledAssetGroupSchema,UnityEngine.Build.Pipeline.BundleDetails,System.String)">
            <summary>
            Creates a name for an asset bundle using the provided information.
            </summary>
            <param name="assetGroup">The asset group.</param>
            <param name="schema">The schema of the group.</param>
            <param name="info">The bundle information.</param>
            <param name="assetBundleName">The base name of the asset bundle.</param>
            <returns>Returns the asset bundle name with the provided information.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.ClearCachedData">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedMode.IsDataBuilt">
            <inheritdoc />
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedPlayMode">
            <summary>
            Uses data built by BuildScriptPacked class.  This script just sets up the correct variables and runs.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedPlayMode.Name">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedPlayMode.ClearCachedData">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedPlayMode.IsDataBuilt">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedPlayMode.CanBuildData``1">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptPackedPlayMode.BuildDataImplementation``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <inheritdoc />
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode">
            <summary>
            Build script for creating virtual asset bundle dat for running in the editor.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode.Name">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode.CanBuildData``1">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode.ClearCachedData">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode.IsDataBuilt">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode.BuildDataImplementation``1(UnityEditor.AddressableAssets.Build.AddressablesDataBuilderInput)">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.DataBuilders.BuildScriptVirtualMode.ProcessGroup(UnityEditor.AddressableAssets.Settings.AddressableAssetGroup,UnityEditor.AddressableAssets.Build.DataBuilders.AddressableAssetsBuildContext)">
            <inheritdoc />
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.FileRegistry">
            <summary>
            Use to contain files created during a build.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.FileRegistry.#ctor">
            <summary>
            Initializes a new file registry instance.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.FileRegistry.GetFilePaths">
            <summary>
            Retrieves all the stored file paths.
            </summary>
            <returns>Returns all file paths as an IEnumerable.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.FileRegistry.AddFile(System.String)">
            <summary>
            Adds a file path to our set of file paths.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.FileRegistry.RemoveFile(System.String)">
            <summary>
            Removes a file path from our set of file paths.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.FileRegistry.GetFilePathForBundle(System.String)">
            <summary>
            Given a bundle name, determine the file path for the bundle.
            </summary>
            <param name="bundleName">The name of the bundle.</param>
            <returns>The full file path.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.FileRegistry.ReplaceBundleEntry(System.String,System.String)">
            <summary>
            Replace an entry in the File Registry with a new bundle name.
            </summary>
            <param name="bundleName">The bundle name to replace.</param>
            <param name="newFileRegistryEntry">The new file registry bundle name.</param>
            <returns>Returns true if a successful replacement occured.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.LinkXmlGenerator">
            <summary>
            This can be used to create a LinkXml for your build.  This will ensure that the desired runtime types are packed into the build.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.LinkXmlGenerator.AddTypes(System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.LinkXmlGenerator.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.LinkXmlGenerator.SetTypeConversion(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.LinkXmlGenerator.Save(System.String)">
            <inheritdoc />
        </member>
        <member name="T:UnityEditor.AddressableAssets.Build.SceneManagerState">
            <summary>
            Serializable object that can be used to save and restore the state of the editor scene manager.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.SceneManagerState.Record(System.String)">
            <summary>
            Record the state of the EditorSceneManager and save to a JSON file.
            </summary>
            <param name="path">The path to save the recorded state.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.SceneManagerState.AddScenesForPlayMode(System.Collections.Generic.List{UnityEditor.EditorBuildSettingsScene})">
            <summary>
            Adds a set of scenes to the scene list for use in editor play mode.
            </summary>
            <param name="playModeScenes">The scenes to add to the editor scenes list.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Build.SceneManagerState.Restore(System.String,System.Boolean)">
            <summary>
            Restore the state of the EditorSceneManager.
            </summary>
            <param name="path">The path to load the state data from.  This file is generated by calling SceneManagerState.Record.</param>
            <param name="restoreSceneManagerSetup">If true, the recorded active scenes are restored. EditorBuildSettings.scenes are always restored.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Diagnostics.ResourcesRecordFileFixed.IsDownLoadOrderFileExisted">
            <summary>
            判断下载顺序列表文件是否存在。
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.Diagnostics.ResourcesRecordFileFixed.OptimizeDownloadOrderFile(System.String)">
            <summary>
            修正下载顺序列表，根据当前catalog刷新列表中的key、去除不存在的key、去除重复key的数据、去除格式错误的数据。
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AddressableAssetsSettingsGroupEditor.GetAllNodes">
            <summary>
            Get all TreeViewItem(T) nodes in TreeView
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.AnalyzeWindow">
            <summary>
            Window used to execute AnalyzeRule sets.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AnalyzeWindow.RegisterNewRule``1">
            <summary>
            Obsolete - please use AnalyzeSystem.RegisterNewRule&lt;TRule&gt;()
            </summary>
            <typeparam name="TRule">The rule type.</typeparam>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceDrawer.ValidateAsset(System.String)">
            <summary>
            Validates that the referenced asset allowable for this asset reference.
            </summary>
            <param name="path">The path to the asset in question.</param>
            <returns>Whether the referenced asset is valid.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.SerializedPropertyExtensions">
            <summary>
            Used to manipulate data from a serialized property.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.SerializedPropertyExtensions.GetActualObjectForSerializedProperty``1(UnityEditor.SerializedProperty,System.Reflection.FieldInfo,System.String@)">
            <summary>
            Used to extract the target object from a serialized property.
            </summary>
            <typeparam name="T">The type of the object to extract.</typeparam>
            <param name="property">The property containing the object.</param>
            <param name="field">The field data.</param>
            <param name="label">The label name.</param>
            <returns>Returns the target object type.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.AssetReferenceSurrogateAttribute">
            <summary>
            Used to restrict a class to only allow items with specific labels.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.GUI.AssetReferenceSurrogateAttribute.TargetType">
            <summary>
            The type of the attribute.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceSurrogateAttribute.#ctor(System.Type)">
            <summary>
            Construct a new AssetReferenceSurrogateAttribute.
            </summary>
            <param name="type">The Type of the class in question.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.AssetReferenceUIRestrictionSurrogate">
            <summary>
            Surrogate to AssetReferenceUIRestriction.
            This surrogate class provides the editor-side implementation of AssetReferenceUIRestriction attribute
            Used to restrict an AssetReference field or property to only allow items with specific labels. This is only enforced through the UI.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUIRestrictionSurrogate.Init(UnityEngine.AssetReferenceUIRestriction)">
            <summary>
            Sets the AssetReferenceUIRestriction for this surrogate
            </summary>
            <param name="initData">To initialize AssetReferenceUIRestriction for surrogate</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUIRestrictionSurrogate.ValidateAsset(UnityEngine.Object)">
            <summary>
            Validates the referenced asset allowable for this asset reference.
            </summary>
            <param name="obj">The Object to validate.</param>
            <returns>Whether the referenced asset is valid.</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.AssetReferenceUILabelRestrictionSurrogate">
            <summary>
            Surrogate to AssetReferenceUILabelRestriction
            This surrogate class provides the editor-side implementation of AssetReferenceUILabelRestriction attribute
            Used to restrict an AssetReference field or property to only allow items wil specific labels. This is only enforced through the UI.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUILabelRestrictionSurrogate.Init(UnityEngine.AssetReferenceUIRestriction)">
            <summary>
            Sets the AssetReferenceUILabelRestriction for this surrogate
            </summary>
            <param name="initData">To initialize AssetReferenceUILabelRestriction field</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUILabelRestrictionSurrogate.ValidateAsset(UnityEngine.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUILabelRestrictionSurrogate.ValidateAsset(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUILabelRestrictionSurrogate.ToString">
            <inheritdoc/>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.AssetReferenceUtility">
            <summary>
            Utility Class
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.AssetReferenceUtility.GetSurrogate(System.Type)">
            <summary>
            Finds surrogate class for an Assembly with a particular TargetType
            </summary>
            <param name="targetType">Target Type to search</param>
            <returns>Type of the surrogate found for the Assembly with a particular Target Type.</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesAddServiceWindow.Initialize(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Initialize the dialog for the given <see cref="T:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings"/>
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesListTreeView.SelectRow(System.Int32)">
            <summary>
            Selects a row based on its index if the given index is valid.
            </summary>
            <param name="index">The index of the row.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.HostingServicesWindow">
            <summary>
            Configuration GUI for <see cref="T:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager" />
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.ServiceIndex">
            <summary>
            Returns the index of the currently selected hosting service.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.Show(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Show the <see cref="T:UnityEditor.AddressableAssets.GUI.HostingServicesWindow"/>, initialized with the given <see cref="T:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings"/>
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.AddService(System.Int32,System.String)">
            <summary>
            Add a new hosting service to the HostingServicesManager. The service at index <paramref name="typeIndex"/> in ServiceTypes must implement the <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> interface, or an <see cref="T:System.ArgumentException"/> is thrown.
            </summary>
            <param name="typeIndex">The index of the service stored in ServiceTypes. The service at this index must implement <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/></param>
            <param name="serviceName">A descriptive name for the new service instance.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.RemoveService(UnityEditor.AddressableAssets.HostingServices.IHostingService,System.Boolean)">
            <summary>
            Add a hosting service to the removal queue.
            </summary>
            <param name="svc">The service type to be removed.</param>
            <param name="showDialog">Indicates whether or not a warning dialogue box is shown.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.LogFormat(UnityEngine.LogType,UnityEngine.Object,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.LogException(System.Exception,UnityEngine.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.OnBeforeSerialize">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.HostingServicesWindow.OnAfterDeserialize">
            <inheritdoc/>
        </member>
        <member name="T:UnityEditor.AddressableAssets.GUI.LabelWindow">
            <summary>
            Configuration GUI for addressable labels in <see cref="T:UnityEditor.AddressableAssets.Settings" />
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.GUI.LabelWindow.Intialize(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Creates a new LabelWindow instance and retrieves label names from the given settings object.
            </summary>
            <param name="settings">The settings object.</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.HostingServices.BaseHostingService">
            <summary>
            Base class for hosting services.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.HostingServiceContentRoots">
            <summary>
            List of content roots for hosting service.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.ProfileVariables">
            <summary>
            Dictionary of profile variables defined by the hosting service.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.IsHostingServiceRunning">
            <summary>
            Gets the current running status of the hosting service.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.StartHostingService">
            <summary>
            Starts the hosting service.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.StopHostingService">
            <summary>
            Stops the hosting service.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.OnGUI">
            <summary>
            Render the hosting service GUI.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.Logger">
            <summary>
            Get and set the logger for the hosting service.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.DisambiguateProfileVar(System.String)">
            <summary>
            Decodes a profile variable lookup ID based on string key
            </summary>
            <param name="key">the key to look up </param>
            <returns>The variable lookup ID.</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.DescriptiveName">
            <inheritdoc/>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.InstanceId">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.EvaluateProfileString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.OnBeforeSerialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.OnAfterDeserialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.LogFormat(UnityEngine.LogType,System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Logger specifically on this service.  <see cref="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.Logger"/>
            </summary>
            <param name="logType">Severity of the log</param>
            <param name="format">The base string</param>
            <param name="args">The parameters to be formatted into the base string</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.Log(System.String,System.Object[])">
            <summary>
            Logs an info severity formatted message to the Logger specifically on this service.  <see cref="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.Logger"/>
            </summary>
            <param name="format">The base string</param>
            <param name="args">The parameters to be formatted into the base string</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.LogWarning(System.String,System.Object[])">
            <summary>
            Logs an warning severity formatted message to the Logger specifically on this service.  <see cref="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.Logger"/>
            </summary>
            <param name="format">The base string</param>
            <param name="args">The parameters to be formatted into the base string</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.LogError(System.String,System.Object[])">
            <summary>
            Logs an error severity formatted message to the Logger specifically on this service.  <see cref="P:UnityEditor.AddressableAssets.HostingServices.BaseHostingService.Logger"/>
            </summary>
            <param name="format">The base string</param>
            <param name="args">The parameters to be formatted into the base string</param>
        </member>
        <member name="T:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager">
            <summary>
            Manages the hosting services.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.Logger">
            <summary>
            Direct logging output of all managed services
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.BatchMode(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Static method for use in starting up the HostingServicesManager in batch mode.
            </summary>
            <param name="settings"> </param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.BatchMode">
            <summary>
            Static method for use in starting up the HostingServicesManager in batch mode. This method
            without parameters will find and use the default <see cref="T:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings"/> object.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.GlobalProfileVariables">
            <summary>
            Key/Value pairs valid for profile variable substitution
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.IsInitialized">
            <summary>
            Indicates whether or not this HostingServiceManager is initialized
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.HostingServices">
            <summary>
            Return an enumerable list of all configured <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> objects
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.RegisteredServiceTypes">
            <summary>
            Get an array of all <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> types that have been used by the manager, or are known
            built-in types available for use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.NextInstanceId">
            <summary>
            The id value that will be assigned to the next <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> add to the manager.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.#ctor">
            <summary>
            Create a new <see cref="T:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager"/>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.Initialize(UnityEditor.AddressableAssets.Settings.AddressableAssetSettings)">
            <summary>
            Initialize manager with the given <see cref="T:UnityEditor.AddressableAssets.Settings.AddressableAssetSettings"/> object.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.StopAllServices">
            <summary>
            Calls <see cref="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.StopHostingService"/> on all managed <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> instances
            where <see cref="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.IsHostingServiceRunning"/> is true
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.StartAllServices">
            <summary>
            Calls <see cref="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.StartHostingService"/> on all managed <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> instances
            where <see cref="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.IsHostingServiceRunning"/> is false
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.AddHostingService(System.Type,System.String)">
            <summary>
            Add a new hosting service instance of the given type. The <paramref name="serviceType"/> must implement the
            <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> interface, or an <see cref="T:System.ArgumentException"/> is thrown.
            </summary>
            <param name="serviceType">A <see cref="T:System.Type"/> object for the service. Must implement <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/></param>
            <param name="name">A descriptive name for the new service instance.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.RemoveHostingService(UnityEditor.AddressableAssets.HostingServices.IHostingService)">
            <summary>
            Stops the given <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/>, unregisters callbacks, and removes it from management. This
            function does nothing if the service is not being managed by this <see cref="T:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager"/>
            </summary>
            <param name="svc"></param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.OnEnable">
            <summary>
            Should be called by parent <see cref="T:UnityEngine.ScriptableObject"/> instance OnEnable method
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.OnDisable">
            <summary>
            Should be called by parent <see cref="T:UnityEngine.ScriptableObject"/> instance OnDisable method
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.OnBeforeSerialize">
            <summary> Ensure object is ready for serialization, and calls <see cref="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.OnBeforeSerialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)"/> methods
            on all managed <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> instances
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.OnAfterDeserialize">
            <summary> Ensure object is ready for serialization, and calls <see cref="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.OnBeforeSerialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)"/> methods
            on all managed <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> instances
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HostingServicesManager.RefreshGlobalProfileVariables">
            <summary>
            Refresh values in the global profile variables table.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.HostingServices.HttpHostingService">
            <summary>
            HTTP implementation of hosting service.
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ResultCode">
            <summary>
            Options for standard Http result codes
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ResultCode.Ok">
            <summary>
            Use to indicate that the request succeeded.
            </summary>
        </member>
        <member name="F:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ResultCode.NotFound">
            <summary>
            Use to indicate that the requested resource could not be found.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.MyHttpListener">
            <summary>
            The actual Http listener used by this service
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.HostingServicePort">
            <summary>
            The port number on which the service is listening
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.IsHostingServiceRunning">
            <inheritdoc/>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.HostingServiceContentRoots">
            <inheritdoc/>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ProfileVariables">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.#ctor">
            <summary>
            Create a new <see cref="T:UnityEditor.AddressableAssets.HostingServices.HttpHostingService"/>
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.StartHostingService">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.StopHostingService">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.OnGUI">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.OnBeforeSerialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.OnAfterDeserialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ResetListenPort(System.Int32)">
            <summary>
            Listen on a new port then next time the server starts. If the server is already running, it will be stopped
            and restarted automatically.
            </summary>
            <param name="port">Specify a port to listen on. Default is 0 to choose any open port</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ConfigureHttpListener">
            <summary>
            Handles any configuration necessary for <see cref="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.MyHttpListener"/> before listening for connections.
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.HandleRequest(System.IAsyncResult)">
            <summary>
            Asynchronous callback to handle a client connection request on <see cref="P:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.MyHttpListener"/>. This method is
            recursive in that it will call itself immediately after receiving a new incoming request to listen for the
            next connection.
            </summary>
            <param name="ar">Asynchronous result from previous request. Pass null to listen for an initial request</param>
            <exception cref="T:System.ArgumentOutOfRangeException">thrown when the request result code is unknown</exception>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.FindFileInContentRoots(System.String)">
            <summary>
            Searches for the given relative path within the configured content root directores.
            </summary>
            <param name="relativePath"></param>
            <returns>The full system path to the file if found, or null if file could not be found</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.ReturnFile(System.Net.HttpListenerContext,System.String,System.Int32)">
            <summary>
            Sends a file to the connected HTTP client
            </summary>
            <param name="context"></param>
            <param name="filePath"></param>
            <param name="readBufferSize"></param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.Return404(System.Net.HttpListenerContext)">
            <summary>
            Sets the status code to 404 on the given <c>HttpListenerContext</c> object.
            </summary>
            <param name="context">The object to modify.</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.IsPortAvailable(System.Int32)">
            <summary>
            Tests to see if the given port # is already in use
            </summary>
            <param name="port">port number to test</param>
            <returns>true if there is not a listener on the port</returns>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.HttpHostingService.GetAvailablePort">
            <summary>
            Find an open network listen port on the local system
            </summary>
            <returns>a system assigned port, or 0 if none are available</returns>
        </member>
        <member name="T:UnityEditor.AddressableAssets.HostingServices.IHostingService">
            <summary>
            <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> implementations serve Addressable content from the Unity Editor to players running
            locally or on devices with network access to the Editor.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.HostingServiceContentRoots">
            <summary>
            Get the list of root directories being served by this hosting service
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.ProfileVariables">
            <summary>
            Get a map of all profile variables and their current values
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.IsHostingServiceRunning">
            <summary>
            Get a boolean that indicates if this hosting service is running
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.StartHostingService">
            <summary>
            Start the hosting service
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.StopHostingService">
            <summary>
            Stop the hosting service
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.OnBeforeSerialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)">
            <summary>
            Called by the HostingServicesManager before a domain reload, giving the hosting service
            an opportunity to persist state information.
            </summary>
            <param name="dataStore">A key/value pair data store for use in persisting state information</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.OnAfterDeserialize(UnityEditor.AddressableAssets.Settings.KeyDataStore)">
            <summary>
            Called immediatley following a domain reload by the HostingServicesManager, for restoring state information
            after the service is recreated.
            </summary>
            <param name="dataStore">A key/value pair data store for use in restoring state information</param>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.EvaluateProfileString(System.String)">
            <summary>
            Expand special variables from Addressable profiles
            </summary>
            <param name="key">Key name to match</param>
            <returns>replacement string value for key, or null if no match</returns>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.Logger">
            <summary>
            The ILogger instance to use for debug log output
            </summary>
        </member>
        <member name="M:UnityEditor.AddressableAssets.HostingServices.IHostingService.OnGUI">
            <summary>
            Draw configuration GUI elements
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.DescriptiveName">
            <summary>
            Set by the HostingServicesManager, primarily used to disambiguate multiple instances of the same service
            in the GUI.
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingService.InstanceId">
            <summary>
            uniquely identifies this service within the scope of the HostingServicesManager
            </summary>
        </member>
        <member name="T:UnityEditor.AddressableAssets.HostingServices.IHostingServiceConfigurationProvider">
            <summary>
            Interface for providing configuration data for <see cref="T:UnityEditor.AddressableAssets.HostingServices.IHostingService"/> implementations
            </summary>
        </member>
        <member name="P:UnityEditor.AddressableAssets.HostingServices.IHostingServiceConfigurationProvider.HostingServicesContentRoot">
            <summary>
            Returns the Hosting Service content root path for the given <see cref="T:UnityEditor.AddressableAssets.Settings.AddressableAssetGroup"/>
            </summary>
        </member>
        <member name="T:AddressablesPlayerBuildProcessor">
            <summary>
            Maintains Addresssables build data when processing a player build.
            </summary>
        </member>
        <member name="P:AddressablesPlayerBuildProcessor.callbackOrder">
            <summary>
            Returns the player build processor callback order.
            </summary>
        </member>
        <member name="M:AddressablesPlayerBuildProcessor.OnPostprocessBuild(UnityEditor.Build.Reporting.BuildReport)">
            <inheritdoc />
        </member>
        <member name="M:AddressablesPlayerBuildProcessor.OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport)">
            <inheritdoc />
        </member>
        <member name="T:RevertUnchangedAssetsToPreviousAssetState">
            <summary>
            RevertUnchangedAssetsToPreviousAssetState uses the asset state from the previous build to determine if any assets
            need to use their previous settings or use the newly build data.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.InvalidKeyException">
            <summary>
            Exception to encapsulate invalid key errors.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.InvalidKeyException.Key">
            <summary>
            The key used to generate the exception.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.InvalidKeyException.Type">
            <summary>
            The type of the key used to generate the exception.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.InvalidKeyException.#ctor(System.Object)">
            <summary>
            Construct a new InvalidKeyException.
            </summary>
            <param name="key">The key that caused the exception.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.InvalidKeyException.#ctor(System.Object,System.Type)">
            <summary>
            Construct a new InvalidKeyException.
            </summary>
            <param name="key">The key that caused the exception.</param>
            <param name="type">The type of the key that caused the exception.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.InvalidKeyException.#ctor">
            <inheritdoc cref="T:UnityEngine.AddressableAssets.InvalidKeyException"/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.InvalidKeyException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.InvalidKeyException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.InvalidKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.AddressableAssets.InvalidKeyException.Message">
            <summary>
            Stores information about the exception.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.EDownloadState">
            <summary>
            后台下载状态
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.EDownloadState.None">
            <summary>
            空状态
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.EDownloadState.Initializing">
            <summary>
            初始化、检查中
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.EDownloadState.Downloading">
            <summary>
            正在下载中
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.EDownloadState.Completed">
            <summary>
            下载完成
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.EDownloadState.CompletedWithError">
            <summary>
            下载完成，但存在错误
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ConcurrencyOptions">
            <summary>
            后台下载DownloadAll并发参数：<br/>  
            `MaxGlobalActive` 全局最大连接数，只有当前全局连接数小于此设定值才继续下载。 推荐值 3~10 。 默认0 - 不限制。<br/>  
            `MaxNum` 并发请求数。 推荐值 3~5。 默认0、或1 - 不并发。<br/>  
            `MaxSizeKB` 多个并发的文件大小限制。 推荐值 2048 - 即并发任务大小超过2048KB时不增加并发、只能单独下载。 默认0 - 不限制。<br/>  
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ConcurrencyOptions.MaxGlobalActiveViaLAN">
            <summary>
            最大全局当前连接数，只有当前全局下载连接数（包括其他逻辑主动下载的）小于此设定值才继续下载。 Wifi下推荐值 5~10 。 默认0 - 不限制。<br/>  
            对应局域网和Wifi网络 (ReachableViaLocalAreaNetwork)
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ConcurrencyOptions.MaxRequestNumViaLAN">
            <summary>
            并发请求数。最多并发RequestNum个请求。 Wifi下推荐值 2~5 左右。 默认0、或1 - 不并发。<br/>  
            对应局域网和Wifi网络 (ReachableViaLocalAreaNetwork)
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ConcurrencyOptions.MaxSizeKBViaLAN">
            <summary>
            多个并发的文件大小限制。并发任务大小超过SizeKB时不增加并发、只能单独下载。 Wifi下推荐值 2048以上。 默认0 - 不限制。<br/>  
            对应局域网和Wifi网络 (ReachableViaLocalAreaNetwork)
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ConcurrencyOptions.MaxGlobalActiveViaMobile">
            <summary>
            全局最大连接数，只有当前全局连接数小于此设定值才继续下载。 推荐值 3~5 。 默认0 - 不限制。<br/>  
            对应移动网络 (ReachableViaCarrierDataNetwork)
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ConcurrencyOptions.MaxRequestNumViaMobile">
            <summary>
            并发请求数。最多并发RequestNum个请求。 推荐值 0~3 左右。 默认0、或1 - 不并发。<br/>  
            对应移动网络 (ReachableViaCarrierDataNetwork)
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ConcurrencyOptions.MaxSizeKBViaMobile">
            <summary>
            多个并发的文件大小限制。并发任务大小超过SizeKB时不增加并发、只能单独下载。 推荐值 512。 默认0 - 不限制。<br/>  
            对应移动网络 (ReachableViaCarrierDataNetwork)
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.DownloadSpeedStatsData">
            <summary>
            下载速度统计数据。
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.Mode">
            <summary>
            当前统计模式
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.DownloadSpeedStatsData.IsValid">
            <summary>
            是否有效数据。 当前统计模式有效，且所统计时段内存在下载任务才有效，例如：有任意下载请求开始、下载进度更新、下载完成。
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.Bytes">
            <summary>
            下载字节数
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.Duration">
            <summary>
            下载时长，单位：秒。（只计算实际下载中的时间，不含空闲）
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.AverageSpeed">
            <summary>
            下载平均速度，单位：字节数每秒。（只计算实际下载时，不含空闲）
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.RequestCount">
            <summary>
            发起请求数
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.DoneCount">
            <summary>
            完成数，包括失败。
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.DownloadSpeedStatsData.ErrorCount">
            <summary>
            下载错误的任务数。
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.DownloadSpeedStatsData.IsCurrentModeValid">
            <summary>
            是否当前统计模式有效
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.AddressableAssets.EDownloadSpeedStatsMode">
            <summary>
            下载速度统计模式，默认`None`关闭统计。
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.EDownloadSpeedStatsInterval">
            <summary>
            下载速度统计间隔
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Addressables">
            <summary>
            Entry point for Addressable API, this provides a simpler interface than using ResourceManager directly as it assumes string address type.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.ResourceManager">
            <summary>
            Stores the ResourceManager associated with this Addressables instance.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.InstanceProvider">
            <summary>
            The Instance Provider used by the Addressables System.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ResolveInternalId(System.String)">
            <summary>
            Used to resolve a string using addressables config values
            </summary>
            <param name="id">The internal id to resolve.</param>
            <returns>Returns the string that the internal id represents.</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.InternalIdTransformFunc">
            <summary>
            Functor to transform internal ids before being used by the providers.
            See the [TransformInternalId](../manual/TransformInternalId.html) documentation for more details.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Addressables.MergeMode">
            <summary>
            Options for merging the results of requests.
            If keys (A, B) mapped to results ([1,2,4],[3,4,5])...
             - UseFirst (or None) takes the results from the first key
             -- [1,2,4]
             - Union takes results of each key and collects items that matched any key.
             -- [1,2,3,4,5]
             - Intersection takes results of each key, and collects items that matched every key.
             -- [4]
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.MergeMode.None">
            <summary>
            Use to indicate that no merge should occur. The first set of results will be used.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.MergeMode.UseFirst">
            <summary>
            Use to indicate that the merge should take the first set of results.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.MergeMode.Union">
            <summary>
            Use to indicate that the merge should take the union of the results.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.MergeMode.Intersection">
            <summary>
            Use to indicate that the merge should take the intersection of the results.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.kAddressablesRuntimeDataPath">
            <summary>
            The name of the PlayerPrefs value used to set the path to load the addressables runtime data file.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.StreamingAssetsSubFolder">
            <summary>
            The subfolder used by the Addressables system for its initialization data.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.BuildPath">
            <summary>
            The path used by the Addressables system for its initialization data.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.PlayerBuildDataPath">
            <summary>
            The path that addressables player data gets copied to during a player build.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.RuntimePath">
            <summary>
            The path used by the Addressables system to load initialization data.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.ResourceLocators">
            <summary>
            Gets the collection of configured <see cref="T:UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator"/> objects. Resource Locators are used to find <see cref="T:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation"/> objects from user-defined typed keys.
            </summary>
            <value>The resource locators collection.</value>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Log(System.String)">
            <summary>
            Debug.Log wrapper method that is contional on the ADDRESSABLES_LOG_ALL symbol definition.  This can be set in the Player preferences in the 'Scripting Define Symbols'.
            </summary>
            <param name="msg">The msg to log</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LogFormat(System.String,System.Object[])">
            <summary>
            Debug.LogFormat wrapper method that is contional on the ADDRESSABLES_LOG_ALL symbol definition.  This can be set in the Player preferences in the 'Scripting Define Symbols'.
            </summary>
            <param name="format">The string with format tags.</param>
            <param name="args">The args used to fill in the format tags.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LogWarning(System.String)">
            <summary>
            Debug.LogWarning wrapper method.
            </summary>
            <param name="msg">The msg to log</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LogWarningFormat(System.String,System.Object[])">
            <summary>
            Debug.LogWarningFormat wrapper method.
            </summary>
            <param name="format">The string with format tags.</param>
            <param name="args">The args used to fill in the format tags.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LogError(System.String)">
            <summary>
            Debug.LogError wrapper method.
            </summary>
            <param name="msg">The msg to log</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LogException(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Exception)">
            <summary>
            Debug.LogException wrapper method.
            </summary>
            <param name="op">The operation handle.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LogErrorFormat(System.String,System.Object[])">
            <summary>
            Debug.LogErrorFormat wrapper method.
            </summary>
            <param name="format">The string with format tags.</param>
            <param name="args">The args used to fill in the format tags.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Initialize">
            <summary>
            Initialize Addressables system.  Addressables will be initialized on the first API call if this is not called explicitly.
            </summary>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InitializeAsync">
            <summary>
            Initialize Addressables system.  Addressables will be initialized on the first API call if this is not called explicitly.
            See the [InitializeAsync](../manual/InitializeAsync.html) documentation for more details.
            </summary>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InitializeDirect">
            <summary>
            同步Initialize初始化Addressables系统。
            </summary>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetInitializeResultStatus">
            <summary>
            获取Initialize初始化的结果状态。 兼容异步、同步的初始化。 <br/>
            See also: <see cref="M:UnityEngine.AddressableAssets.Addressables.InitializeAsync"/>, <see cref="M:UnityEngine.AddressableAssets.Addressables.InitializeDirect"/>
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.HasStartedInitialize">
            <summary>
            是否开始过 Addressables Initialize. 注：不仅包括手动执行`Initialize`方法，任何Addressables加载功能都能触发`Initialize`.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadContentCatalog(System.String,System.String)">
            <summary>
            Additively load catalogs from runtime data.  The settings are not used.
            </summary>
            <param name="catalogPath">The path to the runtime data.</param>
            <param name="providerSuffix">This value, if not null or empty, will be appended to all provider ids loaded from this data.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadContentCatalogAsync(System.String,System.String)">
            <summary>
            Additively load catalogs from runtime data.  In order for content catalog caching to work properly the catalog json file
            should have a .hash file associated with the catalog.  This hash file will be used to determine if the catalog
            needs to be updated or not.  If no .hash file is provided, the catalog will be loaded from the specified path every time.
            See the [LoadContentCatalogAsync](../manual/LoadContentCatalogAsync.html) documentation for more details.
            </summary>
            <param name="catalogPath">The path to the runtime data.</param>
            <param name="providerSuffix">This value, if not null or empty, will be appended to all provider ids loaded from this data.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadContentCatalogAsync(System.String,System.Boolean,System.String)">
            <summary>
            Additively load catalogs from runtime data.  In order for content catalog caching to work properly the catalog json file
            should have a .hash file associated with the catalog.  This hash file will be used to determine if the catalog
            needs to be updated or not.  If no .hash file is provided, the catalog will be loaded from the specified path every time.
            See the [LoadContentCatalogAsync](../manual/LoadContentCatalogAsync.html) documentation for more details.
            </summary>
            <param name="catalogPath">The path to the runtime data.</param>
            <param name="autoReleaseHandle">If true, the async operation handle will be automatically released on completion.</param>
            <param name="providerSuffix">This value, if not null or empty, will be appended to all provider ids loaded from this data.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.InitializationOperation">
            <summary>
            Initialization operation.  You can register a callback with this if you need to run code after Addressables is ready.  Any requests made before this operaton completes will automatically cahin to its result.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAsset``1(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Load a single asset
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="location">The location of the asset.</param>
            <returns>Returns the load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAsset``1(System.Object)">
            <summary>
            Load a single asset
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="key">The key of the location of the asset.</param>
            <returns>Returns the load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetAsync``1(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Load a single asset
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="location">The location of the asset.</param>
            <returns>Returns the load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetAsync``1(System.Object)">
            <summary>
            Load a single asset
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="key">The key of the location of the asset.</param>
            <returns>Returns the load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResource``1(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            同步读取asset
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="location">The location of the asset.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResource``1(System.Object)">
            <summary>
            同步读取asset
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="key">The key of the location of the asset.</param>
            <returns>Returns the object.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResources``1(System.Object)">
            <summary>
            同步读取复数个assets
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="key">The key of the location of the asset.</param>
            <returns>Returns the list of objects .</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResources``1(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            同步读取复数个assets
            </summary>
            <param name="location">The location of the asset.</param>
            <returns>Returns the list of objects .</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResources``1(System.Collections.Generic.IList{System.Object})">
            <summary>
            同步读取复数个assets
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="keys">List of keys for the locations.</param>
            <returns>Returns the list of objects .</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResources``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation})">
            <summary>
            同步读取复数个assets
            </summary>
            <typeparam name="TObject">The type of the asset.</typeparam>
            <param name="locations">The location of the asset.</param>
            <returns>Returns the list of objects .</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResourceLocations(System.Collections.Generic.IList{System.Object},UnityEngine.AddressableAssets.Addressables.MergeMode,System.Type)">
            <summary>
            Loads the resource locations specified by the keys.
            The method will always return success, with a valid IList of results. If nothing matches keys, IList will be empty
            </summary>
            <param name="keys">The set of keys to use.</param>
            <param name="mode">The mode for merging the results of the found locations.</param>
            <param name="type">A type restriction for the lookup.  Only locations of the provided type (or derived type) will be returned.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResourceLocationsAsync(System.Collections.Generic.IList{System.Object},UnityEngine.AddressableAssets.Addressables.MergeMode,System.Type)">
            <summary>
            Loads the resource locations specified by the keys.
            The method will always return success, with a valid IList of results. If nothing matches keys, IList will be empty
            See the [LoadResourceLocations](../manual/LoadResourceLocations.html) documentation for more details.
            </summary>
            <param name="keys">The set of keys to use.</param>
            <param name="mode">The mode for merging the results of the found locations.</param>
            <param name="type">A type restriction for the lookup.  Only locations of the provided type (or derived type) will be returned.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResourceLocationsAsync(System.Collections.IEnumerable,UnityEngine.AddressableAssets.Addressables.MergeMode,System.Type)">
            <summary>
            Loads the resource locations specified by the keys.
            The method will always return success, with a valid IList of results. If nothing matches keys, IList will be empty
            See the [LoadResourceLocations](../manual/LoadResourceLocations.html) documentation for more details.
            </summary>
            <param name="keys">The set of keys to use.</param>
            <param name="mode">The mode for merging the results of the found locations.</param>
            <param name="type">A type restriction for the lookup.  Only locations of the provided type (or derived type) will be returned.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResourceLocations(System.Object,System.Type)">
            <summary>
            Request the locations for a given key.
            The method will always return success, with a valid IList of results. If nothing matches key, IList will be empty
            </summary>
            <param name="key">The key for the locations.</param>
            <param name="type">A type restriction for the lookup.  Only locations of the provided type (or derived type) will be returned.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadResourceLocationsAsync(System.Object,System.Type)">
            <summary>
            Request the locations for a given key.
            The method will always return success, with a valid IList of results. If nothing matches key, IList will be empty
            See the [LoadResourceLocations](../manual/LoadResourceLocations.html) documentation for more details.
            </summary>
            <param name="key">The key for the locations.</param>
            <param name="type">A type restriction for the lookup.  Only locations of the provided type (or derived type) will be returned.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssets``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Action{``0})">
            <summary>
            Load multiple assets
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="locations">The locations of the assets.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Action{``0})">
            <summary>
            Load multiple assets, based on list of locations provided.
            If any fail, all successful loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="locations">The locations of the assets.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Action{``0},System.Boolean)">
            <summary>
            Load multiple assets, based on list of locations provided.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="locations">The locations of the assets.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <param name="releaseDependenciesOnFailure">
            If all matching locations succeed, this parameter is ignored.
            When true, if any matching location fails, all loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            When false, if any matching location fails, the returned .Result will be an IList of size equal to the number of locations attempted.  Any failed location will
            correlate to a null in the IList, while successful loads will correlate to a TObject in the list. The .Status will still be Failed.
            When true, op does not need to be released if anything fails, when false, it must always be released.
            </param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssets``1(System.Collections.Generic.IList{System.Object},System.Action{``0},UnityEngine.AddressableAssets.Addressables.MergeMode)">
            <summary>
            Load mutliple assets
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="keys">List of keys for the locations.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Collections.Generic.IList{System.Object},System.Action{``0},UnityEngine.AddressableAssets.Addressables.MergeMode)">
            <summary>
            Load multiple assets.
            Each key in the provided list will be translated into a list of locations.  Those many lists will be combined
            down to one based on the provided MergeMode.
            If any locations from the final list fail, all successful loads and dependencies will be released.  The returned
            .Result will be null, and .Status will be Failed.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="keys">List of keys for the locations.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Collections.IEnumerable,System.Action{``0},UnityEngine.AddressableAssets.Addressables.MergeMode)">
            <summary>
            Load multiple assets.
            Each key in the provided list will be translated into a list of locations.  Those many lists will be combined
            down to one based on the provided MergeMode.
            If any locations from the final list fail, all successful loads and dependencies will be released.  The returned
            .Result will be null, and .Status will be Failed.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="keys">List of keys for the locations.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Collections.Generic.IList{System.Object},System.Action{``0},UnityEngine.AddressableAssets.Addressables.MergeMode,System.Boolean)">
            <summary>
            Load multiple assets.
            Each key in the provided list will be translated into a list of locations.  Those many lists will be combined
            down to one based on the provided MergeMode.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <param name="keys">IEnumerable set of keys for the locations.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <param name="releaseDependenciesOnFailure">
            If all matching locations succeed, this parameter is ignored.
            When true, if any matching location fails, all loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            When false, if any matching location fails, the returned .Result will be an IList of size equal to the number of locations attempted.  Any failed location will
            correlate to a null in the IList, while successful loads will correlate to a TObject in the list. The .Status will still be Failed.
            When true, op does not need to be released if anything fails, when false, it must always be released.
            </param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Collections.IEnumerable,System.Action{``0},UnityEngine.AddressableAssets.Addressables.MergeMode,System.Boolean)">
            <summary>
            Load multiple assets.
            Each key in the provided list will be translated into a list of locations.  Those many lists will be combined
            down to one based on the provided MergeMode.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <param name="keys">IEnumerable set of keys for the locations.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <param name="releaseDependenciesOnFailure">
            If all matching locations succeed, this parameter is ignored.
            When true, if any matching location fails, all loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            When false, if any matching location fails, the returned .Result will be an IList of size equal to the number of locations attempted.  Any failed location will
            correlate to a null in the IList, while successful loads will correlate to a TObject in the list. The .Status will still be Failed.
            When true, op does not need to be released if anything fails, when false, it must always be released.
            </param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssets``1(System.Object,System.Action{``0})">
            <summary>
            Load mutliple assets
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="key">Key for the locations.</param>
            <param name="callback">Callback Action that is called per load operation.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Object,System.Action{``0})">
            <summary>
            Load all assets that match the provided key.
            If any fail, all successful loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="key">Key for the locations.</param>
            <param name="callback">Callback Action that is called per load operation (per loaded asset).</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadAssetsAsync``1(System.Object,System.Action{``0},System.Boolean)">
            <summary>
            Load all assets that match the provided key.
            See the [Loading Addressable Assets](../manual/LoadingAddressableAssets.html) documentation for more details.
            </summary>
            <typeparam name="TObject">The type of the assets.</typeparam>
            <param name="key">Key for the locations.</param>
            <param name="callback">Callback Action that is called per load operation (per loaded asset).</param>
            <param name="releaseDependenciesOnFailure">
            If all matching locations succeed, this parameter is ignored.
            When true, if any matching location fails, all loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            When false, if any matching location fails, the returned .Result will be an IList of size equal to the number of locations attempted.  Any failed location will
            correlate to a null in the IList, while successful loads will correlate to a TObject in the list. The .Status will still be Failed.
            When true, op does not need to be released if anything fails, when false, it must always be released.
            </param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.FindLoadedObjectHandle(UnityEngine.Object)">
            <summary>
            Find handle of loaded object. Check handle is valid if you use the handle.
            </summary>
            <param name="obj"></param>
            <returns>The operation handle of the object</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.FindLoadedSceneHandle(UnityEngine.ResourceManagement.ResourceProviders.SceneInstance)">
            <summary>
            Find handle of loaded scene. Check handle is valid if you use the handle.
            </summary>
            <param name="scene"></param>
            <returns>The operation handle of the scene</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Release``1(``0)">
            <summary>
            Release asset.
            </summary>
            <typeparam name="TObject">The type of the object being released</typeparam>
            <param name="obj">The asset to release.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Release``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            Release the operation and its associated resources.
            </summary>
            <typeparam name="TObject">The type of the AsyncOperationHandle being released</typeparam>
            <param name="handle">The operation handle to release.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Release(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Release the operation and its associated resources.
            </summary>
            <param name="handle">The operation handle to release.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ReleaseInstance(UnityEngine.GameObject)">
            <summary>
            Releases and destroys an object that was created via Addressables.InstantiateAsync.
            </summary>
            <param name="instance">The GameObject instance to be released and destroyed.</param>
            <returns>Returns true if the instance was successfully released.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ReleaseInstance(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Releases and destroys an object that was created via Addressables.InstantiateAsync.
            </summary>
            <param name="handle">The handle to the game object to destroy, that was returned by InstantiateAsync.</param>
            <returns>Returns true if the instance was successfully released.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ReleaseInstance(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.GameObject})">
            <summary>
            Releases and destroys an object that was created via Addressables.InstantiateAsync.
            </summary>
            <param name="handle">The handle to the game object to destroy, that was returned by InstantiateAsync.</param>
            <returns>Returns true if the instance was successfully released.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeSync(System.Object)">
            <summary>
            同步接口：确认所需下载的大小 (Bytes)，包括其依赖。  <br/>  
            注：已全部下载至本地文件、已缓存时，返回大小是 0.  <br/>  
            注意：key不存在、操作失败时返回<see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/>: -1L。  <br/>
            </summary>
            <returns>download size in bytes. Returns <see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/> if failed with error.</returns>
            <param name="key">The key of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeSync(System.Object,System.Exception@)">
            <summary>
            同步接口：确认所需下载的大小 (Bytes)，包括其依赖。  <br/>  
            注：已全部下载至本地文件、已缓存时，返回大小是 0.  <br/>  
            注意：key不存在、操作失败时返回<see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/>: -1L。  <br/>
            </summary>
            <returns>download size in bytes. Returns <see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/> if failed with error.</returns>
            <param name="key">The key of the asset(s) to get the download size of.</param>
            <param name="ex">Exception during operation.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeSync(System.Collections.IEnumerable,System.Exception@)">
            <summary>
            所需下载的大小 (Bytes)。  <br/>  
            注：已全部下载至本地文件、已缓存时，返回大小是 0.  <br/>  
            注意：key不存在、操作失败时返回<see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/>: -1L。  <br/>  
            参考：<see cref="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeSync(System.Object)"/>
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSize(System.Object)">
            <summary>
            Determines the required download size, dependencies included, for the specified <paramref name="key"/>.
            Cached assets require no download and thus their download size will be 0.  The Result of the operation
            is the download size in bytes.
            </summary>
            <returns>The operation handle for the request.</returns>
            <param name="key">The key of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeAsync(System.Object)">
            <summary>
            Determines the required download size, dependencies included, for the specified <paramref name="key"/>.
            Cached assets require no download and thus their download size will be 0.  The Result of the operation
            is the download size in bytes.
            <br/>
            note: handle of GetDownloadSize does not autorelease. <br/>
            Once you have read the size out of the Result, you are responsible for releasing the operation handle.
            </summary>
            <returns>The operation handle for the request.</returns>
            <param name="key">The key of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeAsync(System.String)">
            <summary>
            Determines the required download size, dependencies included, for the specified <paramref name="key"/>.
            Cached assets require no download and thus their download size will be 0.  The Result of the operation
            is the download size in bytes.
            <br/>
            note: handle of GetDownloadSize does not autorelease. <br/>
            Once you have read the size out of the Result, you are responsible for releasing the operation handle.
            </summary>
            <returns>The operation handle for the request.</returns>
            <param name="key">The key of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeAsync(System.Collections.Generic.IList{System.Object})">
            <summary>
            Determines the required download size, dependencies included, for the specified <paramref name="keys"/>.
            Cached assets require no download and thus their download size will be 0.  The Result of the operation
            is the download size in bytes.
            </summary>
            <returns>The operation handle for the request.</returns>
            <param name="keys">The keys of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadSizeAsync(System.Collections.IEnumerable)">
            <summary>
            Determines the required download size, dependencies included, for the specified <paramref name="keys"/>.
            Cached assets require no download and thus their download size will be 0.  The Result of the operation
            is the download size in bytes.
            <br/>
            note: handle of GetDownloadSize does not autorelease. <br/>
            Once you have read the size out of the Result, you are responsible for releasing the operation handle.
            </summary>
            <returns>The operation handle for the request.</returns>
            <param name="keys">The keys of the asset(s) to get the download size of.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadDependencies(System.Object)">
            <summary>
            Downloads dependencies of assets marked with the specified label or address.
            </summary>
            <param name="key">The key of the asset(s) to load dependencies for.</param>
            <returns>The AsyncOperationHandle for the dependency load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadDependenciesAsync(System.Object,System.Boolean)">
            <summary>
            Downloads dependencies of assets marked with the specified label or address.
            See the [DownloadDependenciesAsync](../manual/DownloadDependenciesAsync.html) documentation for more details.
            </summary>
            <param name="key">The key of the asset(s) to load dependencies for.</param>
            <param name="autoReleaseHandle">Automatically releases the handle on completion</param>
            <returns>The AsyncOperationHandle for the dependency load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadDependenciesAsync(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Boolean)">
            <summary>
            Downloads dependencies of assets at given locations.
            See the [DownloadDependenciesAsync](../manual/DownloadDependenciesAsync.html) documentation for more details.
            </summary>
            <param name="locations">The locations of the assets.</param>
            <param name="autoReleaseHandle">Automatically releases the handle on completion</param>
            <returns>The AsyncOperationHandle for the dependency load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadDependenciesAsync(System.Collections.Generic.IList{System.Object},UnityEngine.AddressableAssets.Addressables.MergeMode,System.Boolean)">
            <summary>
            Downloads dependencies of assets marked with the specified labels or addresses.
            See the [DownloadDependenciesAsync](../manual/DownloadDependenciesAsync.html) documentation for more details.
            </summary>
            <param name="keys">List of keys for the locations.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <param name="autoReleaseHandle">Automatically releases the handle on completion</param>
            <returns>The AsyncOperationHandle for the dependency load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadDependenciesAsync(System.Collections.IEnumerable,UnityEngine.AddressableAssets.Addressables.MergeMode,System.Boolean)">
            <summary>
            Downloads dependencies of assets marked with the specified labels or addresses.
            See the [DownloadDependenciesAsync](../manual/DownloadDependenciesAsync.html) documentation for more details.
            </summary>
            <param name="keys">List of keys for the locations.</param>
            <param name="mode">Method for merging the results of key matches.  See <see cref="T:UnityEngine.AddressableAssets.Addressables.MergeMode"/> for specifics</param>
            <param name="autoReleaseHandle">Automatically releases the handle on completion</param>
            <returns>The AsyncOperationHandle for the dependency load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Object)">
            <summary>
            Clear the cached AssetBundles for a given key.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="key">The key to clear the cache for.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation})">
            <summary>
            Clear the cached AssetBundles for a list of Addressable locations.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="locations">The locations to clear the cache for.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Collections.Generic.IList{System.Object})">
            <summary>
            Clear the cached AssetBundles for a list of Addressable keys.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="keys">The keys to clear the cache for.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Collections.IEnumerable)">
            <summary>
            Clear the cached AssetBundles for a list of Addressable keys.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="keys">The keys to clear the cache for.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.String)">
            <summary>
            Clear the cached AssetBundles for a list of Addressable keys.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="key">The key to clear the cache for.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Object,System.Boolean)">
            <summary>
            Clear the cached AssetBundles for a given key.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="key">The key to clear the cache for.</param>
            <param name="autoReleaseHandle">If true, the returned AsyncOperationHandle will be released on completion.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Boolean)">
            <summary>
            Clear the cached AssetBundles for a list of Addressable locations.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="locations">The locations to clear the cache for.</param>
            <param name="autoReleaseHandle">If true, the returned AsyncOperationHandle will be released on completion.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Collections.Generic.IList{System.Object},System.Boolean)">
            <summary>
            Clear the cached AssetBundles for a list of Addressable keys.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="keys">The keys to clear the cache for.</param>
            <param name="autoReleaseHandle">If true, the returned AsyncOperationHandle will be released on completion.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Clear the cached AssetBundles for a list of Addressable keys.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="keys">The keys to clear the cache for.</param>
            <param name="autoReleaseHandle">If true, the returned AsyncOperationHandle will be released on completion.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearDependencyCacheAsync(System.String,System.Boolean)">
            <summary>
            Clear the cached AssetBundles for a list of Addressable keys.  Operation may be performed async if Addressables
            is initializing or updating.
            </summary>
            <param name="key">The keys to clear the cache for.</param>
            <param name="autoReleaseHandle">If true, the returned AsyncOperationHandle will be released on completion.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Instantiate(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            </summary>
            <param name="location">The location of the Object to instantiate.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="instantiateInWorldSpace">Option to retain world space when instantiated with a parent.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Instantiate(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            </summary>
            <param name="location">The location of the Object to instantiate.</param>
            <param name="position">The position of the instantiated object.</param>
            <param name="rotation">The rotation of the instantiated object.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Instantiate(System.Object,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            </summary>
            <param name="key">The key of the location of the Object to instantiate.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="instantiateInWorldSpace">Option to retain world space when instantiated with a parent.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Instantiate(System.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            </summary>
            <param name="key">The key of the location of the Object to instantiate.</param>
            <param name="position">The position of the instantiated object.</param>
            <param name="rotation">The rotation of the instantiated object.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Instantiate(System.Object,UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            </summary>
            <param name="key">The key of the location of the Object to instantiate.</param>
            <param name="instantiateParameters">Parameters for instantiation.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.Instantiate(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            </summary>
            <param name="location">The location of the Object to instantiate.</param>
            <param name="instantiateParameters">Parameters for instantiation.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InstantiateAsync(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            See the [InstantiateAsync](../manual/InstantiateAsync.html) documentation for more details.
            </summary>
            <param name="location">The location of the Object to instantiate.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="instantiateInWorldSpace">Option to retain world space when instantiated with a parent.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InstantiateAsync(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            See the [InstantiateAsync](../manual/InstantiateAsync.html) documentation for more details.
            </summary>
            <param name="location">The location of the Object to instantiate.</param>
            <param name="position">The position of the instantiated object.</param>
            <param name="rotation">The rotation of the instantiated object.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InstantiateAsync(System.Object,UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            See the [InstantiateAsync](../manual/InstantiateAsync.html) documentation for more details.
            </summary>
            <param name="key">The key of the location of the Object to instantiate.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="instantiateInWorldSpace">Option to retain world space when instantiated with a parent.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InstantiateAsync(System.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            See the [InstantiateAsync](../manual/InstantiateAsync.html) documentation for more details.
            </summary>
            <param name="key">The key of the location of the Object to instantiate.</param>
            <param name="position">The position of the instantiated object.</param>
            <param name="rotation">The rotation of the instantiated object.</param>
            <param name="parent">Parent transform for instantiated object.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InstantiateAsync(System.Object,UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            See the [InstantiateAsync](../manual/InstantiateAsync.html) documentation for more details.
            </summary>
            <param name="key">The key of the location of the Object to instantiate.</param>
            <param name="instantiateParameters">Parameters for instantiation.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.InstantiateAsync(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters,System.Boolean)">
            <summary>
            Instantiate a single object. Note that the dependency loading is done asynchronously, but generally the actual instantiate is synchronous.
            See the [InstantiateAsync](../manual/InstantiateAsync.html) documentation for more details.
            </summary>
            <param name="location">The location of the Object to instantiate.</param>
            <param name="instantiateParameters">Parameters for instantiation.</param>
            <param name="trackHandle">If true, Addressables will track this request to allow it to be released via the result object.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadScene(System.Object,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Load scene.
            </summary>
            <param name="key">The key of the location of the scene to load.</param>
            <param name="loadMode">Scene load mode.</param>
            <param name="activateOnLoad">If false, the scene will load but not activate (for background loading).  The SceneInstance returned has an Activate() method that can be called to do this at a later point.</param>
            <param name="priority">Async operation priority for scene loading.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadScene(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Load scene.
            </summary>
            <param name="location">The location of the scene to load.</param>
            <param name="loadMode">Scene load mode.</param>
            <param name="activateOnLoad">If false, the scene will load but not activate (for background loading).  The SceneInstance returned has an Activate() method that can be called to do this at a later point.</param>
            <param name="priority">Async operation priority for scene loading.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadSceneAsync(System.Object,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Load scene.
            See the [LoadSceneAsync](../manual/LoadSceneAsync.html) documentation for more details.
            </summary>
            <param name="key">The key of the location of the scene to load.</param>
            <param name="loadMode">Scene load mode.</param>
            <param name="activateOnLoad">If false, the scene will load but not activate (for background loading).  The SceneInstance returned has an Activate() method that can be called to do this at a later point.</param>
            <param name="priority">Async operation priority for scene loading.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.LoadSceneAsync(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Load scene.
            See the [LoadSceneAsync](../manual/LoadSceneAsync.html) documentation for more details.
            </summary>
            <param name="location">The location of the scene to load.</param>
            <param name="loadMode">Scene load mode.</param>
            <param name="activateOnLoad">If false, the scene will load but not activate (for background loading).  The SceneInstance returned has an Activate() method that can be called to do this at a later point.</param>
            <param name="priority">Async operation priority for scene loading.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UnloadScene(UnityEngine.ResourceManagement.ResourceProviders.SceneInstance,System.Boolean)">
            <summary>
            Release scene
            </summary>
            <param name="scene">The SceneInstance to release.</param>
            <param name="autoReleaseHandle">If true, the handle will be released automatically when complete.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UnloadScene(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Boolean)">
            <summary>
            Release scene
            </summary>
            <param name="handle">The handle returned by LoadSceneAsync for the scene to release.</param>
            <param name="autoReleaseHandle">If true, the handle will be released automatically when complete.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UnloadScene(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.ResourceManagement.ResourceProviders.SceneInstance},System.Boolean)">
            <summary>
            Release scene
            </summary>
            <param name="handle">The handle returned by LoadSceneAsync for the scene to release.</param>
            <param name="autoReleaseHandle">If true, the handle will be released automatically when complete.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UnloadSceneAsync(UnityEngine.ResourceManagement.ResourceProviders.SceneInstance,System.Boolean)">
            <summary>
            Release scene
            </summary>
            <param name="scene">The SceneInstance to release.</param>
            <param name="autoReleaseHandle">If true, the handle will be released automatically when complete.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UnloadSceneAsync(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Boolean)">
            <summary>
            Release scene
            </summary>
            <param name="handle">The handle returned by LoadSceneAsync for the scene to release.</param>
            <param name="autoReleaseHandle">If true, the handle will be released automatically when complete.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UnloadSceneAsync(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.ResourceManagement.ResourceProviders.SceneInstance},System.Boolean)">
            <summary>
            Release scene
            </summary>
            <param name="handle">The handle returned by LoadSceneAsync for the scene to release.</param>
            <param name="autoReleaseHandle">If true, the handle will be released automatically when complete.</param>
            <returns>The operation handle for the request.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.CheckForCatalogUpdates(System.Boolean)">
            <summary>
            Checks all updatable content catalogs for a new version.
            </summary>
            <param name="autoReleaseHandle">If true, the handle will automatically be released when the operation completes.</param>
            <returns>The operation containing the list of catalog ids that have an available update.  This can be used to filter which catalogs to update with the UpdateContent.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.UpdateCatalogs(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Update the specified catalogs.
            See the [UpdateCatalogs](../manual/UpdateCatalogs.html) documentation for more details.
            </summary>
            <param name="catalogs">The set of catalogs to update.  If null, all catalogs that have an available update will be updated.</param>
            <param name="autoReleaseHandle">If true, the handle will automatically be released when the operation completes.</param>
            <returns>The operation with the list of updated content catalog data.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.AddResourceLocator(UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator,System.String,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Add a resource locator.
            </summary>
            <param name="locator">The locator object.</param>
            <param name="localCatalogHash">The hash of the local catalog. This can be null if the catalog cannot be updated.</param>
            <param name="remoteCatalogLocation">The location of the remote catalog. This can be null if the catalog cannot be updated.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.RemoveResourceLocator(UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator)">
            <summary>
            Remove a locator;
            </summary>
            <param name="locator">The locator to remove.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.ClearResourceLocators">
            <summary>
            Remove all locators.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.AllowGatherResListInfoInEditor">
            <summary>
            开关Editor编辑器下收集 ResListInfo. 关闭时，无法使用`CreateResListAsset()`功能
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.ResListNextIndex">
            <summary>
            获取下一个生成列表文件`ResList`的Index序号
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.CreateResListAsset">
            <summary>
            用于Editor编辑器环境的运行时：根据运行后所有已读取过的key，生成列表文件`ResList`。<br/>
            生成文件路径：`Assets/Res/ResList[Index].asset`, 其中 Index 从1开始<br/>
            可配合`PrepareResource`接口加载所有准备资源。
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.PrepareRes(System.String)">
            <summary>
            准备好列表文件中reslist中的所有的key的内容（异步加载），task版本<br/>
            参数：reslistKey 应使用列表文件`ResList[Index].asset`设置为 AA 后的 address。
            </summary>
            <param name="resListKey">列表文件`ResList`的 AA address.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.PrepareResource(System.String)">
            <summary>
            准备好列表文件中reslist中的所有的key的内容（异步加载）<br/>
            参数：reslistKey 应使用列表文件`ResList[Index].asset`设置为 AA 后的 address。
            </summary>
            <param name="resListKey">列表文件`ResList`的 AA address.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.SetDirectLoadErrorPopupAction(System.Action)">
            <summary>
            注册同步加载功能读取 Error 时的 Action.
            </summary>
            <param name="action">读取失败时候调用的 Action</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetActiveWebRequestCount">
            <summary>
            得到当前活跃的下载线程数量 (包括所有主动下载、后台下载)
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadInTheBackground(System.String,System.Int32)">
            <summary>
            准备好列表文件中reslist中的所有的key的内容,这个接口是启动空闲下载，所有的key是chain的方式一个接一个下载，且只在空闲时下载
            </summary>
            <param name="filename">列表文件名.</param>
            <param name="maxActiveWebRequest">最大允许的连接数，只有小于这个链接才继续下载</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadInTheBackground(System.String)">
            <summary>
            准备好列表文件中reslist中的所有的key的内容,这个接口是启动空闲下载，所有的key是chain的方式一个接一个下载，且只在空闲时下载
            </summary>
            <param name="filename">列表文件名.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground(System.Int32)">
            <summary>
            后台下载全部 addressable bundles  <br/>  
            参考：会根据设置的 <see cref="P:UnityEngine.AddressableAssets.Addressables.DownloadAllConcurrencyOptions"/> 并发参数，空闲下载。
            </summary>
            <param name="maxActiveWebRequest">最大允许的连接数，只有小于这个链接才继续下载</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground">
            <summary>
            后台下载全部 addressable bundles  <br/>  
            参考：会根据设置的 <see cref="P:UnityEngine.AddressableAssets.Addressables.DownloadAllConcurrencyOptions"/> 并发参数，空闲下载。
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllTotalSizeSync">
            <summary>
            获取后台下载全部总共需要大小 (Bytes)，同步版。  <br/>  
            注：已全部下载至本地文件、已缓存时，返回大小是 0.  <br/>  
            注意：key不存在、操作失败时返回<see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/>: -1L。  <br/>  
            <br/>
            note: the download size is in bytes. <br/>
            note: if all assets required are already downloaded, cached, size will be 0. <br/>
            note: Returns <see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/> if failed with error.
            </summary>
            <returns>download size in bytes. Returns <see cref="F:UnityEngine.AddressableAssets.Addressables.InvalidDownloadSize"/> if failed with error.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.PrepareCacheList">
            <summary>
            准备好CacheList
            Performance Caution!! For now it actually runs GetDownloadSizeSync for all keys in catalog.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllRunning">
            <summary>
            后台下载是否运行中 for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            Is operations running for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadALlIsComplete">
            <summary>
            后台下载是否完成
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllComplete">
            <summary>
            后台下载是否完成 for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            Is operations completed for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            <br/>
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllSucceeded"/>  <br/>  
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllResultStatus"/>  <br/>  
            Also see 完成事件回调: <see cref="E:UnityEngine.AddressableAssets.Addressables.DownloadAllCompletedEvent"/>  <br/>  
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllSucceeded">
            <summary>
            后台下载是否全部成功 for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>
            Is operations all succeeded for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            <br/>
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllResultStatus"/>  <br/>  
            Also see 完成事件回调: <see cref="E:UnityEngine.AddressableAssets.Addressables.DownloadAllCompletedEvent"/>  <br/>  
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllState">
            <summary>
            后台下载状态  <br/>  
            Get state of DownloadAll  <br/>  
            See: 后台下载：<see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            See 完成事件回调: <see cref="E:UnityEngine.AddressableAssets.Addressables.DownloadAllCompletedEvent"/>  <br/>  
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllResultStatus">
            <summary>
            后台下载结果状态 for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            Get result status for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/>  <br/>  
            <br/>
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllComplete"/>  <br/>  
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllSucceeded"/>  <br/>  
            Also see 完成事件回调: <see cref="E:UnityEngine.AddressableAssets.Addressables.DownloadAllCompletedEvent"/>  <br/>  
            </summary>
        </member>
        <member name="E:UnityEngine.AddressableAssets.Addressables.DownloadAllCompletedEvent">
            <summary>
            后台下载 <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/> 全部完成的监听事件, 在全部完成时触发，包括成功或失败.  <br/>  
            Completion event for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/> operation, triggered when all is completed, including succeeded or failed.  <br/>  
            <br/>
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllComplete"/>  <br/>  
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.IsDownloadAllSucceeded"/>  <br/>  
            Also see 结果状态判断: <see cref="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllResultStatus"/>  <br/>  
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadErrorCode.UnknownError">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadErrorCode.InvalidOperationException">
            <summary>
            内部操作异常
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadErrorCode.NetworkNotReachable">
            <summary>
            网络无连接、断网
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadErrorCode.DownloadFailed">
            <summary>
            下载失败  <br/>  
            通常失败原因包括：超时、无法接收到数据、无法连接到服务器、http 404 不存在，等等。  <br/>  
            e.g. 'Request timeout', 'Failed to receive data', 'Cannot connect to destination host', 'HTTP/1.1 404 Not Found'
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadErrorCode.DownloadErrorRetry">
            <summary>
            下载出错重试  <br/>  
            重试 原因包括：超时、无法接收到数据、无法连接到服务器、http 404 不存在，等等。  <br/>  
            e.g. 'Request timeout', 'Failed to receive data', 'Cannot connect to destination host', 'HTTP/1.1 404 Not Found'
            </summary>
        </member>
        <member name="E:UnityEngine.AddressableAssets.Addressables.DownloadAllErrorEvent">
            <summary>
            后台下载 <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/> 过程中发生错误的监听事件, 能被每一单个下载请求触发.  <br/>  
            Error event for <see cref="M:UnityEngine.AddressableAssets.Addressables.DownloadAllInTheBackground"/> operation, can be triggered by each download request.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Addressables.DownloadProgressData">
            <summary>
            下载进度数据，包括状态、完成数、总数、错误数等各个方面的数据。
            完成数`doneCount`包括失败。
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.IsDone">
            <summary>
            Is the download operation completed.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.Status">
            <summary>
            Result status of download operation.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.State">
            <summary>
            State of download.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.Progress">
            <summary>
            进度，按任务计数的百分比 0.0f ~ 1.0f
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.TotalCount">
            <summary>
            总任务数。
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.DoneCount">
            <summary>
            完成数，包括所有成功、失败、跳过。
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.ErrorCount">
            <summary>
            下载错误的任务数。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.BytesPercent">
            <summary>
            Returns the computed percent complete as a float value between 0 &amp; 1.  If TotalBytes == 0 and IsDone, 1 is returned.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.TotalBytes">
            <summary>
            The number of bytes downloaded by the operation and all of its dependencies.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.DownloadedBytes">
            <summary>
            The total number of bytes needed to download by the operation and dependencies.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.AllRemoteFilesCount">
            <summary>
            Catalog所有远端文件总数
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Addressables.DownloadProgressData.AllRemoteFilesSize">
            <summary>
            Catalog所有远端文件总大小
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllProgress">
            <summary>
            后台下载进度，按任务计数的百分比 0.0f ~ 1.0f
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllDownloadStatus">
            <summary>
            后台下载下载状态，`DownloadStatus`结构体，包括下载字节数
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllProgressCount(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            后台下载进度计数，通过out返回完成数、总数、错误数。 其中：完成数`doneCount`包括失败。
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllProgressLog">
            <summary>
            后台下载进度log string，包含status, progress%, D: doneCount/totalCount, E: errorCount
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetDownloadAllProgressData">
            <summary>
            后台下载进度数据，完整的`DownloadProgressData`结构体，包括状态、完成数、总数、错误数等各个方面的数据。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DefaultConcurrencyOptions">
            <summary>
            默认的后台下载DownloadAll并发参数 <br/>
            队列间隔 0.1s <br/>
            移动网络：当前连接 2 以下，并发 0 (一个接一个下载) <br/>
            Wifi网络：当前连接 5 以下，并发 0 (一个接一个下载) <br/>
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.CommonConcurrencyOptions">
            <summary>
            一套常用的后台下载DownloadAll并发参数 <br/>
            队列间隔 0.05s (约每秒最多20个，30fps时约每3帧最多2个） <br/>
            移动网络：当前连接 4 以下，并发 3，大小 512KB <br/>
            Wifi网络：当前连接 8 以下，并发 5，大小 2,048KB <br/>
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllConcurrencyOptions">
            <summary>
            后台下载DownloadAll并发参数：  <br/>  
            参考：默认的并发参数：<see cref="P:UnityEngine.AddressableAssets.Addressables.DefaultConcurrencyOptions"/>  <br/>  
            参考：一套常用的并发参数：<see cref="P:UnityEngine.AddressableAssets.Addressables.CommonConcurrencyOptions"/>  <br/>  
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllMaxGlobalActiveWebRequest">
            <summary>
            DownloadAll 全局最大连接数，只有当前全局连接数小于此设定值才继续下载。<br/>  
            注：建议使用setter属性：<see cref="P:UnityEngine.AddressableAssets.Addressables.DownloadAllConcurrencyOptions"/> 以精确设置各项参数
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllMaxConcurrencyNum">
            <summary>
            DownloadAll 并发请求数。<br/>  
            注：建议使用setter属性：<see cref="P:UnityEngine.AddressableAssets.Addressables.DownloadAllConcurrencyOptions"/> 以精确设置各项参数
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllMaxConcurrencySizeKB">
            <summary>
            DownloadAll 多个并发的文件大小限制。<br/>  
            注：建议使用setter属性：<see cref="P:UnityEngine.AddressableAssets.Addressables.DownloadAllConcurrencyOptions"/> 以精确设置各项参数
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllQueueIntervalTime">
            <summary>
            DownloadAll 下载任务并发队列满时，等待间隔时间。 默认0.1秒。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllFileRetryCount">
            <summary>
            DownloadAll 每个下载文件失败时重试次数。 默认5。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllFileRetryDelayTime">
            <summary>
            DownloadAll 每个下载文件失败时做重试的延迟时间。 默认1秒。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllUpdateNetworkStatusMinInterval">
            <summary>
            DownloadAll 网络状态 `Application.internetReachability` 的刷新最小间隔。 默认5秒。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllCheckSizeByThreads">
            <summary>
            DownloadAll 开启：初始化检查资源时，自动使用线程功能.  默认 `true` (除WEBGL平台外).
            <remarks>注：在WEBGL平台不可用，不支持多线程，且默认 `false`.</remarks>
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadAllCheckSizeMaxThreadsCount">
            <summary>
            DownloadAll 检查资源的开启线程数最大限制。 默认 `4`
            <remarks>注：在WEBGL平台不可用，不支持多线程.</remarks>
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.EnableSyncVerboseLog">
            <summary>
            是否打开同步版功能的全部log
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetResourceLocations(System.Object,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)">
            <summary>
            以指定 key, type 查找所有对应资源 locations。 其中key可以是 address, label, GUID. 返回 bool 表示是否成功。 <br/>
            注：如果 Addressables 未初始化完成，Catalog 未加载成功，则一定返回 false. <br/>
            注: 通过 <see cref="T:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation"/> 可以访问到其 PrimaryKey (即address)、ResourceType 等信息。
            </summary>
            <returns>(bool) Succeeded</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetResourceLocations(System.String,System.Boolean,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)">
            <summary>
            以指定 key, type 查找所有对应资源 locations，支持key是否忽略大小写。 <br/>
            参考：<see cref="M:UnityEngine.AddressableAssets.Addressables.GetResourceLocations(System.Object,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)"/>
            </summary>
            <returns>Succeeded</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetSingleResourceLocation(System.Object,System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation@)">
            <summary>
            以指定 key, type 查找单个对应资源 location。 其中key可以是 address, label, GUID. 返回 bool 表示是否成功。 <br/>
            注：如果 Addressables 未初始化完成，Catalog 未加载成功，则一定返回 false. <br/>
            注: 通过 <see cref="T:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation"/> 可以访问到其 PrimaryKey (即address)、ResourceType 等信息。
            </summary>
            <returns>(bool) Succeeded</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.GetSingleResourceLocation(System.String,System.Boolean,System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation@)">
            <summary>
            以指定 key, type 查找单个对应资源 location，支持key是否忽略大小写。<br/>
            参考：<see cref="M:UnityEngine.AddressableAssets.Addressables.GetSingleResourceLocation(System.Object,System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation@)"/>
            </summary>
            <returns>Succeeded</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.HasResourceLocation(System.Object,System.Type)">
            <summary>
            是否有指定 key type 的资源 location。 其中key可以是 address, label, GUID. <br/> 
            若返回`true`表示是有效的资源 key，若返回`false`表示该key不存在。<br/>
            注：如果 Addressables 未初始化完成，Catalog 未加载成功，则一定返回 false.
            </summary>
            <param name="key">The key of the location of the asset.</param>
            <param name="type">Default null uses typeof UnityEngine.Object</param>
            <returns>(bool) Whether has location or not</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.HasResourceLocation(System.String,System.Boolean,System.Type)">
            <summary>
            是否有指定 key type 的资源 location，支持key是否忽略大小写。<br/>
            参考：<see cref="M:UnityEngine.AddressableAssets.Addressables.HasResourceLocation(System.Object,System.Type)"/>
            </summary>
            <param name="key">The key of the location of the asset.</param>
            <param name="ignoreCase">If ignore case for the key</param>
            <param name="type">Default null uses typeof UnityEngine.Object</param>
            <returns>(bool) Whether has location or not</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.AssetKeyCaseMode">
            <summary>
            设置全局 asset key 大小写模式。支持忽略大小写。 默认`DefaultSensitive` - 大小写敏感。 <br/>
            影响所有加载、下载相关功能接口。 <br/>
            参考：枚举类型 <see cref="T:UnityEngine.ResourceManagement.ResourceManager.KeyCaseMode"/>
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.IsBundleDownloadLogVerbose">
            <summary>
            是否开启AssetBundle下载的Verbose log。默认`true`。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.IsEnableDownloadSizeCache">
            <summary>
            是否开启Bundle的DownloadSize缓存。默认`true`。 <br/>
            true - 一旦检查到bundle已下载，就将Size缓存为0，之后不再重复检查`Caching.IsVersionCached`.
                   副作用：如果检查到bundle已下载之后，继续运行的中途cache bundle被删除、清理掉了，`GetDownloadSize`时仍然会是0. <br/>
            false - 不缓存，每次`GetDownloadSize`时都检查`Caching.IsVersionCached`.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.SetRecordDownloadOrderEnable(System.Boolean)">
            <summary>
            设置是否开启录制下载顺序。 默认 false. <br/>
            注意：此开关是开启运行中**录制**，而不是开启DownloadAll的读取下载顺序。
            </summary>
            <param name="enable">是否开启录制</param>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.IsDownloadAllOrderEnabled">
            <summary>
            是否开启下载顺序功能。开启后DownloadAll时会自动读取下载顺序的配置. 默认 false. <br/>
            注：需要按照文档，有配置下载顺序资源，才能使功能生效
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.IsUsingDownLoadOrderList">
            <summary>
            是否正在使用下载顺序列表  <br/>
            注：<see cref="P:UnityEngine.AddressableAssets.Addressables.IsDownloadAllOrderEnabled"/> 开启、且 DownloadAll 开始后可判定到真实状态。  <br/>
            注：<see cref="P:UnityEngine.AddressableAssets.Addressables.IsDownloadAllOrderEnabled"/> 开启时，也可能由于顺序列表资源配置错误、或读取失败等，导致没有在使用顺序列表。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.IsDownloadOrderMissInfoLogEnabled">
            <summary>
            是否开启提示资源miss输出log开关。 默认 false  <br/>
            注：资源miss判定规则：前台下载请求时，但未本地未缓存好，即Miss;  在首次游戏前N分钟新手时间里，前台下载请求时，没在orderList的，也报miss。  <br/>
            注：首次游戏N分钟游戏时间设置：<see cref="P:UnityEngine.AddressableAssets.Addressables.DownloadOrderFirstPlayTimeMinutes"/>  <br/>
            注：<see cref="P:UnityEngine.AddressableAssets.Addressables.IsDownloadAllOrderEnabled"/> true 才能生效
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadOrderFirstPlayTimeMinutes">
            <summary>
            用于判断首次游戏新手时间的游玩分钟数。 默认 20 分钟  <br/>
            注：<see cref="P:UnityEngine.AddressableAssets.Addressables.IsDownloadAllOrderEnabled"/> true 且 <see cref="P:UnityEngine.AddressableAssets.Addressables.IsDownloadOrderMissInfoLogEnabled"/> true 才能生效
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.QueryDownloadOrderMissInfo">
            <summary>
            查询Miss率信息 <br/>
            返回结构体参数：@see: <see cref="T:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo"/> <br/>
            </summary>
            <remarks>"Experimental. Use at your own risk."</remarks>
        </member>
        <member name="E:UnityEngine.AddressableAssets.Addressables.OnMissCountChange">
            <summary>
            Miss数改变时的事件回调 <br/>
            * miss判定规则：小包化低清转化过的资源，在前台使用到（出现在显示场景树中被Awake）时、本地还未cache下载好，判定为Miss，此时可能出现模糊表现。 已去重。 <br/>
            方法参数参考：@see: <see cref="T:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissEvents.DelegateMissCountChange"/>
            </summary>
            <remarks>"Experimental. Use at your own risk."</remarks>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.IsDownloadSpeedStatsVerboseLog">
            <summary>
            是否开启`DownloadSpeedStats`下载速度统计的 Verbose log。默认`false`。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadSpeedStatsMode">
            <summary>
            下载速度统计模式，默认`None`关闭统计。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Addressables.DownloadSpeedStatsInterval">
            <summary>
            下载速度统计间隔
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Addressables.QueryDownloadSpeedStats(System.Boolean)">
            <summary>
            查询下载速度统计数据
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AddressablesImpl.GetDownloadSizeAsync(System.Object)">
            note: handle of GetDownloadSize does not autorelease. <br/>
            Once you have read the size out of the Result, you are responsible for releasing the operation handle.
        </member>
        <member name="M:UnityEngine.AddressableAssets.AddressablesImpl.GetDownloadSizeAsync(System.Collections.IEnumerable)">
            note: handle of GetDownloadSize does not autorelease. <br/>
            Once you have read the size out of the Result, you are responsible for releasing the operation handle.
        </member>
        <member name="M:UnityEngine.AddressableAssets.AddressablesImpl.LoadingThread.PrepareCacheList">
            <summary>
            Performance Caution!! For now it actually runs GetDownloadSizeSync for all keys in catalog.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AddressablesImpl.LoadingThread.PreCacheList">
            <summary>
            Performance Caution!! For now it actually runs GetDownloadSizeSync for all keys in catalog.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.IsDone">
            note: 以下变量增删，注意同时维护 <see cref="M:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.ClearStatusData"/> 方法
        </member>
        <member name="P:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.TotalCount">
            note: 以下变量增删，注意同时维护 <see cref="M:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.ClearStatusData"/> 方法
            总数，catalog 中所有的 bundles 数。 下载开始setup时就确定。
        </member>
        <member name="P:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.DoneCount">
            完成数，包括所有成功、失败、跳过。 DoneCount = TotalCount 时，全部完成。
        </member>
        <member name="P:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.ErrorCount">
            错误数，包括 invalidKey、下载失败
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.SkipCount">
            跳过数，发现 downloadSize 0 已经下载的、或发现 isInvalidKey 而不下载
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.LocalCachedCount">
            已经在本地缓存数，想要下载但是检测到 downloadSize 0 
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.RequestCount">
            发起请求数
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.ValidFilesCount">
            有效文件数，包括成功失败，不包括InvalidKey
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.RetriedCount">
            重试次数
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesImpl.DownloadWorkerData.InvalidKeyCount">
            InvalidKey数
        </member>
        <member name="M:UnityEngine.AddressableAssets.AddressablesImpl.PrepareCacheList">
            <summary>
            Performance Caution!! For now it actually runs GetDownloadSizeSync for all keys in catalog.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetLabelReference">
            <summary>
            Reference to an asset label.  This class can be used in scripts as a field and will use a CustomPropertyDrawer to provide a DropDown UI of available labels.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetLabelReference.labelString">
            <summary>
            The label string.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetLabelReference.RuntimeKey">
            <summary>
            The runtime key used for indexing values in the Addressables system.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetLabelReference.RuntimeKeyIsValid">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetLabelReference.GetHashCode">
            <summary>
            Get the hash code of this object.
            </summary>
            <returns>The hash code of the label string.</returns>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceT`1">
            <summary>
            Generic version of AssetReference class.  This should not be used directly as CustomPropertyDrawers do not support generic types.  Instead use the concrete derived classes such as AssetReferenceGameObject.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceT`1.#ctor(System.String)">
            <summary>
            Construct a new AssetReference object.
            </summary>
            <param name="guid">The guid of the asset.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceT`1.LoadAsset">
            <summary>
            Load the referenced asset as type TObject.
            </summary>
            <returns>The load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceT`1.LoadAssetAsync">
            <summary>
            Load the referenced asset as type TObject.
            </summary>
            <returns>The load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceT`1.ValidateAsset(UnityEngine.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceT`1.ValidateAsset(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReferenceT`1.editorAsset">
            <summary>
            Type-specific override of parent editorAsset.  Used by the editor to represent the main asset referenced.
            </summary>
            <returns>Editor Asset as type TObject, else null</returns>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceGameObject">
            <summary>
            GameObject only asset reference.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceGameObject.#ctor(System.String)">
            <summary>
            Constructs a new reference to a GameObject.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceTexture">
            <summary>
            Texture only asset reference.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceTexture.#ctor(System.String)">
            <summary>
            Constructs a new reference to a Texture.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceTexture2D">
            <summary>
            Texture2D only asset reference.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceTexture2D.#ctor(System.String)">
            <summary>
            Constructs a new reference to a Texture2D.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceTexture3D">
            <summary>
            Texture3D only asset reference
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceTexture3D.#ctor(System.String)">
            <summary>
            Constructs a new reference to a Texture3D.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceSprite">
            <summary>
            Sprite only asset reference.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceSprite.#ctor(System.String)">
            <summary>
            Constructs a new reference to a AssetReferenceSprite.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceSprite.ValidateAsset(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReferenceSprite.editorAsset">
            <summary>
            Typeless override of parent editorAsset. Used by the editor to represent the main asset referenced.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReferenceAtlasedSprite">
            <summary>
            Assetreference that only allows atlassed sprites.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceAtlasedSprite.#ctor(System.String)">
            <summary>
            Constructs a new reference to a AssetReferenceAtlasedSprite.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReferenceAtlasedSprite.ValidateAsset(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReferenceAtlasedSprite.editorAsset">
            <summary>
            SpriteAtlas Type-specific override of parent editorAsset. Used by the editor to represent the main asset referenced.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AssetReference">
            <summary>
            Reference to an addressable asset.  This can be used in script to provide fields that can be easily set in the editor and loaded dynamically at runtime.
            To determine if the reference is set, use RuntimeKeyIsValid().
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.OperationHandle">
            <summary>
            The AsyncOperationHandle currently being used by the AssetReference.
            For example, if you call AssetReference.LoadAssetAsync, this property will return a handle to that operation.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.RuntimeKey">
            <summary>
            The actual key used to request the asset at runtime. RuntimeKeyIsValid() can be used to determine if this reference was set.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.AssetGUID">
            <summary>
            Stores the guid of the asset.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.SubObjectName">
            <summary>
            Stores the name of the sub object.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.IsValid">
            <summary>
            Returns the state of the internal operation.
            </summary>
            <returns>True if the operation is valid.</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.IsDone">
            <summary>
            Get the loading status of the internal operation.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.#ctor">
            <summary>
            Construct a new AssetReference object.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.#ctor(System.String)">
            <summary>
            Construct a new AssetReference object.
            </summary>
            <param name="guid">The guid of the asset.</param>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.Asset">
            <summary>
            The loaded asset.  This value is only set after the AsyncOperationHandle returned from LoadAssetAsync completes.  It will not be set if only InstantiateAsync is called.  It will be set to null if release is called.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.CachedAsset">
            <summary>
            Cached Editor Asset.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.ToString">
            <summary>
            String representation of asset reference.
            </summary>
            <returns>The asset guid as a string.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.LoadAsset``1">
            <summary>
            Load the referenced asset as type TObject.
            </summary>
            <typeparam name="TObject">The object type.</typeparam>
            <returns>The load operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.LoadScene">
            <summary>
            Loads the reference as a scene.
            </summary>
            <returns>The operation handle for the scene load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.Instantiate(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            InstantiateAsync the referenced asset as type TObject.
            </summary>
            <param name="position">Position of the instantiated object.</param>
            <param name="rotation">Rotation of the instantiated object.</param>
            <param name="parent">The parent of the instantiated object.</param>
            <returns>Returns the instantiation operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.Instantiate(UnityEngine.Transform,System.Boolean)">
            <summary>
            InstantiateAsync the referenced asset as type TObject.
            </summary>
            <param name="parent">The parent of the instantiated object.</param>
            <param name="instantiateInWorldSpace">Option to retain world space when instantiated with a parent.</param>
            <returns>Returns the instantiation operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.LoadAssetAsync``1">
            <summary>
            Load the referenced asset as type TObject.
            </summary>
            <typeparam name="TObject">The object type.</typeparam>
            <returns>The load operation if there is not a valid cached operation, otherwise return default operation.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.LoadSceneAsync(UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Loads the reference as a scene.
            </summary>
            <param name="loadMode">Scene load mode.</param>
            <param name="activateOnLoad">If false, the scene will load but not activate (for background loading).  The SceneInstance returned has an Activate() method that can be called to do this at a later point.</param>
            <param name="priority">Async operation priority for scene loading.</param>
            <returns>The operation handle for the request if there is not a valid cached operation, otherwise return default operation</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.UnLoadScene">
            <summary>
            Unloads the reference as a scene.
            </summary>
            <returns>The operation handle for the scene load.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.InstantiateAsync(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            InstantiateAsync the referenced asset as type TObject.
            </summary>
            <param name="position">Position of the instantiated object.</param>
            <param name="rotation">Rotation of the instantiated object.</param>
            <param name="parent">The parent of the instantiated object.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.InstantiateAsync(UnityEngine.Transform,System.Boolean)">
            <summary>
            InstantiateAsync the referenced asset as type TObject.
            </summary>
            <param name="parent">The parent of the instantiated object.</param>
            <param name="instantiateInWorldSpace">Option to retain world space when instantiated with a parent.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.RuntimeKeyIsValid">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.ReleaseAsset">
            <summary>
            Release the internal operation handle.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.ReleaseInstance(UnityEngine.GameObject)">
            <summary>
            Release an instantiated object.
            </summary>
            <param name="obj">The object to release.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.ValidateAsset(UnityEngine.Object)">
            <summary>
            Validates that the referenced asset allowable for this asset reference.
            </summary>
            <param name="obj">The Object to validate.</param>
            <returns>Whether the referenced asset is valid.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.ValidateAsset(System.String)">
            <summary>
            Validates that the referenced asset allowable for this asset reference.
            </summary>
            <param name="path">The path to the asset in question.</param>
            <returns>Whether the referenced asset is valid.</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.editorAsset">
            <summary>
            Used by the editor to represent the main asset referenced.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.AssetReference.editorObject">
            <summary>
            Used by the editor to represent the object referenced.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.SetEditorAsset(UnityEngine.Object)">
            <summary>
            Sets the main asset on the AssetReference.  Only valid in the editor, this sets both the editorAsset attribute,
              and the internal asset GUID, which drives the RuntimeKey attribute. If the reference uses a sub object,
              then it will load the editor asset during edit mode and load the sub object during runtime. For example, if
              the AssetReference is set to a sprite within a sprite atlas, the editorAsset is the atlas (loaded during edit mode)
              and the sub object is the sprite (loaded during runtime).
            <param name="value">Object to reference</param>
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.AssetReference.SetEditorSubObject(UnityEngine.Object)">
            <summary>
            Sets the sub object for this asset reference.
            </summary>
            <param name="value">The sub object.</param>
            <returns>True if set correctly.</returns>
        </member>
        <member name="T:UnityEngine.AddressableAssets.IKeyEvaluator">
            <summary>
            Interface for providing a key.  This allows for objects passed into the Addressables system to provied a key instead of being used directly.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.IKeyEvaluator.RuntimeKey">
            <summary>
            The runtime key to use.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.IKeyEvaluator.RuntimeKeyIsValid">
            <summary>
            Checks if the current RuntimeKey is valid.
            </summary>
            <returns>Whether the RuntimeKey is valid or not.</returns>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties">
            <summary>
            Supports the evaluation of embedded runtime variables in addressables locations
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties.SetPropertyValue(System.String,System.String)">
            <summary>
            Predefine a runtime property.
            </summary>
            <param name="name">The property name.</param>
            <param name="val">The property value.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties.ClearCachedPropertyValues">
            <summary>
            This will clear all PropertyValues that have been cached.  This includes all values set by
            <see cref="M:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties.SetPropertyValue(System.String,System.String)"/> as well as any reflection-evaluated properties.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties.EvaluateProperty(System.String)">
            <summary>
            Evaluates a named property using cached values and static public fields and properties.  Be aware that a field or property may be stripped if not referenced anywhere else.
            </summary>
            <param name="name">The property name.</param>
            <returns>The value of the property.  If not found, the name is returned.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties.EvaluateString(System.String)">
            <summary>
            Evaluates all tokens deliminated by '{' and '}' in a string and evaluates them with the EvaluateProperty method.
            </summary>
            <param name="input">The input string.</param>
            <returns>The evaluated string after resolving all tokens.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.AddressablesRuntimeProperties.EvaluateString(System.String,System.Char,System.Char,System.Func{System.String,System.String})">
            <summary>
            Evaluates all tokens deliminated by the specified delimiters in a string and evaluates them with the supplied method.
            </summary>
            <param name="inputString">The string to evaluate.</param>
            <param name="startDelimiter">The start token delimiter.</param>
            <param name="endDelimiter">The end token delimiter.</param>
            <param name="varFunc">Func that has a single string parameter and returns a string.</param>
            <returns>The evaluated string.</returns>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Initialization.CacheInitialization">
            <summary>
            IInitializableObject that sets up the Caching system.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.CacheInitialization.Initialize(System.String,System.String)">
            <summary>
            Sets properties of the Caching system.
            </summary>
            <param name="id">The id of thei object.</param>
            <param name="dataStr">The JSON serialized CacheInitializationData object.</param>
            <returns>True if the initialization succeeded.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Initialization.CacheInitialization.InitializeAsync(UnityEngine.ResourceManagement.ResourceManager,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.CacheInitialization.RootPath">
            <summary>
            The root path of the cache.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Initialization.CacheInitializationData">
            <summary>
            Contains settings for the Caching system.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.CacheInitializationData.CompressionEnabled">
            <summary>
            Enable recompression of asset bundles into LZ4 format as they are saved to the cache.  This sets the Caching.compressionEnabled value.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.CacheInitializationData.CacheDirectoryOverride">
            <summary>
            If not null or empty a new cache is created using Caching.AddCache and it is set active by assigning it to Caching.currentCacheForWriting.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.CacheInitializationData.ExpirationDelay">
            <summary>
            Controls how long bundles are kept in the cache. This value is applied to Caching.currentCacheForWriting.expirationDelay.  The value is in seconds and has a limit of 12960000 (150 days).
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.CacheInitializationData.LimitCacheSize">
            <summary>
            If true, the maximum cache size will be set to MaximumCacheSize.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.CacheInitializationData.MaximumCacheSize">
            <summary>
            The maximum size of the cache in bytes.  This value is applied to Caching.currentCacheForWriting.maximumAvailableStorageSpace.  This will only be set if LimitCacheSize is true.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData">
            <summary>
            Runtime data that is used to initialize the Addressables system.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.kCatalogAddress">
            <summary>
            Address of the contained catalogs.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.BuildTarget">
            <summary>
            The name of the build target that this data was prepared for.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.SettingsHash">
            <summary>
            The hash of the settings that generated this runtime data.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.CatalogLocations">
            <summary>
            List of catalog locations to download in order (try remote first, then local)
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.ProfileEvents">
            <summary>
            Flag to control whether the ResourceManager sends profiler events.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.LogResourceManagerExceptions">
            <summary>
            When enabled, the Addressables.ResourceManager.ExceptionHandler is set to (op, ex) => Debug.LogException(ex);
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.InitializationObjects">
            <summary>
            The list of initialization data.  These objects will get deserialized and initialized during the Addressables initialization process.  This happens after resource providers have been set up but before any catalogs are loaded.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.DisableCatalogUpdateOnStartup">
            <summary>
            Determine if we should check for Remote Catalogs on during initialization.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.IsLocalCatalogInBundle">
            <summary>
            Whether the local catalog has been serialized in an asset bundle or as json
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.CertificateHandlerType">
            <summary>
            The type of CertificateHandler to use for this provider.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.AddressablesVersion">
            <summary>
            The current active version of the Addressables package.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.Initialization.ResourceManagerRuntimeData.MaxConcurrentWebRequests">
            <summary>
            The maximum number of concurrent web requests.  This value will be clamped from 1 to 1024.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResListInfo">
            <summary>
            ResList 列表文件中一条记录的信息
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResList">
            <summary>
            ResList 列表文件 Asset 的 ScriptableObject类 <br/>
            关于 ResList Editor 编辑器工具方法，参考: `UnityEditor.AddressableAssets.Settings.ResListEditorUtil`
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResList.ResListName">
            <summary>
            列表文件名
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResList.ResListPath">
            <summary>
            列表文件Path
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResList.IsResDuplicatesCleaned">
            <summary>
            是否已清理资源重复项
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResList.SetEditorAssetDirty">
            <summary>
            设置 Editor Asset Dirty
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResList.SetName(System.String)">
            <summary>
            设置列表文件名
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResList.SetNameByPath(System.String)">
            <summary>
            设置列表文件名
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResList.SetResDuplicatesDirty">
            <summary>
            设置清理资源重复项Dirty
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResList.CleanResDuplicates(System.Boolean)">
            <summary>
            清理资源重复项。 返回 (bool) 本次是否执行了清理。
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResRecorder.SetRecordEnable(System.Boolean)">
            <summary>
            设置是否开启录制顺序。 默认 false
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResRecorder.IsRecordEnabled">
            <summary>
            是否已开启录制顺序。 默认 false. <br/>
            参考：设置开启录制 see: <see cref="M:UnityEngine.AddressableAssets.ResRecorder.SetRecordEnable(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResRecorder.IsOrderEnabled">
            <summary>
            是否开启顺序下载功能。 默认 false
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResRecorder.IsUsingDownLoadOrderList">
            <summary>
            是否正在使用下载顺序列表  <br/>
            注：<see cref="P:UnityEngine.AddressableAssets.ResRecorder.IsOrderEnabled"/> 开启时，也可能由于顺序列表资源不存在、或读取失败等，导致没有在使用顺序列表。
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResRecorder.DownLoadOrderKeysSet">
            <summary>
            获取下载顺序列表的HashSet
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResRecorder.DownLoadOrderListCount">
            <summary>
            获取下载顺序列表的资源数量
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResRecorder.ManualSetDownloadOrderAsset(UnityEngine.TextAsset)">
            <summary>
            手动设置DownloadOrder数据
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry">
            <summary>
            Contains serializable data for an IResourceLocation
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.InternalId">
            <summary>
            Internl id.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.Provider">
            <summary>
            IResourceProvider identifier.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.Keys">
            <summary>
            Keys for this location.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.Dependencies">
            <summary>
            Dependency keys.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.Data">
            <summary>
            Serializable data for the provider.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.ResourceType">
            <summary>
            The type of the resource for th location.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <summary>
            Creates a new ContentCatalogEntry object.
            </summary>
            <param name="type">The entry type.</param>
            <param name="internalId">The internal id.</param>
            <param name="provider">The provider id.</param>
            <param name="keys">The collection of keys that can be used to retrieve this entry.</param>
            <param name="dependencies">Optional collection of keys for dependencies.</param>
            <param name="extraData">Optional additional data to be passed to the provider.  For example, AssetBundleProviders use this for cache and crc data.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData">
            <summary>
            Container for ContentCatalogEntries.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.ProviderId">
            <summary>
            Stores the id of the data provider.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.InstanceProviderData">
            <summary>
            Data for the Addressables.ResourceManager.InstanceProvider initialization;
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.SceneProviderData">
            <summary>
            Data for the Addressables.ResourceManager.InstanceProvider initialization;
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.ResourceProviderData">
            <summary>
            The list of resource provider data.  Each entry will add an IResourceProvider to the Addressables.ResourceManager.ResourceProviders list.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.ProviderIds">
            <summary>
            The IDs for the Resource Providers.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.InternalIds">
            <summary>
            Internal Content Catalog Entry IDs for Addressable Assets.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.CreateLocator(System.String)">
            <summary>
            Create IResourceLocator object
            </summary>
            <param name="providerSuffix">If specified, this value will be appeneded to all provider ids.  This is used when loading additional catalogs that need to have unique providers.</param>
            <returns>ResourceLocationMap, which implements the IResourceLocator interface.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.#ctor">
            <summary>
            Create a new ContentCatalogData object without any data.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.#ctor(System.Collections.Generic.IList{UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry},System.String)">
            <summary>
            Create a new ContentCatalogData object with the specified entries.
            </summary>
            <param name="entries">The data entries.</param>
            <param name="id">The id of the locator.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogData.SetData(System.Collections.Generic.IList{UnityEngine.AddressableAssets.ResourceLocators.ContentCatalogDataEntry})">
            <summary>
            Set the data before serialization
            </summary>
            <param name="data">The list of </param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator">
            <summary>
            Interface used by the Addressables system to find the locations of a given key.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator.LocatorId">
            <summary>
            The id for this locator.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator.Keys">
            <summary>
            The keys defined by this locator.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.IResourceLocator.Locate(System.Object,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)">
            <summary>
            Retrieve the locations from a specified key.
            </summary>
            <param name="key">The key to use.</param>
            <param name="type">The resource type.</param>
            <param name="locations">The resulting set of locations for the key.</param>
            <returns>True if any locations were found with the specified key.</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.IStringKeyResourceLocator.LocatorId">
            <summary>
            The id for this locator.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.IStringKeyResourceLocator.Keys">
            <summary>
            The keys defined by this locator.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceLocators.LegacyResourcesLocator">
            <summary>
            Simple locator that acts as a passthrough for assets loaded from resources directories.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.LegacyResourcesLocator.Locate(System.Object,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)">
            <summary>
            The key is converted to a string and used as the internal id of the location added to the locations parameter.
            </summary>
            <param name="key">The key of the location.  This should be a string with the resources path of the asset.</param>
            <param name="type">The resource type.</param>
            <param name="locations">The list of locations.  This will have at most one item.</param>
            <returns>True if the key is a string object and a location was created, false otherwise.</returns>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.LegacyResourcesLocator.Keys">
            <summary>
            The keys available in this locator.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.LegacyResourcesLocator.LocatorId">
            <summary>
            Id of locator.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData">
            <summary>
            Serializable location data.  This is used for the locations of the content catalogs.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData.Keys">
            <summary>
            The collection of keys for this location.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData.InternalId">
            <summary>
            The internal id.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData.Provider">
            <summary>
            The provider id.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData.Dependencies">
            <summary>
            The collection of dependencies for this location.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData.ResourceType">
            <summary>
            The type of the resource for the location.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData.#ctor(System.String[],System.String,System.Type,System.Type,System.String[])">
            <summary>
            Construct a new ResourceLocationData object.
            </summary>
            <param name="keys">Array of keys for the location.  This must contain at least one item.</param>
            <param name="id">The internal id.</param>
            <param name="provider">The provider id.</param>
            <param name="t">The resource object type.</param>
            <param name="dependencies">Optional array of dependencies.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap">
            <summary>
            Simple implementation of an IResourceLocator
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new ResourceLocationMap object.
            </summary>
            <param name="id">The locator id.</param>
            <param name="capacity">The expected number of items.</param>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.LocatorId">
            <summary>
            Stores the resource locator id.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.#ctor(System.String,System.Collections.Generic.IList{UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationData})">
            <summary>
            Construct a new ResourceLocationMap object with a list of locations.
            </summary>
            <param name="id">The locator id.</param>
            <param name="locations">The list of locations to initialize with.</param>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.Locations">
            <summary>
            The mapping of key to location lists.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.ICaseLocations">
            <summary>
            The mapping of ignore case string key to location lists.
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.DownloadLocationsMap">
            <summary>
            Works for background download
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.DownloadLocationsList">
            <summary>
            Works for background download
            </summary>
        </member>
        <member name="P:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.Keys">
            <summary>
            The keys available in this locator.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.Locate(System.Object,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)">
            <summary>
            Locate all of the locations that match the given key.
            </summary>
            <param name="key">The key used to locate the locations.</param>
            <param name="type">The resource type.</param>
            <param name="locations">The list of found locations.  This list is shared so it should not be modified.</param>
            <returns>Returns true if a location was found. Returns false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.LocateStringKey(System.String,System.Boolean,System.Type,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation}@)">
            <summary>
            Locate all of the locations that match the given key.
            </summary>
            <param name="keyStr">The key used to locate the locations.</param>
            <param name="ignoreCase">If ignore case for the key</param>
            <param name="type">The resource type.</param>
            <param name="locations">The list of found locations.  This list is shared so it should not be modified.</param>
            <returns>Returns true if a location was found. Returns false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.LocateSingleStringKey(System.String,System.Boolean,System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation@)">
            <summary>
            Locate single first location that match the given key.
            </summary>
            <param name="keyStr">The key used to locate the locations.</param>
            <param name="ignoreCase">If ignore case for the key</param>
            <param name="type">The resource type.</param>
            <param name="location">The found location.</param>
            <returns>Returns true if a location was found. Returns false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.Add(System.Object,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Add a new location.
            </summary>
            <param name="key">The key to reference the location.</param>
            <param name="location">The location to add.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceLocators.ResourceLocationMap.Add(System.Object,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation})">
            <summary>
            Add a list of locations.
            </summary>
            <param name="key">The key to reference the locations with.</param>
            <param name="locations">The list of locations to store at the given key.</param>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider">
            <summary>
            Provider for content catalogs.  This provider makes use of a hash file to determine if a newer version of the catalog needs to be downloaded.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.DependencyHashIndex">
            <summary>
            Options for specifying which entry in the catalog dependencies should hold each hash item.
             The Remote should point to the hash on the server.  The Cache should point to the
             local cache copy of the remote data.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.DependencyHashIndex.Remote">
            <summary>
            Use to represent the index of the remote entry in the dependencies list.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.DependencyHashIndex.Cache">
            <summary>
            Use to represent the index of the cache entry in the dependencies list.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.DependencyHashIndex.Count">
            <summary>
            Use to represent the number of entries in the dependencies list.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.DisableCatalogUpdateOnStart">
            <summary>
            Use to indicate if the updating the catalog on startup should be disabled.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.IsLocalCatalogInBundle">
            <summary>
            Use to indicate if the local catalog is in a bundle.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.#ctor(UnityEngine.ResourceManagement.ResourceManager)">
            <summary>
            Constructor for this provider.
            </summary>
            <param name="resourceManagerInstance">The resource manager to use.</param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.InternalOp.Release">
            <summary>
            Clear all content catalog data.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.ResourceProviders.ContentCatalogProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.AddressableAssets.AddressablesPlatform">
            <summary>
            Options for the Addressables build platform.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.Unknown">
            <summary>
            Use to indicate that the build platform is unknown.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.Windows">
            <summary>
            Use to indicate that the build platform is Windows.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.OSX">
            <summary>
            Use to indicate that the build platform is OSX.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.Linux">
            <summary>
            Use to indicate that the build platform is Linux.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.PS4">
            <summary>
            Use to indicate that the build platform is PS4.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.Switch">
            <summary>
            Use to indicate that the build platform is PS4.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.XboxOne">
            <summary>
            Use to indicate that the build platform is XboxOne.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.WebGL">
            <summary>
            Use to indicate that the build platform is WebGL.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.iOS">
            <summary>
            Use to indicate that the build platform is iOS.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.Android">
            <summary>
            Use to indicate that the build platform is Android.
            </summary>
        </member>
        <member name="F:UnityEngine.AddressableAssets.AddressablesPlatform.WindowsUniversal">
            <summary>
            Use to indicate that the build platform is WindowsUniversal.
            </summary>
        </member>
        <member name="T:UnityEngine.AddressableAssets.PlatformMappingService">
            <summary>
            Determines the Addressables build platform that should be used based on the target player build platform.
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.PlatformMappingService.GetPlatform">
            <summary>
            Retrieves the Addressables build platform that is being used.
            </summary>
            <returns>Returns the Addressables build platform that is being used.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.DownloadSpeedStatsUtil.QueryStats(System.Boolean)">
            <summary>
            查询下载速度统计数据
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.HttpUtils.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String@)">
            <summary>
            发送Get请求
            </summary>
            <param name="url">地址</param>
            <param name="reqParams">请求参数定义</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.ResourceManagerDiagnosticsExport.GetAliveResourcesCount(System.Boolean)">
            <summary>
            get Alive Resources Count (i.e., not released) from ResourceManagerDiagnostics
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.ResourceManagerDiagnosticsExport.DumpAliveResourcesInfo(System.Boolean)">
            <summary>
            dump Alive Resources info (i.e., not released) from ResourceManagerDiagnostics
            </summary>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.ResourceManagerDiagnostics.#ctor(UnityEngine.ResourceManagement.ResourceManager)">
            <summary>
            This class is responsible for passing events from the resource manager to the event collector,
            </summary>
            <param name="resourceManager"></param>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.SerializationUtilities.ReadObjectFromByteArray(System.Byte[],System.Int32)">
            <summary>
            Deserializes an object from an array at a specified index.  Supported types are ASCIIString, UnicodeString, UInt16, UInt32, Int32, Hash128, JsonObject
            </summary>
            <param name="keyData">The array of bytes for the object. The first byte is the ObjectType. The rest depends on the type.</param>
            <param name="dataIndex">The index of the first byte of the data.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:UnityEngine.AddressableAssets.Utility.SerializationUtilities.WriteObjectToByteList(System.Object,System.Collections.Generic.List{System.Byte})">
            <summary>
            Write an object to a byte array
            </summary>
            <param name="obj">The object to write.</param>
            <param name="buffer">The list of bytes to write to.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="T:UnityEngine.AssetReferenceUIRestriction">
            <summary>
            Used to restrict an AssetReference field or property to only allow items wil specific labels.  This is only enforced through the UI.
            </summary>
        </member>
        <member name="M:UnityEngine.AssetReferenceUIRestriction.ValidateAsset(UnityEngine.Object)">
            <summary>
            Validates that the referenced asset allowable for this asset reference.
            </summary>
            <param name="obj">The Object to validate.</param>
            <returns>Whether the referenced asset is valid.</returns>
        </member>
        <member name="M:UnityEngine.AssetReferenceUIRestriction.ValidateAsset(System.String)">
            <summary>
            Validates that the referenced asset allowable for this asset reference.
            </summary>
            <param name="path">The path to the asset in question.</param>
            <returns>Whether the referenced asset is valid.</returns>
        </member>
        <member name="T:UnityEngine.AssetReferenceUILabelRestriction">
            <summary>
            Used to restrict an AssetReference field or property to only allow items wil specific labels.  This is only enforced through the UI.
            </summary>
        </member>
        <member name="F:UnityEngine.AssetReferenceUILabelRestriction.m_AllowedLabels">
            <summary>
            Stores the labels allowed for the AssetReference.
            </summary>
        </member>
        <member name="F:UnityEngine.AssetReferenceUILabelRestriction.m_CachedToString">
            <summary>
            Stores the allowed labels formatted as a string.
            </summary>
        </member>
        <member name="M:UnityEngine.AssetReferenceUILabelRestriction.#ctor(System.String[])">
            <summary>
            Creates a new AssetReferenceUILabelRestriction object.
            </summary>
            <param name="allowedLabels">The labels allowed for the AssetReference.</param>
        </member>
        <member name="M:UnityEngine.AssetReferenceUILabelRestriction.ValidateAsset(UnityEngine.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AssetReferenceUILabelRestriction.ValidateAsset(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.AssetReferenceUILabelRestriction.ToString">
            <summary>
            Converts the information about the allowed labels to a formatted string.
            </summary>
            <returns>Returns information about the allowed labels as a string.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1">
            <summary>
            base class for implemented AsyncOperations, implements the needed interfaces and consolidates redundant code
            </summary>
            <typeparam name="TObject">The type of the operation.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Execute">
            <summary>
            This will be called by the resource manager after all dependent operation complete. This method should not be called manually.
            A custom operation should override this method and begin work when it is called.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Destroy">
            <summary>
            This will be called by the resource manager when the reference count of the operation reaches zero. This method should not be called manually.
            A custom operation should override this method and release any held resources
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Progress">
            <summary>
            A custom operation should override this method to return the progress of the operation.
            </summary>
            <returns>Progress of the operation. Value should be between 0.0f and 1.0f</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.DebugName">
            <summary>
            A custom operation should override this method to provide a debug friendly name for the operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.GetDependencies(System.Collections.Generic.List{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})">
            <summary>
            A custom operation should override this method to provide a list of AsyncOperationHandles that it depends on.
            </summary>
            <param name="dependencies">The list that should be populated with dependent AsyncOperationHandles.</param>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Result">
            <summary>
            Accessor to Result of the operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.#ctor">
            <summary>
            Basic constructor for AsyncOperationBase.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.ToString">
            <summary>
            Converts the information about the operation to a formatted string.
            </summary>
            <returns>Returns the information about the operation.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Status">
            <inheritdoc />
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.OperationException">
            <inheritdoc />
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.CheckDoneAndSet">
            <summary>
            判斷當前operation是否完成，如果沒有進行一些操作
            </summary>
            <returns>返回operation是否完成</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Complete(`0,System.Boolean,System.String)">
            <summary>
            Complete the operation and invoke events.
            </summary>
            <remarks>
            An operation is considered to have failed silently if success is true and if errorMsg isn't null or empty.
            The exception handler will be called in cases of silent failures.
            Any failed operations will call Release on any dependencies that succeeded.
            </remarks>
            <param name="result">The result object for the operation.</param>
            <param name="success">True if successful or if the operation failed silently.</param>
            <param name="errorMsg">The error message if the operation has failed.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.Complete(`0,System.Boolean,System.String,System.Boolean)">
            <summary>
            Complete the operation and invoke events.
            </summary>
            <remarks>
            An operation is considered to have failed silently if success is true and if errorMsg isn't null or empty.
            The exception handler will be called in cases of silent failures.
            </remarks>
            <param name="result">The result object for the operation.</param>
            <param name="success">True if successful or if the operation failed silently.</param>
            <param name="errorMsg">The error message if the operation has failed.</param>
            <param name="releaseDependenciesOnFailure">When true, failed operations will release any dependencies that succeeded.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#GetResultAsObject">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#GetDependencies(System.Collections.Generic.List{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#DecrementReferenceCount">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#IncrementReferenceCount">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#InvokeCompletionEvent">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#Start(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,DelegateList{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase`1.UnityEngine#ResourceManagement#AsyncOperations#IAsyncOperation#GetDownloadStatus(System.Collections.Generic.HashSet{System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1">
            <summary>
            Handle for internal operations.  This allows for reference counting and checking for valid references.
            </summary>
            <typeparam name="TObject">The object type of the underlying operation.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.op_Implicit(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{`0})~UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle">
            <summary>
            Conversion from typed to non typed handles.  This does not increment the reference count.
            To convert from non-typed back, use AsyncOperationHandle.Convert&lt;T&gt;()
            </summary>
            <param name="obj">The typed handle to convert.</param>
            <returns>Returns the converted operation handle.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.GetDownloadStatus">
            <summary>
            Return the current download status for this operation and its dependencies.
            </summary>
            <returns>The download status.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Acquire">
            <summary>
            Acquire a new handle to the internal operation.  This will increment the reference count, therefore the returned handle must also be released.
            </summary>
            <returns>A new handle to the operation.  This handle must also be released.</returns>
        </member>
        <member name="E:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Completed">
            <summary>
            Completion event for the internal operation.  If this is assigned on a completed operation, the callback is deferred until the LateUpdate of the current frame.
            </summary>
        </member>
        <member name="E:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.CompletedTypeless">
            <summary>
            Completion event for non-typed callback handlers.  If this is assigned on a completed operation, the callback is deferred until the LateUpdate of the current frame.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.DebugName">
            <summary>
            Debug name of the operation.
            </summary>
        </member>
        <member name="E:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Destroyed">
            <summary>
            Event for handling the destruction of the operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Equals(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{`0})">
            <summary>
            Provide equality for this struct.
            </summary>
            <param name="other">The operation to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.GetHashCode">
            <summary>
            Get hash code of this struct.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.IsDone">
            <summary>
            True if the operation is complete.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.IsValid">
            <summary>
            Check if the handle references an internal operation.
            </summary>
            <returns>True if valid.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.OperationException">
            <summary>
            The exception for a failed operation.  This will be null unless Status is failed.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.PercentComplete">
            <summary>
            The progress of the internal operation.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.ReferenceCount">
            <summary>
            The current reference count of the internal operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Release">
            <summary>
            Release the handle.  If the internal operation reference count reaches 0, the resource will be released.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Result">
            <summary>
            The result object of the operations.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Status">
            <summary>
            The status of the internal operation.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.Task">
            <summary>
            Return a Task object to wait on when using async await.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.System#Collections#IEnumerator#MoveNext">
            <summary>
            Overload for <see cref="M:System.Collections.IEnumerator.MoveNext"/>.
            </summary>
            <returns>Returns true if the enumerator can advance to the next element in the collectin. Returns false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1.System#Collections#IEnumerator#Reset">
            <summary>
            Overload for <see cref="M:System.Collections.IEnumerator.Reset"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle">
            <summary>
            Non typed operation handle.  This allows for reference counting and checking for valid references.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Acquire">
            <summary>
            Acquire a new handle to the internal operation.  This will increment the reference count, therefore the returned handle must also be released.
            </summary>
            <returns>A new handle to the operation.  This handle must also be released.</returns>
        </member>
        <member name="E:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Completed">
            <summary>
            Completion event for the internal operation.  If this is assigned on a completed operation, the callback is deferred until the LateUpdate of the current frame.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Convert``1">
            <summary>
            Converts handle to be typed.  This does not increment the reference count.
            To convert back to non-typed, implicit conversion is available.
            </summary>
            <typeparam name="T">The type of the handle.</typeparam>
            <returns>A new handle that is typed.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.DebugName">
            <summary>
            Debug name of the operation.
            </summary>
        </member>
        <member name="E:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Destroyed">
            <summary>
            Event for handling the destruction of the operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.GetDependencies(System.Collections.Generic.List{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle})">
            <summary>
            Get dependency operations.
            </summary>
            <param name="deps"></param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.GetHashCode">
            <summary>
            Get hash code of this struct.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.IsDone">
            <summary>
            True if the operation is complete.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.IsValid">
            <summary>
            Check if the internal operation is not null and has the same version of this handle.
            </summary>
            <returns>True if valid.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.OperationException">
            <summary>
            The exception for a failed operation.  This will be null unless Status is failed.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.PercentComplete">
            <summary>
            The progress of the internal operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.GetDownloadStatus">
            <summary>
            Return the current download status for this operation and its dependencies.  In some instances, the information will not be available.  This can happen if the operation
            is dependent on the initialization operation for addressables.  Once the initialization operation completes, the information returned will be accurate.
            </summary>
            <returns>The download status.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.ReferenceCount">
            <summary>
            The current reference count of the internal operation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Release">
            <summary>
            Release the handle.  If the internal operation reference count reaches 0, the resource will be released.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Result">
            <summary>
            The result object of the operations.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Status">
            <summary>
            The status of the internal operation.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.Task">
            <summary>
            Return a Task object to wait on when using async await.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.System#Collections#IEnumerator#MoveNext">
            <summary>
            Overload for <see cref="M:System.Collections.IEnumerator.MoveNext"/>.
            </summary>
            <returns>Returns true if the enumerator can advance to the next element in the collectin. Returns false otherwise.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle.System#Collections#IEnumerator#Reset">
            <summary>
            Overload for <see cref="M:System.Collections.IEnumerator.Reset"/>.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus">
            <summary>
            Options for IAsyncOperations status values
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus.None">
            <summary>
            Use to indicate that the operation is still in progress.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus.Succeeded">
            <summary>
            Use to indicate that the operation succeeded.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus.Failed">
            <summary>
            Use to indicate that the operation failed.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus">
            <summary>
            Contains download information for async operations.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus.TotalBytes">
            <summary>
            The number of bytes downloaded by the operation and all of its dependencies.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus.DownloadedBytes">
            <summary>
            The total number of bytes needed to download by the operation and dependencies.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus.IsDone">
            <summary>
            Is the operation completed.  This is used to determine if the computed Percent should be 0 or 1 when TotalBytes is 0.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus.Percent">
            <summary>
            Returns the computed percent complete as a float value between 0 &amp; 1.  If TotalBytes == 0, 1 is returned.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent">
            <summary>
            Diagnostic event data.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Graph">
            <summary>
            Gets the graph id that this event is intended for
            </summary>
            <value>The graph Id</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.ObjectId">
            <summary>
            Unique object identifier for this event
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.DisplayName">
            <summary>
            Display name for event
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Dependencies">
            <summary>
            Array of object identifiers that are dependencies for this event
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Stream">
            <summary>
            The stream id for the event.  Each graph may display multiple streams of data for the same event Id
            </summary>
            <value>Stream Id</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Frame">
            <summary>
            The frame that the event occurred
            </summary>
            <value>Frame number</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Value">
            <summary>
            The value of the event. This value depends on the event type
            </summary>
            <value>Event value</value>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            DiagnosticEvent constructor
            </summary>
            <param name="graph">Graph id.</param>
            <param name="name">Event name.</param>
            <param name="id">Event id.</param>
            <param name="stream">Stream index.</param>
            <param name="frame">Frame number.</param>
            <param name="value">Event value.</param>
            <param name="deps">Array of dependency event ids.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Serialize">
            <summary>
            Serializes the event into JSON and then encodes with System.Text.Encoding.ASCII.GetBytes
            </summary>
            <returns>Byte array containing serialized version of the event</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Deserialize(System.Byte[])">
            <summary>
            Deserializes event from a byte array created by the <see cref="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent.Serialize"/> method
            </summary>
            <returns>Deserialized DiagnosticEvent struct</returns>
            <param name="data">Serialized data</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollectorSingleton">
            <summary>
            Collects ResourceManager events and passed them on the registered event handlers.  In editor play mode, events are passed directly to the ResourceManager profiler window.
            In player builds, events are sent to the editor via the EditorConnection API.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollectorSingleton.PlayerConnectionGuid">
            <summary>
            The guid used for the PlayerConnect messaging system.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollectorSingleton.GetGameObjectName">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollectorSingleton.RegisterEventHandler(System.Action{UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent},System.Boolean,System.Boolean)">
            <summary>
            Register for diagnostic events.  If there is no collector, this will fail and return false.
            </summary>
            <param name="handler">The handler method action.</param>
            <param name="register">Register or unregister.</param>
            <param name="create">If true, the event collector will be created if needed.</param>
            <returns>True if registered, false if not.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollectorSingleton.UnregisterEventHandler(System.Action{UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent})">
            <summary>
            Unregister event hander
            </summary>
            <param name="handler">Method or delegate that will handle the events</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollectorSingleton.PostEvent(UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent)">
            <summary>
            Send a <see cref="T:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent"/> event to all registered handlers
            </summary>
            <param name="diagnosticEvent">The event to send</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollector">
            <summary>
            Collects ResourceManager events and passed them on the registered event handlers.  In editor play mode, events are passed directly to the ResourceManager profiler window.
            In player builds, events are sent to the editor via the EditorConnection API.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollector.PlayerConnectionGuid">
            <summary>
            The guid used for the PlayerConnect messaging system.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollector.FindOrCreateGlobalInstance">
            <summary>
            Retrieves the global event collector.  A new one is created if needed.
            </summary>
            <returns>The event collector global instance.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollector.RegisterEventHandler(System.Action{UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent},System.Boolean,System.Boolean)">
            <summary>
            Register for diagnostic events.  If there is no collector, this will fail and return false.
            </summary>
            <param name="handler">The handler method action.</param>
            <param name="register">Register or unregister.</param>
            <param name="create">If true, the event collector will be created if needed.</param>
            <returns>True if registered, false if not.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollector.UnregisterEventHandler(System.Action{UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent})">
            <summary>
            Unregister event hander
            </summary>
            <param name="handler">Method or delegate that will handle the events</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEventCollector.PostEvent(UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent)">
            <summary>
            Send a <see cref="T:UnityEngine.ResourceManagement.Diagnostics.DiagnosticEvent"/> event to all registered handlers
            </summary>
            <param name="diagnosticEvent">The event to send</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.IResLoaderAnalysisImpl.AddEntry(System.String,System.Type,UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysisLoadType)">
            <summary>
            Add ResLoad Analysis entry. Returns (long) `AnalysisEntryID`
            </summary>
            <returns>(long) `AnalysisEntryID`</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.IResLoaderAnalysisImpl.SetEntryLocations(System.Int64,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation})">
            <summary>
            Add dependencies Analysis for entry.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.IResLoaderAnalysisImpl.SetStatus(System.Int64,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus)">
            <summary>
            Set entry status. Usually set to `Succeeded` or `Failed`.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.IResLoaderAnalysisImpl.SetDepLocationPath(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysisPathType,UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions)">
            <summary>
            Set dep location path, with bundle options.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.IResLoaderAnalysisImpl.SetDepLocationStatus(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus)">
            <summary>
            Set dep location status. Usually set to `Succeeded` or `Failed`.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetImplementation(UnityEngine.ResourceManagement.Diagnostics.IResLoaderAnalysisImpl)">
            <summary>
            set the actual implementation of `IResLoaderAnalysisImpl`, used as injection.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.AddEntry(System.String,System.Type,UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysisLoadType)">
            <summary>
            Add ResLoad Analysis entry. Returns (long) `AnalysisEntryID`
            </summary>
            <returns>(long) `AnalysisEntryID`</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.TrackHandleId``1(System.Int64,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            Set entry for handle.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetEntryLocations(System.Int64,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Add dependencies Analysis for entry.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetEntryLocations(System.Int64,System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation})">
            <summary>
            Add dependencies Analysis for entry.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetStatus(System.Int64,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus)">
            <summary>
            Set entry status. Usually set to `Succeeded` or `Failed`.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetDepLocationPath(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysisPathType,UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions)">
            <summary>
            Set dep location path, with bundle options.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetDepLocationStatus(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationStatus)">
            <summary>
            Set dep location status. Usually set to `Succeeded` or `Failed`.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.TrackSetStatus``1(System.Int64,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0})">
            <summary>
            Set entry status. Usually set to `Succeeded` or `Failed`.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResLoaderAnalysis.SetCompleteStatus(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Set entry Complete status. Usually set to `Succeeded` or `Failed`.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo">
            <summary>
            小包资源miss信息，包括字段：`missedCount` 小包资源miss数； `usedTotalCount` 使用小包资源总数； `missRate` miss率 等等。
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.usedTotalCount">
            使用小包资源总数。 计数规则：小包化转化过的资源，在前台使用到（出现在显示场景树中被Awake）。 已去重。
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.missedCount">
            小包资源miss数。 判定规则：小包化低清转化过的资源，在前台使用到（出现在显示场景树中被Awake）时、本地还未cache下载好，判定为Miss，此时可能出现模糊表现。 已去重。
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.missRate">
            miss率
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.bgCacheTotalCount">
            后台下载的清单资源总数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.bgCachedCount">
            后台下载的本地已缓存数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.orderListTotalCount">
            下载顺序列表的全部资源总数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.orderCachedCount">
            下载顺序列表的本地已缓存数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissInfo.firstPlayTimeSec">
            <summary>
            新手游戏时间，单位：秒，`-1`作为无效值
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissEvents.DelegateMissCountChange">
            <summary>
            miss数改变时的事件回调方法
            </summary>
            <param name="key">{string} 发生miss的资源key。</param>
            <param name="missedCount">{int} 小包资源miss数。</param>
            <param name="usedTotalCount">{int} 使用小包资源总数。</param>
            <param name="missRate">{float} miss率 = 小包资源miss数 / 使用小包资源总数.</param>
        </member>
        <member name="E:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissEvents.OnMissCountChange">
            <summary>
            miss数改变时的事件回调
            方法参数参考：@see: <see cref="T:UnityEngine.ResourceManagement.Diagnostics.DownloadOrderMissEvents.DelegateMissCountChange"/>
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsRecordEnabled">
            <summary>
            是否已开启录制顺序。
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsOrderEnabled">
            <summary>
            是否开启顺序下载功能。 默认 false
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsMissInfoLogEnabled">
            <summary>
            提示资源miss输出log。 默认 false  <br/>
            注：资源miss判定规则：前台下载请求时，但未本地未缓存好，即Miss;  首次游戏前N分钟新手时间里，前台下载请求时，没在orderList的，也报本地miss日志。  <br/>
            注：首次游戏N分钟游戏时间设置：<see cref="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.FirstPlayTimeMinutes"/>  <br/>
            注：<see cref="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsOrderEnabled"/> true 才能生效
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.FirstPlayTimeMinutes">
            <summary>
            用于判断首次游戏新手时间的游玩分钟数。 默认 20 分钟  <br/>
            注：设为小于等于0时，此功能关闭  <br/>
            注：<see cref="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsOrderEnabled"/> true 且 <see cref="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsMissInfoLogEnabled"/> true 才能生效
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsAutoStartPlayTime">
            <summary>
            是否自动计时游戏时间（例如DownloadAll开始）。 默认 true  <br/>
            计时游戏时间用于 Miss Info 信息中提示 playedTime。  <br/>
            如果设置为false，手动调用 <see cref="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.OnTimeStartEvent"/> 才会开始计时，建议在后台下载确认同意开始时调用。
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.SetCatalogHash(System.String)">
            <summary>
            todo: 注释说明 ResourcesRecorder SetCatalogHash 的作用
            </summary>
            <param name="catalogHash"></param>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsUsingDownLoadOrderList">
            <summary>
            是否正在使用下载顺序列表  <br/>
            注：<see cref="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsOrderEnabled"/> 开启、且 DownloadAll 开始后可判定到真实状态。  <br/>
            注：<see cref="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.IsOrderEnabled"/> 开启时，也可能由于顺序列表资源配置错误、或读取失败等，导致没有在使用顺序列表。
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.DownLoadOrderListCount">
            <summary>
            正在使用的下载顺序列表长度  <br/>
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.OnTimeStartEvent">
            <summary>
            当认为时间开始（例如后台下载确认同意开始、DownloadAll开始）
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.OnTimeUpdateEvent">
            <summary>
            当时间更新
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.OnCreateDownloadRequest(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            当发生下载事件
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.OnDownloadRequestError(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            当Download出错
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.OnDownloadAllComplete(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            当DownloadAll完成
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.ReportMissInfoForEvent(System.String,System.String)">
            <summary>
            当发生特定报告MissInfo的事件
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.missReportUseCountInterval">
            <summary>
            每 n 个使用到资源 允许报告 miss信息
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.missReportBgCacheCountInterval">
            <summary>
            每 n 个后台下载 允许报告 miss信息
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.missReportTimeSecInterval">
            <summary>
            距离上次报告经过 n 秒 允许报告 miss信息
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.usedTotalCount">
            使用小包资源总数。 计数规则：小包化转化过的资源，在前台使用到（出现在显示场景树中被Awake）。 已去重。
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.missedCount">
            小包资源miss数。 判定规则：小包化低清转化过的资源，在前台使用到（出现在显示场景树中被Awake）时、本地还未cache下载好，判定为Miss，此时可能出现模糊表现。 已去重。
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.missedNewPlayOrderCount">
            针对前期游戏新手时间里，小包资源DownloadOrder的miss数
        </member>
        <member name="P:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.missRate">
            miss率
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.bgCacheTotalCount">
            后台下载的清单资源总数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.bgCachedCount">
            后台下载的本地已缓存数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.orderListTotalCount">
            下载顺序列表的全部资源总数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.orderCachedCount">
            下载顺序列表的本地已缓存数
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.firstPlayTimeSec">
            <summary>
            新手游戏时间，单位：秒，`-1`作为无效值
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.previousSavedPlayTimeSec">
            <summary>
            前次已保存的新手游戏时间，单位：秒，`-1`作为无效值
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Diagnostics.ResourcesRecorderUtil.firstPlayTimeMinute">
            <summary>
            新手游戏时间，单位：分钟，`-1`作为无效值
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.InitDownloadReporter">
            <summary>
            设定一些初始的参数
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.IncDownloadData(System.String,System.Boolean,System.Boolean,UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DownloadResultType,System.Int64,System.Single,System.String,System.Boolean)">
            <summary>
            录入一条具体的下载信息
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.IncRequestData(System.String,System.Boolean,System.Boolean)">
            <summary>
            录入请求数据，目前主要用于录入miss信息
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.IncAssetKeyAndErrorString(System.String,System.String)">
            <summary>
            录入自定义错误Tag
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.ChangeNetType(UnityEngine.NetworkReachability)">
            <summary>
            更改网络类型
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.DownloadAllStart">
            <summary>
            下载开始
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.DownloadAllComplete(System.Int32,System.Int32,System.Int32)">
            <summary>
            下载结束，停止上传
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Diagnostics.StarkDataReport.DataReportUtil.ResetDownloadAllTime">
            <summary>
            重置下载时间
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceLocations.ILocationSizeData">
            <summary>
            Interface for computing size of loading a location.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.ILocationSizeData.ComputeSize(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.ResourceManager)">
            <summary>
            Compute the numder of bytes need to download for the specified location.
            </summary>
            <param name="location">The location to compute the size for.</param>
            <param name="resourceManager">The object that contains all the resource locations.</param>
            <returns>The size in bytes of the data needed to be downloaded.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.ILocationSizeData.GetFileSize">
            <summary>
            获取文件大小. 即构建AA资源后options中保存的大小.
            </summary>
            <returns>The size in bytes of the file on remote server.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation">
            <summary>
            Contains enough information to load an asset (what/where/how/dependencies)
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.InternalId">
            <summary>
            Internal name used by the provider to load this location
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.ProviderId">
            <summary>
            Matches the provider used to provide/load this location
            </summary>
            <value>The provider id.</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.Dependencies">
            <summary>
            Gets the dependencies to other IResourceLocations
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.Hash(System.Type)">
            <summary>
            The hash of this location combined with the specified type.
            </summary>
            <param name="resultType">The type of the result.</param>
            <returns>The combined hash of the location and the type.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.DependencyHashCode">
            <summary>
            The precomputed hash code of the dependencies.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.HasDependencies">
            <summary>
            Gets the dependencies to other IResourceLocations
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.Data">
            <summary>
            Gets any data object associated with this locations
            </summary>
            <value>The object.</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.PrimaryKey">
            <summary>
            Primary address for this location.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation.ResourceType">
            <summary>
            The type of the resource for th location.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase">
            <summary>
            Basic implementation of IResourceLocation
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.InternalId">
            <summary>
            Internal id.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.ProviderId">
            <summary>
            Provider Id.  This is usually set to the FullName property of the type of the provider class.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.Dependencies">
            <summary>
            List of dependencies that must be loaded before this location.  This value may be null.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.HasDependencies">
            <summary>
            Convenience method to see if there are any dependencies.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.Data">
            <summary>
            Data that is intended for the provider.  Objects can be serialized during the build process to be used by the provider.  An example of usage is cache usage data for AssetBundleProvider.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.PrimaryKey">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.DependencyHashCode">
            <summary>
            Precomputed hash code of dependencies.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.ResourceType">
            <summary>
            The type of the resource for th location.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.Hash(System.Type)">
            <summary>
            Compute the hash of this location for the specified type.
            </summary>
            <param name="t">The type to hash with.</param>
            <returns>The combined hash code of the location and type.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.ToString">
            <summary>
            Returns the Internal name used by the provider to load this location
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.#ctor(System.String,System.String,System.String,System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation[])">
            <summary>
            Construct a new ResourceLocationBase.
            </summary>
            <param name="name">The name of the location.  This is usually set to the primary key, or "address" of the location.</param>
            <param name="id">The internal id of the location.  This is used by the IResourceProvider to identify the object to provide.  For example this may contain the file path or url of an asset.</param>
            <param name="providerId">The provider id.  This is set to the FullName of the type of the provder class.</param>
            <param name="t">The type of the object to provide.</param>
            <param name="dependencies">Locations for the dependencies of this location.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceLocations.ResourceLocationBase.ComputeDependencyHash">
            <summary>
            Compute the dependency hash for this location
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceManager">
            <summary>
            Entry point for ResourceManager API
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType">
            <summary>
            Options for event types that will be sent by the ResourceManager
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType.AsyncOperationFail">
            <summary>
            Use to indicate that an operation failed.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType.AsyncOperationCreate">
            <summary>
            Use to indicate that an operation was created.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType.AsyncOperationPercentComplete">
            <summary>
            Use to indicate the percentage of completion for an operation was updated.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType.AsyncOperationComplete">
            <summary>
            Use to indicate that an operation has completed.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType.AsyncOperationReferenceCount">
            <summary>
            Use to indicate that the reference count of an operation was modified.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType.AsyncOperationDestroy">
            <summary>
            Use to indicate that an operation was destroyed.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext">
            <summary>
            Container for information associated with a Diagnostics event.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.OperationHandle">
            <summary>
            Operation handle for the event.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.Type">
            <summary>
            The type of diagnostic event.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.EventValue">
            <summary>
            The value for this event.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.Location">
            <summary>
            The IResourceLocation being provided by the operation triggering this event.
            This value is null if the event is not while providing a resource.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.Context">
            <summary>
            Addition data included with this event.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.Error">
            <summary>
            Any error that occured.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext.#ctor(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType,System.Int32,System.String,System.Object)">
            <summary>
            Construct a new DiagnosticEventContext.
            </summary>
            <param name="op">Operation handle for the event.</param>
            <param name="type">The type of diagnostic event.</param>
            <param name="eventValue">The value for this event.</param>
            <param name="error">Any error that occured.</param>
            <param name="context">Additional context data.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceManager.KeyCaseMode">
            <summary>
            自定义 key 大小写模式，默认`AllCaseSensitive`
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.KeyCaseMode.DefaultSensitive">
            <summary>
            默认区分大小写。仅部分 GetLocation 的接口允许忽略大小写。默认。
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.KeyCaseMode.AllIgnoreCase">
            <summary>
            全部忽略大小写。
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceManager.KeyCaseMode.AllCaseSensitiveOnly">
            <summary>
            区分大小写，且全局禁用忽略大小写功能。
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.ExceptionHandler">
            <summary>
            Global exception handler.  This will be called whenever an IAsyncOperation.OperationException is set to a non-null value.
            See the [ResourceManager.ExceptionHandler](../manual/ExceptionHandler.html) documentation for more details.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.InternalIdTransformFunc">
            <summary>
            Functor to transform internal ids before being used by the providers.
            See the [TransformInternalId](../manual/TransformInternalId.html) documentation for more details.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.TransformInternalId(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Checks for an internal id transform function and uses it to modify the internal id value.
            </summary>
            <param name="location">The location to transform the internal id of.</param>
            <returns>If a transform func is set, use it to pull the local id. otheriwse the InternalId property of the location is used.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.AddUpdateReceiver(UnityEngine.ResourceManagement.IUpdateReceiver)">
            <summary>
            Add an update reveiver.
            </summary>
            <param name="receiver">The object to add. The Update method will be called until the object is removed. </param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.RemoveUpdateReciever(UnityEngine.ResourceManagement.IUpdateReceiver)">
            <summary>
            Remove update receiver.
            </summary>
            <param name="receiver">The object to remove.</param>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.Allocator">
            <summary>
            The allocation strategy object.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.ResourceProviders">
            <summary>
            Gets the list of configured <see cref="T:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider"/> objects. Resource Providers handle load and release operations for <see cref="T:UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation"/> objects.
            </summary>
            <value>The resource providers list.</value>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceManager.CertificateHandlerInstance">
            <summary>
            The CertificateHandler instance object.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.#ctor(UnityEngine.ResourceManagement.Util.IAllocationStrategy)">
            <summary>
            Constructor for the resource manager.
            </summary>
            <param name="alloc">The allocation strategy to use.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ClearDiagnosticsCallback">
            <summary>
            Clears out the diagnostics callback handler.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ClearDiagnosticCallbacks">
            <summary>
            Clears out the diagnostics callbacks handler.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.UnregisterDiagnosticCallback(System.Action{UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext})">
            <summary>
            Unregister a handler for diagnostic events.
            </summary>
            <param name="func">The event handler function.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.RegisterDiagnosticCallback(System.Action{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventType,System.Int32,System.Object})">
            <summary>
            Register a handler for diagnostic events.
            </summary>
            <param name="func">The event handler function.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.RegisterDiagnosticCallback(System.Action{UnityEngine.ResourceManagement.ResourceManager.DiagnosticEventContext})">
            <summary>
            Register a handler for diagnostic events.
            </summary>
            <param name="func">The event handler function.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.GetResourceProvider(System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Gets the appropriate <see cref="T:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider"/> for the given <paramref name="location"/> and <paramref name="type"/>.
            </summary>
            <returns>The resource provider. Or null if an appropriate provider cannot be found</returns>
            <param name="t">The desired object type to be loaded from the provider.</param>
            <param name="location">The resource location.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideResource(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Type)">
            <summary>
            Load the <typeparamref name="TObject"/> at the specified <paramref name="location"/>.
            </summary>
            <returns>An async operation.</returns>
            <param name="location">Location to load.</param>
            <typeparam name="TObject">Object type to load.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideResource``1(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Load the <typeparamref name="TObject"/> at the specified <paramref name="location"/>.
            </summary>
            <returns>An async operation.</returns>
            <param name="location">Location to load.</param>
            <typeparam name="TObject">Object type to load.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideBundleDownloadTyped(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Download the bundle at the specified <paramref name="location"/>.
            </summary>
            <returns>An async operation.</returns>
            <param name="location">Location to load.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideBundleDownload(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Download the bundle at the specified <paramref name="location"/>.
            </summary>
            <returns>An async operation.</returns>
            <param name="location">Location to load.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.StartOperation``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationBase{``0},UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Registers an operation with the ResourceManager. The operation will be executed when the <paramref name="dependency"/> completes.
            This should only be used when creating custom operations.
            </summary>
            <returns>The AsyncOperationHandle used to access the result and status of the operation.</returns>
            <param name="operation">The custom AsyncOperationBase object</param>
            <param name="dependency">Execution of the operation will not occur until this handle completes. A default handle can be passed if no dependency is required.</param>
            <typeparam name="TObject">Object type associated with this operation.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.CreateCompletedOperation``1(``0,System.String)">
            <summary>
            Creates an operation that has already completed with a specified result and error message./>.
            </summary>
            <param name="result">The result that the operation will provide.</param>
            <param name="errorMsg">The error message if the operation should be in the failed state. Otherwise null or empty string.</param>
            <typeparam name="TObject">Object type.</typeparam>
            <returns>The operation handle used for the completed operation.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.Release(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Release the operation associated with the specified handle
            </summary>
            <param name="handle">The handle to release.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.Acquire(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle)">
            <summary>
            Increment reference count of operation handle.
            </summary>
            <param name="handle">The handle to the resource to increment the reference count for.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.CreateGroupOperation``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation})">
            <summary>
            Create a group operation for a set of locations.
            </summary>
            <typeparam name="T">The expected object type for the operations.</typeparam>
            <param name="locations">The list of locations to load.</param>
            <returns>The operation for the entire group.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.CreateGenericGroupOperation(System.Collections.Generic.List{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle},System.Boolean)">
            <summary>
            Create a group operation for a set of AsyncOperationHandles
            </summary>
            <param name="operations">The list of operations that need to complete.</param>
            <param name="releasedCachedOpOnComplete">Determine if the cached operation should be released or not.</param>
            <returns>The operation for the entire group</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideResources``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Action{``0})">
            <summary>
            Asynchronously load all objects in the given collection of <paramref name="locations"/>.
            If any matching location fails, all loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            </summary>
            <returns>An async operation that will complete when all individual async load operations are complete.</returns>
            <param name="locations">locations to load.</param>
            <param name="callback">This callback will be invoked once for each object that is loaded.</param>
            <typeparam name="TObject">Object type to load.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideResources``1(System.Collections.Generic.IList{UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation},System.Boolean,System.Action{``0})">
            <summary>
            Asynchronously load all objects in the given collection of <paramref name="locations"/>.
            </summary>
            <returns>An async operation that will complete when all individual async load operations are complete.</returns>
            <param name="locations">locations to load.</param>
            <param name="releaseDependenciesOnFailure">
            If all matching locations succeed, this parameter is ignored.
            When true, if any matching location fails, all loads and dependencies will be released.  The returned .Result will be null, and .Status will be Failed.
            When false, if any matching location fails, the returned .Result will be an IList of size equal to the number of locations attempted.  Any failed location will
            correlate to a null in the IList, while successful loads will correlate to a TObject in the list. The .Status will still be Failed.
            When true, op does not need to be released if anything fails, when false, it must always be released.
            </param>
            <param name="callback">This callback will be invoked once for each object that is loaded.</param>
            <typeparam name="TObject">Object type to load.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.CreateChainOperation``2(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``1},System.Func{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``1},UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0}})">
            <summary>
            Create a chain operation to handle dependencies.
            </summary>
            <typeparam name="TObject">The type of operation handle to return.</typeparam>
            <typeparam name="TObjectDependency">The type of the dependency operation.</typeparam>
            <param name="dependentOp">The dependency operation.</param>
            <param name="callback">The callback method that will create the dependent operation from the dependency operation.</param>
            <returns>The operation handle.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.CreateChainOperation``1(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,System.Func{UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{``0}})">
            <summary>
            Create a chain operation to handle dependencies.
            </summary>
            <typeparam name="TObject">The type of operation handle to return.</typeparam>
            <param name="dependentOp">The dependency operation.</param>
            <param name="callback">The callback method that will create the dependent operation from the dependency operation.</param>
            <returns>The operation handle.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideScene(UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Load a scene at a specificed resource location.
            </summary>
            <param name="sceneProvider">The scene provider instance.</param>
            <param name="location">The location of the scene.</param>
            <param name="loadMode">The load mode for the scene.</param>
            <param name="activateOnLoad">If false, the scene will be loaded in the background and not activated when complete.</param>
            <param name="priority">The priority for the load operation.</param>
            <returns>Async operation handle that will complete when the scene is loaded.  If activateOnLoad is false, then Activate() will need to be called on the SceneInstance returned.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ReleaseScene(UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.ResourceManagement.ResourceProviders.SceneInstance})">
            <summary>
            Release a scene.
            </summary>
            <param name="sceneProvider">The scene provider.</param>
            <param name="sceneLoadHandle">The operation handle used to load the scene.</param>
            <returns>An operation handle for the unload.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.ProvideInstance(UnityEngine.ResourceManagement.ResourceProviders.IInstanceProvider,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters)">
            <summary>
            Asynchronously instantiate a prefab (GameObject) at the specified <paramref name="location"/>.
            </summary>
            <returns>Async operation that will complete when the prefab is instantiated.</returns>
            <param name="provider">An implementation of IInstanceProvider that will be used to instantiate and destroy the GameObject.</param>
            <param name="location">Location of the prefab.</param>
            <param name="instantiateParameters">A struct containing the parameters to pass the the Instantiation call.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.CleanupSceneInstances(UnityEngine.SceneManagement.Scene)">
            <summary>
            Releases all instances the given scence.
            </summary>
            <param name="scene">The scene whose instances should be released.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceManager.Dispose">
            <summary>
            Disposes internal resources used by the resource manager
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.IAssetBundleResource">
            <summary>
            Wrapper for asset bundles.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IAssetBundleResource.GetAssetBundle">
            <summary>
            Retrieves the asset bundle.
            </summary>
            <returns>Returns the asset bundle.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions">
            <summary>
            Contains cache information to be used by the AssetBundleProvider
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.Hash">
            <summary>
            Hash value of the asset bundle.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.Crc">
            <summary>
            CRC value of the bundle.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.Timeout">
            <summary>
            Sets UnityWebRequest to attempt to abort after the number of seconds in timeout have passed.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.ChunkedTransfer">
            <summary>
            Indicates whether the UnityWebRequest system should employ the HTTP/1.1 chunked-transfer encoding method.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.RedirectLimit">
            <summary>
            Indicates the number of redirects which this UnityWebRequest will follow before halting with a “Redirect Limit Exceeded” system error.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.RetryCount">
            <summary>
            Indicates the number of times the request will be retried.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.BundleName">
            <summary>
            The name of the original bundle.  This does not contain the appended hash.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.BundleSize">
            <summary>
            The size of the bundle, in bytes.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.UseCrcForCachedBundle">
            <summary>
            If false, the CRC will not be used when loading bundles from the cache.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.ComputeSize(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.ResourceManager)">
            <summary>
            Computes the amount of data needed to be downloaded for this bundle.
            </summary>
            <param name="location">The location of the bundle.</param>
            <param name="resourceManager">The object that contains all the resource locations.</param>
            <returns>The size in bytes of the bundle that is needed to be downloaded.  If the local cache contains the bundle or it is a local bundle, 0 will be returned.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.GetFileSize">
            <summary>
            获取文件大小. 即构建AA资源后options中保存的大小.
            </summary>
            <returns>The size in bytes of the file.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleRequestOptions.ReadyRes">
            <summary>
            记为已下载，之后ComputeSize时直接返回0
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleResource.GetAssetBundle">
            <summary>
            Get the asset bundle object managed by this resource.  This call may force the bundle to load if not already loaded.
            </summary>
            <returns>The asset bundle.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleResource.Unload">
            <summary>
            Unloads all resources associated with this asset bundle.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider">
            <summary>
            IResourceProvider for asset bundles.  Loads bundles via UnityWebRequestAssetBundle API if the internalId starts with "http".  If not, it will load the bundle via AssetBundle.LoadFromFileAsync.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.EnableStrictBundleCheck">
            <summary>
            是否开启严格检查下载后的Bundle。
            开启后，除本来就检查`webReq.error`是否有错误外，还将检查`webReq.downloadHandler`的`.assetBundle`属性，如果是`null`也视为失败。
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.IsDownloadLogVerbose">
            <summary>
            是否开启Bundle下载的Verbose log
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.IsEnableDownloadSizeCache">
            <summary>
            是否开启Bundle的GetDownloadSize缓存。默认`true`。
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.IncDownloadSizeCacheVersion">
            <summary>
            note: Experimental: Development test usage only.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.GetDefaultType(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetBundleProvider.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <summary>
            Releases the asset bundle via AssetBundle.Unload(true).
            </summary>
            <param name="location">The location of the asset to release</param>
            <param name="asset">The asset in question</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.AssetDatabaseProvider">
            <summary>
            Provides assets loaded via the AssetDatabase API.  This provider is only available in the editor and is used for fast iteration or to simulate asset bundles when in play mode.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetDatabaseProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetDatabaseProvider.#ctor(System.Single)">
            <summary>
            Constructor that allows for a sepcified delay for all requests.
            </summary>
            <param name="delay">Time in seconds for each delay call.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AssetDatabaseProvider.CanProvide(System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.AtlasSpriteProvider">
            <summary>
            Provides sprites from atlases
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.AtlasSpriteProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.BackgroundBundleResource">
            <summary>
            Performance optimized simple IAssetBundleResource for bundle download, which has much less gc alloc and cpu cost.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.BackgroundBundleResource.Unload">
            <summary>
            Unloads all resources associated with this asset bundle.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.BackgroundDownloadProvider">
            <summary>
            Performance optimized simple provider for bundle download, which has much less gc alloc and cpu cost.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.BackgroundDownloadProvider.IsDownloadLogVerbose">
            <summary>
            是否开启 Background Bundle Download 下载的Verbose log. 默认 false.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.BackgroundDownloadProvider.GetDefaultType(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.BackgroundDownloadProvider.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <summary>
            Releases the asset bundle via AssetBundle.Unload(true).
            </summary>
            <param name="location">The location of the asset to release</param>
            <param name="asset">The asset in question</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.BundledAssetProvider">
            <summary>
            Provides assets stored in an asset bundle.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.BundledAssetProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters">
            <summary>
            Class that contains properties to apply to instantiated objects.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.Position">
            <summary>
            Position in world space to instantiate object.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.Rotation">
            <summary>
            Rotation in world space to instantiate object.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.Parent">
            <summary>
            Transform to set as the parent of the instantiated object.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.InstantiateInWorldPosition">
            <summary>
            When setting the parent Transform, this sets whether to preserve instance transform relative to world space or relative to the parent.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.SetPositionRotation">
            <summary>
            Flag to tell the IInstanceProvider whether to set the position and rotation on new instances.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.#ctor(UnityEngine.Transform,System.Boolean)">
            <summary>
            Create a new InstantationParameters class that will set the parent transform and use the prefab transform.
            </summary>
            <param name="parent">Transform to set as the parent of the instantiated object.</param>
            <param name="instantiateInWorldSpace">Flag to tell the IInstanceProvider whether to set the position and rotation on new instances.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.#ctor(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Create a new InstantationParameters class that will set the position, rotation, and Transform parent of the instance.
            </summary>
            <param name="position">Position relative to the parent to set on the instance.</param>
            <param name="rotation">Rotation relative to the parent to set on the instance.</param>
            <param name="parent">Transform to set as the parent of the instantiated object.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters.Instantiate``1(``0)">
            <summary>
            Instantiate an object with the parameters of this object.
            </summary>
            <typeparam name="TObject">Object type. This type must be of type UnityEngine.Object.</typeparam>
            <param name="source">Object to instantiate.</param>
            <returns>Returns the instantiated object.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.IInstanceProvider">
            <summary>
            Interface that provides instances of objects.  This is used in ResourceManager.Instantiate* calls.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IInstanceProvider.ProvideInstance(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.GameObject},UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters)">
            <summary>
            Provide an instance of the gameobject contained in the prefabHandle.
            </summary>
            <param name="resourceManager">The object that contains all the resource locations.</param>
            <param name="prefabHandle">The operation handle for the prefab to instantiate.</param>
            <param name="instantiateParameters">The parameters to use for instantation.</param>
            <returns>The instantiated object.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IInstanceProvider.ReleaseInstance(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.GameObject)">
            <summary>
            Release an instance.
            </summary>
            <param name="resourceManager">The object that contains all the resource locations.</param>
            <param name="instance">The instance to release.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.ProviderBehaviourFlags">
            <summary>
            Options for resource provider behavior.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceProviders.ProviderBehaviourFlags.None">
            <summary>
            Indicates that the provider does not have extra specified behavior.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceProviders.ProviderBehaviourFlags.CanProvideWithFailedDependencies">
            <summary>
            Indicates that the provider will still fulfill requests even with failed dependencies.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle">
            <summary>
            Container for all data need by providers to fulfill requests.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.ResourceManager">
            <summary>
            The ResourceManager used to create the operation.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.Type">
            <summary>
            The requested object type.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.Location">
            <summary>
            The location for the request.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.DependencyCount">
            <summary>
            Number of dependencies.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.GetDependency``1(System.Int32)">
            <summary>
            Get a specific dependency object.
            </summary>
            <typeparam name="TDepObject">The dependency type.</typeparam>
            <param name="index">The index of the dependency.</param>
            <returns>The dependency object.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.GetDependencies(System.Collections.Generic.IList{System.Object})">
            <summary>
            Get the depedency objects.
            </summary>
            <param name="list">The list of dependecies to fill in.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.SetProgressCallback(System.Func{System.Single})">
            <summary>
            Set the func for handling progress requests.
            </summary>
            <param name="callback">The callback function.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.SetDownloadProgressCallbacks(System.Func{UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus})">
            <summary>
            Set the func for handling download progress requests.
            </summary>
            <param name="callback">The callback function.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle.Complete``1(``0,System.Boolean,System.Exception)">
            <summary>
            Called to complete the operation.
            </summary>
            <typeparam name="T">The type of object requested.</typeparam>
            <param name="result">The result object.</param>
            <param name="status">True if the operation was successful, false otherwise.</param>
            <param name="exception">The exception if the operation failed.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider">
            <summary>
            Resoure Providers handle loading (Provide) and unloading (Release) of objects
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider.ProviderId">
            <summary>
            Unique identifier for this provider, used by Resource Locations to find a suitable Provider
            </summary>
            <value>The provider identifier.</value>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider.GetDefaultType(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            The default type of object that this provider can provide.
            </summary>
            <param name="location">The location that can be used to determine the type.</param>
            <returns>The type of object that can be provided.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider.CanProvide(System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Determine if this provider can provide the specified object type from the specified location.
            </summary>
            <param name="type">The type of object.</param>
            <param name="location">The resource location of the object.</param>
            <returns>True if this provider can create the specified object.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <summary>
            Tells the provide that it needs to provide a resource and report the results through the passed provideHandle. When this is called, all dependencies have completed and are available through the provideHandle.
            </summary>
            <param name="provideHandle">A handle used to update the operation.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <summary>
            Release and/or unload the given resource location and asset
            </summary>
            <param name="location">Location to release.</param>
            <param name="asset">Asset to unload.</param>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.IResourceProvider.BehaviourFlags">
            <summary>
            Custom flags for the provider.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance">
            <summary>
            Wrapper for scenes.  This is used to allow access to the AsyncOperation and delayed activation.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.Scene">
            <summary>
            The scene instance.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.Activate">
            <summary>
            Activate the scene via the AsyncOperation.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.ActivateAsync">
            <summary>
            Activate the scene via the AsyncOperation.  This is the scene loading AsyncOperation provided by the engine.
            The documentation for AsyncOperation can be found here: https://docs.unity3d.com/ScriptReference/AsyncOperation.html
            </summary>
            <returns>The scene load operation.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.GetHashCode">
            <inheritdoc cref="P:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.Scene"/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.Equals(System.Object)">
            <inheritdoc cref="P:UnityEngine.ResourceManagement.ResourceProviders.SceneInstance.Scene"/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider">
            <summary>
            Interface for scene providers.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider.ProvideScene(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <summary>
            Load a scene at a specified resource location.
            </summary>
            <param name="resourceManager">The resource manager to use for loading dependencies.</param>
            <param name="location">The location of the scene.</param>
            <param name="loadMode">Load mode for the scene.</param>
            <param name="activateOnLoad">If true, the scene is activated as soon as it finished loading. Otherwise it needs to be activated via the returned SceneInstance object.</param>
            <param name="priority">The loading priority for the load.</param>
            <returns>An operation handle for the loading of the scene.  The scene is wrapped in a SceneInstance object to support delayed activation.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ISceneProvider.ReleaseScene(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.ResourceManagement.ResourceProviders.SceneInstance})">
            <summary>
            Release a scene.
            </summary>
            <param name="resourceManager">The resource manager to use for loading dependencies.</param>
            <param name="sceneLoadHandle">The operation handle used to load the scene.</param>
            <returns>An operation handle for the unload.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.InstanceProvider">
            <summary>
            Basic implementation of IInstanceProvider.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.InstanceProvider.ProvideInstance(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.GameObject},UnityEngine.ResourceManagement.ResourceProviders.InstantiationParameters)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.InstanceProvider.ReleaseInstance(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.GameObject)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.JsonAssetProvider">
            <summary>
            Converts JSON serialized text into the requested object.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.JsonAssetProvider.Convert(System.Type,System.String)">
            <summary>
            Converts raw text into requested object type via JSONUtility.FromJson.
            </summary>
            <param name="type">The object type the text is converted to.</param>
            <param name="text">The text to convert.</param>
            <returns>Returns the converted object.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.LegacyResourcesProvider">
            <summary>
            Provides assets loaded via Resources.LoadAsync API.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.LegacyResourcesProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.LegacyResourcesProvider.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase">
            <summary>
            Base class for IResourceProvider.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.m_ProviderId">
            <summary>
            The unique identifier of the provider.
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.m_BehaviourFlags">
            <summary>
            The extra behavior of the provider.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.ProviderId">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.Initialize(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.CanProvide(System.Type,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.ToString">
            <summary>
            Converts information about the resource provider to a formatted string.
            </summary>
            <returns>Returns information about the resource provider.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <summary>
            Release the specified object that was created from the specified location.
            </summary>
            <param name="location">The location of the object</param>
            <param name="obj">The object to release.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.GetDefaultType(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Get the default type of object that this provider can provide.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <summary>
            Provide the object specified in the provideHandle.
            </summary>
            <param name="provideHandle">Contains all data needed to provide the requested object.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.ResourceProviderBase.InitializeAsync(UnityEngine.ResourceManagement.ResourceManager,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.SceneProvider">
            <summary>
            Implementation if ISceneProvider
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.SceneProvider.ProvideScene(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.SceneManagement.LoadSceneMode,System.Boolean,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.SceneProvider.ReleaseScene(UnityEngine.ResourceManagement.ResourceManager,UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.ResourceManagement.ResourceProviders.SceneInstance})">
            <inheritdoc/>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VBAsyncOperation`1.OperationException">
            <inheritdoc />
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VBAsyncOperation`1.PercentComplete">
            <inheritdoc />
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VBAsyncOperation`1.Context">
            <inheritdoc />
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleEntry">
            <summary>
            Contains data needed to simulate a bundled asset
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleEntry.Name">
            <summary>
            The name of the asset.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleEntry.Size">
            <summary>
            The file size of the asset, in bytes.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleEntry.#ctor">
            <summary>
            Construct a new VirtualAssetBundleEntry
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleEntry.#ctor(System.String,System.Int64)">
            <summary>
            Construct a new VirtualAssetBundleEntry
            </summary>
            <param name="name">The name of the asset.</param>
            <param name="size">The size of the asset, in bytes.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle">
            <summary>
            Contains data need to simulate an asset bundle.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.Name">
            <summary>
            The name of the bundle.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.Assets">
            <summary>
            The assets contained in the bundle.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.#ctor">
            <summary>
            Construct a new VirtualAssetBundle object.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.PercentComplete">
            <summary>
            The percent of data that has been loaded.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.#ctor(System.String,System.Boolean,System.UInt32,System.String)">
            <summary>
            Construct a new VirtualAssetBundle
            </summary>
            <param name="name">The name of the bundle.</param>
            <param name="local">Is the bundle local or remote.  This is used to determine which bandwidth value to use when simulating loading.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.SetSize(System.Int64,System.Int64)">
            <summary>
            Set the size of the bundle.
            </summary>
            <param name="dataSize">The size of the data.</param>
            <param name="headerSize">The size of the header.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.OnBeforeSerialize">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.OnAfterDeserialize">
            <summary>
            Load serialized data into runtime structures.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.LoadAssetAsync(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle,UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Load an asset via its location.  The asset will actually be loaded via the AssetDatabase API.
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundle.GetAssetBundle">
            <summary>
            Implementation of IAssetBundleResource API
            </summary>
            <returns>Always returns null.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleProvider">
            <summary>
            Simulates the loading behavior of an asset bundle.  Internally it uses the AssetDatabase API.  This provider will only work in the editor.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleProvider.GetDefaultType(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleProvider.#ctor(UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData)">
            <summary>
            Construct a new VirtualAssetBundleProvider object;
            <param name="data">Contains information on virtual bundle layout</param>
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleProvider.Initialize(System.String,System.String)">
            <summary>
            Initilization data is passed when when constructed from serialized data
            </summary>
            <param name="id">The provider id</param>
            <param name="data">The data string, this is assumed to be the virtual bundle data path</param>
            <returns>true if the data is as expected</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleProvider.Release(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData">
            <summary>
            Serialized data containing the asset bundle layout.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData.AssetBundles">
            <summary>
            The list of asset bundles to simulate.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData.RemoteLoadSpeed">
            <summary>
            Bandwidth value (in bytes per second) to simulate loading from a remote location.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData.LocalLoadSpeed">
            <summary>
            Bandwidth value (in bytes per second) to simulate loading from a local location.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData.#ctor">
            <summary>
            Construct a new VirtualAssetBundleRuntimeData object.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRuntimeData.#ctor(System.Int64,System.Int64)">
            <summary>
            Construct a new VirtualAssetBundleRuntimeData object.
            </summary>
            <param name="localSpeed">Bandwidth value (in bytes per second) to simulate loading from a local location.</param>
            <param name="remoteSpeed">Bandwidth value (in bytes per second) to simulate loading from a remote location.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRequestOptions">
            <summary>
            Custom version of AssetBundleRequestOptions used to compute needed download size while bypassing the cache.  In the future a virtual cache may be implemented.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualAssetBundleRequestOptions.ComputeSize(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.ResourceManagement.ResourceManager)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualBundledAssetProvider">
            <summary>
            Provides assets from virtual asset bundles.  Actual loads are done through the AssetDatabase API.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.Simulation.VirtualBundledAssetProvider.#ctor">
            <summary>
            Default copnstructor.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.ResourceProviders.TextDataProvider">
            <summary>
            Provides raw text from a local or remote URL.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.ResourceProviders.TextDataProvider.IgnoreFailures">
            <summary>
            Controls whether errors are logged - this is disabled when trying to load from the local cache since failures are expected
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.TextDataProvider.Convert(System.Type,System.String)">
            <summary>
            Method to convert the text into the object type requested.  Usually the text contains a JSON formatted serialized object.
            </summary>
            <param name="type">The object type the text is converted to.</param>
            <param name="text">The text to be converted.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.ResourceProviders.TextDataProvider.Provide(UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle)">
            <summary>
            Provides raw text data from the location.
            </summary>
            <param name="provideHandle">The data needed by the provider to perform the load.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.IUpdateReceiver">
            <summary>
            Providers that implement this interface will received Update calls from the ResourceManager each frame
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.IUpdateReceiver.Update(System.Single)">
            <summary>
            This will be called once per frame by the ResourceManager
            </summary>
            <param name="unscaledDeltaTime">The unscaled delta time since the last invocation of this function</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.ComponentSingleton`1">
            <summary>
            Creates a singleton.
            </summary>
            <typeparam name="T">The singleton type.</typeparam>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.ComponentSingleton`1.Exists">
            <summary>
            Indicates whether or not there is an existing instance of the singleton.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.ComponentSingleton`1.Instance">
            <summary>
            Stores the instance of the singleton.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ComponentSingleton`1.GetGameObjectName">
            <summary>
            Retrieves the name of the object.
            </summary>
            <returns>Returns the name of the object.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ComponentSingleton`1.DestroySingleton">
            <summary>
            Destroys the singleton.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.IInitializableObject">
            <summary>
            Interface for objects that support post construction initialization via an id and byte array.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.IInitializableObject.Initialize(System.String,System.String)">
            <summary>
            Initialize a constructed object.
            </summary>
            <param name="id">The id of the object.</param>
            <param name="data">Serialized data for the object.</param>
            <returns>The result of the initialization.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.IInitializableObject.InitializeAsync(UnityEngine.ResourceManagement.ResourceManager,System.String,System.String)">
            <summary>
            Async operation for initializing a constructed object.
            </summary>
            <param name="rm">The current instance of Resource Manager.</param>
            <param name="id">The id of the object.</param>
            <param name="data">Serialized data for the object.</param>
            <returns>Async operation</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.IObjectInitializationDataProvider">
            <summary>
            Interface for objects that can create object initialization data.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.IObjectInitializationDataProvider.Name">
            <summary>
            The name used in the GUI for this provider
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.IObjectInitializationDataProvider.CreateObjectInitializationData">
            <summary>
            Construct initialization data for runtime.
            </summary>
            <returns>Init data that will be deserialized at runtime.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.IAllocationStrategy">
            <summary>
            Allocation strategy for managing heap allocations
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.IAllocationStrategy.New(System.Type,System.Int32)">
            <summary>
            Create a new object of type t.
            </summary>
            <param name="type">The type to return.</param>
            <param name="typeHash">The hash code of the type.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.IAllocationStrategy.Release(System.Int32,System.Object)">
            <summary>
            Release an object.
            </summary>
            <param name="typeHash">The hash code of the type.</param>
            <param name="obj">The object to release.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.DefaultAllocationStrategy">
            <summary>
            Default allocator that relies in garbace collection
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.DefaultAllocationStrategy.New(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.DefaultAllocationStrategy.Release(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.LRUCacheAllocationStrategy">
            <summary>
            Allocation strategy that uses internal pools of objects to avoid allocations that can trigger GC calls.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.LRUCacheAllocationStrategy.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new LRUAllocationStrategy objct.
            </summary>
            <param name="poolMaxSize">The max size of each pool.</param>
            <param name="poolCapacity">The initial capacity to create each pool list with.</param>
            <param name="poolCacheMaxSize">The max size of the internal pool cache.</param>
            <param name="initialPoolCacheCapacity">The initial number of pools to create.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.LRUCacheAllocationStrategy.New(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.LRUCacheAllocationStrategy.Release(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.SerializedTypeRestrictionAttribute">
            <summary>
            Attribute for restricting which types can be assigned to a SerializedType
            </summary>
        </member>
        <member name="F:UnityEngine.ResourceManagement.Util.SerializedTypeRestrictionAttribute.type">
            <summary>
            The type to restrict a serialized type to.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.LinkedListNodeCache`1">
            <summary>
            Cache for nodes of LinkedLists.  This can be used to eliminate GC allocations.
            </summary>
            <typeparam name="T">The type of node.</typeparam>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.LinkedListNodeCache`1.Acquire(`0)">
            <summary>
            Creates or returns a LinkedListNode of the requested type and set the value.
            </summary>
            <param name="val">The value to set to returned node to.</param>
            <returns>A LinkedListNode with the value set to val.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.LinkedListNodeCache`1.Release(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Release the linked list node for later use.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.SerializedType">
            <summary>
            Wrapper for serializing types for runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.SerializedType.AssemblyName">
            <summary>
            The assembly name of the type.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.SerializedType.ClassName">
            <summary>
            The name of the type.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.SerializedType.ToString">
            <summary>
            Converts information about the serialized type to a formatted string.
            </summary>
            <returns>Returns information about the serialized type.</returns>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.SerializedType.Value">
            <summary>
            Get and set the serialized type.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.SerializedType.ValueChanged">
            <summary>
            Used for multi-object editing. Indicates whether or not property value was changed.
            </summary>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.ObjectInitializationData">
            <summary>
            Contains data used to construct and initialize objects at runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.ObjectInitializationData.Id">
            <summary>
            The object id.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.ObjectInitializationData.ObjectType">
            <summary>
            The object type that will be created.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Util.ObjectInitializationData.Data">
            <summary>
            String representation of the data that will be passed to the IInitializableObject.Initialize method of the created object.  This is usually a JSON string of the serialized data object.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ObjectInitializationData.ToString">
            <summary>
            Converts information about the initialization data to a formatted string.
            </summary>
            <returns>Returns information about the initialization data.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ObjectInitializationData.CreateInstance``1(System.String)">
            <summary>
            Create an instance of the defined object.  Initialize will be called on it with the id and data if it implements the IInitializableObject interface.
            </summary>
            <typeparam name="TObject">The instance type.</typeparam>
            <param name="idOverride">Optional id to assign to the created object.  This only applies to objects that inherit from IInitializableObject.</param>
            <returns>Constructed object.  This object will already be initialized with its serialized data and id.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ObjectInitializationData.GetAsyncInitHandle(UnityEngine.ResourceManagement.ResourceManager,System.String)">
            <summary>
            Create an instance of the defined object.  This will get the AsyncOperationHandle for the async Initialization operation if the object implements the IInitializableObject interface.
            </summary>
            <param name="rm">The current instance of Resource Manager</param>
            <param name="idOverride">Optional id to assign to the created object.  This only applies to objects that inherit from IInitializableObject.</param>
            <returns>AsyncOperationHandle for the async initialization operation if the defined type implements IInitializableObject, otherwise returns a default AsyncOperationHandle.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ObjectInitializationData.CreateSerializedInitializationData(System.Type,System.String,System.Object)">
            <summary>
            Construct a serialized data for the object.
            </summary>
            <param name="objectType">The type of object to create.</param>
            <param name="id">The object id.</param>
            <param name="dataObject">The serializable object that will be saved into the Data string via the JSONUtility.ToJson method.</param>
            <returns>Contains data used to construct and initialize an object at runtime.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ObjectInitializationData.CreateSerializedInitializationData``1(System.String,System.Object)">
            <summary>
            Construct a serialized data for the object.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="id">The ID for the object</param>
            <param name="dataObject">The serializable object that will be saved into the Data string via the JSONUtility.ToJson method.</param>
            <returns>Contains data used to construct and initialize an object at runtime.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ObjectInitializationData.GetRuntimeTypes">
            <summary>
            Get the set of runtime types need to deserialized this object.  This is used to ensure that types are not stripped from player builds.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Util.ResourceManagerConfig">
            <summary>
            Resource Manager Config utility class.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.ExtractKeyAndSubKey(System.Object,System.String@,System.String@)">
            <summary>
            Extracts main and subobject keys if properly formatted
            </summary>
            <param name="keyObj">The key as an object.</param>
            <param name="mainKey">The key of the main asset.  This will be set to null if a sub key is not found.</param>
            <param name="subKey">The key of the sub object.  This will be set to null if not found.</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.IsPathRemote(System.String)">
            <summary>
            Check to see if a path is remote or not.
            </summary>
            <param name="path">The path to check.</param>
            <returns>Returns true if path is remote.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.ShouldPathUseWebRequest(System.String)">
            <summary>
            Check if path should use WebRequest.  A path should use WebRequest for remote paths and platforms that require WebRequest to load locally.
            </summary>
            <param name="path">The path to check.</param>
            <returns>Returns true if path should use WebRequest.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.CreateArrayResult(System.Type,UnityEngine.Object[])">
            <summary>
            Used to create an operation result that has multiple items.
            </summary>
            <param name="type">The type of the result.</param>
            <param name="allAssets">The result objects.</param>
            <returns>Returns Array object with result items.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.CreateArrayResult``1(UnityEngine.Object[])">
            <summary>
            Used to create an operation result that has multiple items.
            </summary>
            <typeparam name="TObject">The type of the result.</typeparam>
            <param name="allAssets">The result objects.</param>
            <returns>Returns result Array as TObject.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.CreateListResult(System.Type,UnityEngine.Object[])">
            <summary>
            Used to create an operation result that has multiple items.
            </summary>
            <param name="type">The type of the result objects.</param>
            <param name="allAssets">The result objects.</param>
            <returns>An IList of the resulting objects.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.CreateListResult``1(UnityEngine.Object[])">
            <summary>
            Used to create an operation result that has multiple items.
            </summary>
            <typeparam name="TObject">The type of the result.</typeparam>
            <param name="allAssets">The result objects.</param>
            <returns>An IList of the resulting objects converted to TObject.</returns>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Util.ResourceManagerConfig.IsInstance``2">
            <summary>
            Check if one type is an instance of another type.
            </summary>
            <typeparam name="T1">Expected base type.</typeparam>
            <typeparam name="T2">Expected child type.</typeparam>
            <returns>Returns true if T2 is a base type of T1.</returns>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Exceptions.ResourceManagerException">
            <summary>
            Base class for all ResourceManager related exceptions.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.ResourceManagerException.#ctor">
            <summary>
            Construct a new ResourceManagerException.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.ResourceManagerException.#ctor(System.String)">
            <summary>
            Construct a new ResourceManagerException.
            </summary>
            <param name="message">Message to describe the exception.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.ResourceManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new ResourceManagerException.
            </summary>
            <param name="message">Message to describe the exception.</param>
            <param name="innerException">Inner exception that caused this exception.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.ResourceManagerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a new ResourceManagerException.
            </summary>
            <param name="message">Message to describe the exception.</param>
            <param name="context">Context related to the exception.</param>
        </member>
        <member name="T:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException">
            <summary>
            Exception returned when the IResourceProvider is not found for a location.
            </summary>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.Location">
            <summary>
            The location that contains the provider id that was not found.
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.#ctor(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation)">
            <summary>
            Construct a new UnknownResourceProviderException
            </summary>
            <param name="location">The location that caused the exception to be created.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.#ctor">
            <summary>
             Construct a new UnknownResourceProviderException
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.#ctor(System.String)">
            <summary>
            Construct a new UnknownResourceProviderException
            </summary>
            <param name="message">Message to describe the exception.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new UnknownResourceProviderException
            </summary>
            <param name="message">Message to describe the exception.</param>
            <param name="innerException">Inner exception that caused this exception.</param>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a new UnknownResourceProviderException
            </summary>
            <param name="message">Message to describe the exception.</param>
            <param name="context">Context related to the exception.</param>
        </member>
        <member name="P:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.Message">
            <summary>
            Returns a string describing  this exception
            </summary>
        </member>
        <member name="M:UnityEngine.ResourceManagement.Exceptions.UnknownResourceProviderException.ToString">
            <summary>
            Returns string representation of exception.
            </summary>
            <returns>String representation of exception.</returns>
        </member>
    </members>
</doc>
